{"ast":null,"code":"import _slicedToArray from \"/home/johnatan/MP/mp-app/ap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/johnatan/MP/mp-app/ap/src/app/auth/AuthGuard.jsx\";\n\nimport React, { // useContext,\nuseEffect, useState } from 'react';\nimport { Redirect, useLocation } from 'react-router-dom'; // import AppContext from \"app/appContext\";\n\nimport useAuth from 'app/hooks/useAuth'; // const getUserRoleAuthStatus = (pathname, user, routes) => {\n//   const matched = routes.find((r) => r.path === pathname);\n//   const authenticated =\n//     matched && matched.auth && matched.auth.length\n//       ? matched.auth.includes(user.role)\n//       : true;\n//   console.log(matched, user);\n//   return authenticated;\n// };\n\nvar AuthGuard = function AuthGuard(_ref) {\n  var children = _ref.children;\n\n  var _useAuth = useAuth(),\n      isAuthenticated = _useAuth.isAuthenticated;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      previouseRoute = _useState2[0],\n      setPreviousRoute = _useState2[1];\n\n  var _useLocation = useLocation(),\n      pathname = _useLocation.pathname; // const { routes } = useContext(AppContext);\n  // const isUserRoleAuthenticated = getUserRoleAuthStatus(pathname, user, routes);\n  // let authenticated = isAuthenticated && isUserRoleAuthenticated;\n  // IF YOU NEED ROLE BASED AUTHENTICATION,\n  // UNCOMMENT ABOVE TWO LINES, getUserRoleAuthStatus METHOD AND user VARIABLE\n  // AND COMMENT OUT BELOW LINE\n\n\n  var authenticated = isAuthenticated;\n  useEffect(function () {\n    if (previouseRoute !== null) setPreviousRoute(pathname);\n  }, [pathname, previouseRoute]);\n  if (authenticated) return /*#__PURE__*/React.createElement(React.Fragment, null, children);else {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: {\n        pathname: '/session/signin',\n        state: {\n          redirectUrl: previouseRoute\n        }\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    });\n  }\n};\n\nexport default AuthGuard;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/src/app/auth/AuthGuard.jsx"],"names":["React","useEffect","useState","Redirect","useLocation","useAuth","AuthGuard","children","isAuthenticated","previouseRoute","setPreviousRoute","pathname","authenticated","state","redirectUrl"],"mappings":";;;;;AAAA,OAAOA,KAAP,IACI;AACAC,SAFJ,EAGIC,QAHJ,QAIO,OAJP;AAKA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,kBAAtC,C,CACA;;AACA,OAAOC,OAAP,MAAoB,mBAApB,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAChC,iBAGIF,OAAO,EAHX;AAAA,MACIG,eADJ,YACIA,eADJ;;AAKA,kBAA2CN,QAAQ,CAAC,IAAD,CAAnD;AAAA;AAAA,MAAOO,cAAP;AAAA,MAAuBC,gBAAvB;;AACA,qBAAqBN,WAAW,EAAhC;AAAA,MAAQO,QAAR,gBAAQA,QAAR,CAPgC,CAShC;AACA;AACA;AAEA;AACA;AACA;;;AACA,MAAIC,aAAa,GAAGJ,eAApB;AAEAP,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIQ,cAAc,KAAK,IAAvB,EAA6BC,gBAAgB,CAACC,QAAD,CAAhB;AAChC,GAFQ,EAEN,CAACA,QAAD,EAAWF,cAAX,CAFM,CAAT;AAIA,MAAIG,aAAJ,EAAmB,oBAAO,0CAAGL,QAAH,CAAP,CAAnB,KACK;AACD,wBACI,oBAAC,QAAD;AACI,MAAA,EAAE,EAAE;AACAI,QAAAA,QAAQ,EAAE,iBADV;AAEAE,QAAAA,KAAK,EAAE;AAAEC,UAAAA,WAAW,EAAEL;AAAf;AAFP,OADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAQH;AACJ,CAjCD;;AAmCA,eAAeH,SAAf","sourcesContent":["import React, {\n    // useContext,\n    useEffect,\n    useState,\n} from 'react'\nimport { Redirect, useLocation } from 'react-router-dom'\n// import AppContext from \"app/appContext\";\nimport useAuth from 'app/hooks/useAuth'\n\n// const getUserRoleAuthStatus = (pathname, user, routes) => {\n//   const matched = routes.find((r) => r.path === pathname);\n\n//   const authenticated =\n//     matched && matched.auth && matched.auth.length\n//       ? matched.auth.includes(user.role)\n//       : true;\n//   console.log(matched, user);\n//   return authenticated;\n// };\n\nconst AuthGuard = ({ children }) => {\n    const {\n        isAuthenticated,\n        // user\n    } = useAuth()\n\n    const [previouseRoute, setPreviousRoute] = useState(null)\n    const { pathname } = useLocation()\n\n    // const { routes } = useContext(AppContext);\n    // const isUserRoleAuthenticated = getUserRoleAuthStatus(pathname, user, routes);\n    // let authenticated = isAuthenticated && isUserRoleAuthenticated;\n\n    // IF YOU NEED ROLE BASED AUTHENTICATION,\n    // UNCOMMENT ABOVE TWO LINES, getUserRoleAuthStatus METHOD AND user VARIABLE\n    // AND COMMENT OUT BELOW LINE\n    let authenticated = isAuthenticated\n\n    useEffect(() => {\n        if (previouseRoute !== null) setPreviousRoute(pathname)\n    }, [pathname, previouseRoute])\n\n    if (authenticated) return <>{children}</>\n    else {\n        return (\n            <Redirect\n                to={{\n                    pathname: '/session/signin',\n                    state: { redirectUrl: previouseRoute },\n                }}\n            />\n        )\n    }\n}\n\nexport default AuthGuard\n"]},"metadata":{},"sourceType":"module"}