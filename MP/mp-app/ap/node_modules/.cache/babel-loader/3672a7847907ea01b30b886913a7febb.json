{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _config = require(\"./config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar zrender = require(\"zrender/lib/zrender\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar colorTool = require(\"zrender/lib/tool/color\");\n\nvar env = require(\"zrender/lib/core/env\");\n\nvar timsort = require(\"zrender/lib/core/timsort\");\n\nvar Eventful = require(\"zrender/lib/mixin/Eventful\");\n\nvar GlobalModel = require(\"./model/Global\");\n\nvar ExtensionAPI = require(\"./ExtensionAPI\");\n\nvar CoordinateSystemManager = require(\"./CoordinateSystem\");\n\nvar OptionManager = require(\"./model/OptionManager\");\n\nvar backwardCompat = require(\"./preprocessor/backwardCompat\");\n\nvar dataStack = require(\"./processor/dataStack\");\n\nvar ComponentModel = require(\"./model/Component\");\n\nvar SeriesModel = require(\"./model/Series\");\n\nvar ComponentView = require(\"./view/Component\");\n\nvar ChartView = require(\"./view/Chart\");\n\nvar graphic = require(\"./util/graphic\");\n\nvar modelUtil = require(\"./util/model\");\n\nvar _throttle = require(\"./util/throttle\");\n\nvar throttle = _throttle.throttle;\n\nvar seriesColor = require(\"./visual/seriesColor\");\n\nvar aria = require(\"./visual/aria\");\n\nvar loadingDefault = require(\"./loading/default\");\n\nvar Scheduler = require(\"./stream/Scheduler\");\n\nvar lightTheme = require(\"./theme/light\");\n\nvar darkTheme = require(\"./theme/dark\");\n\nrequire(\"./component/dataset\");\n\nvar mapDataStorage = require(\"./coord/geo/mapDataStorage\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar assert = zrUtil.assert;\nvar each = zrUtil.each;\nvar isFunction = zrUtil.isFunction;\nvar isObject = zrUtil.isObject;\nvar parseClassType = ComponentModel.parseClassType;\nvar version = '4.9.0';\nvar dependencies = {\n  zrender: '4.3.2'\n};\nvar TEST_FRAME_REMAIN_TIME = 1;\nvar PRIORITY_PROCESSOR_FILTER = 1000;\nvar PRIORITY_PROCESSOR_SERIES_FILTER = 800;\nvar PRIORITY_PROCESSOR_DATASTACK = 900;\nvar PRIORITY_PROCESSOR_STATISTIC = 5000;\nvar PRIORITY_VISUAL_LAYOUT = 1000;\nvar PRIORITY_VISUAL_PROGRESSIVE_LAYOUT = 1100;\nvar PRIORITY_VISUAL_GLOBAL = 2000;\nvar PRIORITY_VISUAL_CHART = 3000;\nvar PRIORITY_VISUAL_POST_CHART_LAYOUT = 3500;\nvar PRIORITY_VISUAL_COMPONENT = 4000; // FIXME\n// necessary?\n\nvar PRIORITY_VISUAL_BRUSH = 5000;\nvar PRIORITY = {\n  PROCESSOR: {\n    FILTER: PRIORITY_PROCESSOR_FILTER,\n    SERIES_FILTER: PRIORITY_PROCESSOR_SERIES_FILTER,\n    STATISTIC: PRIORITY_PROCESSOR_STATISTIC\n  },\n  VISUAL: {\n    LAYOUT: PRIORITY_VISUAL_LAYOUT,\n    PROGRESSIVE_LAYOUT: PRIORITY_VISUAL_PROGRESSIVE_LAYOUT,\n    GLOBAL: PRIORITY_VISUAL_GLOBAL,\n    CHART: PRIORITY_VISUAL_CHART,\n    POST_CHART_LAYOUT: PRIORITY_VISUAL_POST_CHART_LAYOUT,\n    COMPONENT: PRIORITY_VISUAL_COMPONENT,\n    BRUSH: PRIORITY_VISUAL_BRUSH\n  }\n}; // Main process have three entries: `setOption`, `dispatchAction` and `resize`,\n// where they must not be invoked nestedly, except the only case: invoke\n// dispatchAction with updateMethod \"none\" in main process.\n// This flag is used to carry out this rule.\n// All events will be triggered out side main process (i.e. when !this[IN_MAIN_PROCESS]).\n\nvar IN_MAIN_PROCESS = '__flagInMainProcess';\nvar OPTION_UPDATED = '__optionUpdated';\nvar ACTION_REG = /^[a-zA-Z0-9_]+$/;\n\nfunction createRegisterEventWithLowercaseName(method, ignoreDisposed) {\n  return function (eventName, handler, context) {\n    if (!ignoreDisposed && this._disposed) {\n      disposedWarning(this.id);\n      return;\n    } // Event name is all lowercase\n\n\n    eventName = eventName && eventName.toLowerCase();\n    Eventful.prototype[method].call(this, eventName, handler, context);\n  };\n}\n/**\n * @module echarts~MessageCenter\n */\n\n\nfunction MessageCenter() {\n  Eventful.call(this);\n}\n\nMessageCenter.prototype.on = createRegisterEventWithLowercaseName('on', true);\nMessageCenter.prototype.off = createRegisterEventWithLowercaseName('off', true);\nMessageCenter.prototype.one = createRegisterEventWithLowercaseName('one', true);\nzrUtil.mixin(MessageCenter, Eventful);\n/**\n * @module echarts~ECharts\n */\n\nfunction ECharts(dom, theme, opts) {\n  opts = opts || {}; // Get theme by name\n\n  if (typeof theme === 'string') {\n    theme = themeStorage[theme];\n  }\n  /**\n   * @type {string}\n   */\n\n\n  this.id;\n  /**\n   * Group id\n   * @type {string}\n   */\n\n  this.group;\n  /**\n   * @type {HTMLElement}\n   * @private\n   */\n\n  this._dom = dom;\n  var defaultRenderer = 'canvas';\n  /**\n   * @type {module:zrender/ZRender}\n   * @private\n   */\n\n  var zr = this._zr = zrender.init(dom, {\n    renderer: opts.renderer || defaultRenderer,\n    devicePixelRatio: opts.devicePixelRatio,\n    width: opts.width,\n    height: opts.height\n  });\n  /**\n   * Expect 60 fps.\n   * @type {Function}\n   * @private\n   */\n\n  this._throttledZrFlush = throttle(zrUtil.bind(zr.flush, zr), 17);\n  var theme = zrUtil.clone(theme);\n  theme && backwardCompat(theme, true);\n  /**\n   * @type {Object}\n   * @private\n   */\n\n  this._theme = theme;\n  /**\n   * @type {Array.<module:echarts/view/Chart>}\n   * @private\n   */\n\n  this._chartsViews = [];\n  /**\n   * @type {Object.<string, module:echarts/view/Chart>}\n   * @private\n   */\n\n  this._chartsMap = {};\n  /**\n   * @type {Array.<module:echarts/view/Component>}\n   * @private\n   */\n\n  this._componentsViews = [];\n  /**\n   * @type {Object.<string, module:echarts/view/Component>}\n   * @private\n   */\n\n  this._componentsMap = {};\n  /**\n   * @type {module:echarts/CoordinateSystem}\n   * @private\n   */\n\n  this._coordSysMgr = new CoordinateSystemManager();\n  /**\n   * @type {module:echarts/ExtensionAPI}\n   * @private\n   */\n\n  var api = this._api = createExtensionAPI(this); // Sort on demand\n\n  function prioritySortFunc(a, b) {\n    return a.__prio - b.__prio;\n  }\n\n  timsort(visualFuncs, prioritySortFunc);\n  timsort(dataProcessorFuncs, prioritySortFunc);\n  /**\n   * @type {module:echarts/stream/Scheduler}\n   */\n\n  this._scheduler = new Scheduler(this, api, dataProcessorFuncs, visualFuncs);\n  Eventful.call(this, this._ecEventProcessor = new EventProcessor());\n  /**\n   * @type {module:echarts~MessageCenter}\n   * @private\n   */\n\n  this._messageCenter = new MessageCenter(); // Init mouse events\n\n  this._initEvents(); // In case some people write `window.onresize = chart.resize`\n\n\n  this.resize = zrUtil.bind(this.resize, this); // Can't dispatch action during rendering procedure\n\n  this._pendingActions = [];\n  zr.animation.on('frame', this._onframe, this);\n  bindRenderedEvent(zr, this); // ECharts instance can be used as value.\n\n  zrUtil.setAsPrimitive(this);\n}\n\nvar echartsProto = ECharts.prototype;\n\nechartsProto._onframe = function () {\n  if (this._disposed) {\n    return;\n  }\n\n  var scheduler = this._scheduler; // Lazy update\n\n  if (this[OPTION_UPDATED]) {\n    var silent = this[OPTION_UPDATED].silent;\n    this[IN_MAIN_PROCESS] = true;\n    prepare(this);\n    updateMethods.update.call(this);\n    this[IN_MAIN_PROCESS] = false;\n    this[OPTION_UPDATED] = false;\n    flushPendingActions.call(this, silent);\n    triggerUpdatedEvent.call(this, silent);\n  } // Avoid do both lazy update and progress in one frame.\n  else if (scheduler.unfinished) {\n      // Stream progress.\n      var remainTime = TEST_FRAME_REMAIN_TIME;\n      var ecModel = this._model;\n      var api = this._api;\n      scheduler.unfinished = false;\n\n      do {\n        var startTime = +new Date();\n        scheduler.performSeriesTasks(ecModel); // Currently dataProcessorFuncs do not check threshold.\n\n        scheduler.performDataProcessorTasks(ecModel);\n        updateStreamModes(this, ecModel); // Do not update coordinate system here. Because that coord system update in\n        // each frame is not a good user experience. So we follow the rule that\n        // the extent of the coordinate system is determin in the first frame (the\n        // frame is executed immedietely after task reset.\n        // this._coordSysMgr.update(ecModel, api);\n        // console.log('--- ec frame visual ---', remainTime);\n\n        scheduler.performVisualTasks(ecModel);\n        renderSeries(this, this._model, api, 'remain');\n        remainTime -= +new Date() - startTime;\n      } while (remainTime > 0 && scheduler.unfinished); // Call flush explicitly for trigger finished event.\n\n\n      if (!scheduler.unfinished) {\n        this._zr.flush();\n      } // Else, zr flushing be ensue within the same frame,\n      // because zr flushing is after onframe event.\n\n    }\n};\n/**\n * @return {HTMLElement}\n */\n\n\nechartsProto.getDom = function () {\n  return this._dom;\n};\n/**\n * @return {module:zrender~ZRender}\n */\n\n\nechartsProto.getZr = function () {\n  return this._zr;\n};\n/**\n * Usage:\n * chart.setOption(option, notMerge, lazyUpdate);\n * chart.setOption(option, {\n *     notMerge: ...,\n *     lazyUpdate: ...,\n *     silent: ...\n * });\n *\n * @param {Object} option\n * @param {Object|boolean} [opts] opts or notMerge.\n * @param {boolean} [opts.notMerge=false]\n * @param {boolean} [opts.lazyUpdate=false] Useful when setOption frequently.\n */\n\n\nechartsProto.setOption = function (option, notMerge, lazyUpdate) {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  var silent;\n\n  if (isObject(notMerge)) {\n    lazyUpdate = notMerge.lazyUpdate;\n    silent = notMerge.silent;\n    notMerge = notMerge.notMerge;\n  }\n\n  this[IN_MAIN_PROCESS] = true;\n\n  if (!this._model || notMerge) {\n    var optionManager = new OptionManager(this._api);\n    var theme = this._theme;\n    var ecModel = this._model = new GlobalModel();\n    ecModel.scheduler = this._scheduler;\n    ecModel.init(null, null, theme, optionManager);\n  }\n\n  this._model.setOption(option, optionPreprocessorFuncs);\n\n  if (lazyUpdate) {\n    this[OPTION_UPDATED] = {\n      silent: silent\n    };\n    this[IN_MAIN_PROCESS] = false;\n  } else {\n    prepare(this);\n    updateMethods.update.call(this); // Ensure zr refresh sychronously, and then pixel in canvas can be\n    // fetched after `setOption`.\n\n    this._zr.flush();\n\n    this[OPTION_UPDATED] = false;\n    this[IN_MAIN_PROCESS] = false;\n    flushPendingActions.call(this, silent);\n    triggerUpdatedEvent.call(this, silent);\n  }\n};\n/**\n * @DEPRECATED\n */\n\n\nechartsProto.setTheme = function () {\n  console.error('ECharts#setTheme() is DEPRECATED in ECharts 3.0');\n};\n/**\n * @return {module:echarts/model/Global}\n */\n\n\nechartsProto.getModel = function () {\n  return this._model;\n};\n/**\n * @return {Object}\n */\n\n\nechartsProto.getOption = function () {\n  return this._model && this._model.getOption();\n};\n/**\n * @return {number}\n */\n\n\nechartsProto.getWidth = function () {\n  return this._zr.getWidth();\n};\n/**\n * @return {number}\n */\n\n\nechartsProto.getHeight = function () {\n  return this._zr.getHeight();\n};\n/**\n * @return {number}\n */\n\n\nechartsProto.getDevicePixelRatio = function () {\n  return this._zr.painter.dpr || window.devicePixelRatio || 1;\n};\n/**\n * Get canvas which has all thing rendered\n * @param {Object} opts\n * @param {string} [opts.backgroundColor]\n * @return {string}\n */\n\n\nechartsProto.getRenderedCanvas = function (opts) {\n  if (!env.canvasSupported) {\n    return;\n  }\n\n  opts = opts || {};\n  opts.pixelRatio = opts.pixelRatio || 1;\n  opts.backgroundColor = opts.backgroundColor || this._model.get('backgroundColor');\n  var zr = this._zr; // var list = zr.storage.getDisplayList();\n  // Stop animations\n  // Never works before in init animation, so remove it.\n  // zrUtil.each(list, function (el) {\n  //     el.stopAnimation(true);\n  // });\n\n  return zr.painter.getRenderedCanvas(opts);\n};\n/**\n * Get svg data url\n * @return {string}\n */\n\n\nechartsProto.getSvgDataURL = function () {\n  if (!env.svgSupported) {\n    return;\n  }\n\n  var zr = this._zr;\n  var list = zr.storage.getDisplayList(); // Stop animations\n\n  zrUtil.each(list, function (el) {\n    el.stopAnimation(true);\n  });\n  return zr.painter.toDataURL();\n};\n/**\n * @return {string}\n * @param {Object} opts\n * @param {string} [opts.type='png']\n * @param {string} [opts.pixelRatio=1]\n * @param {string} [opts.backgroundColor]\n * @param {string} [opts.excludeComponents]\n */\n\n\nechartsProto.getDataURL = function (opts) {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  opts = opts || {};\n  var excludeComponents = opts.excludeComponents;\n  var ecModel = this._model;\n  var excludesComponentViews = [];\n  var self = this;\n  each(excludeComponents, function (componentType) {\n    ecModel.eachComponent({\n      mainType: componentType\n    }, function (component) {\n      var view = self._componentsMap[component.__viewId];\n\n      if (!view.group.ignore) {\n        excludesComponentViews.push(view);\n        view.group.ignore = true;\n      }\n    });\n  });\n  var url = this._zr.painter.getType() === 'svg' ? this.getSvgDataURL() : this.getRenderedCanvas(opts).toDataURL('image/' + (opts && opts.type || 'png'));\n  each(excludesComponentViews, function (view) {\n    view.group.ignore = false;\n  });\n  return url;\n};\n/**\n * @return {string}\n * @param {Object} opts\n * @param {string} [opts.type='png']\n * @param {string} [opts.pixelRatio=1]\n * @param {string} [opts.backgroundColor]\n */\n\n\nechartsProto.getConnectedDataURL = function (opts) {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  if (!env.canvasSupported) {\n    return;\n  }\n\n  var isSvg = opts.type === 'svg';\n  var groupId = this.group;\n  var mathMin = Math.min;\n  var mathMax = Math.max;\n  var MAX_NUMBER = Infinity;\n\n  if (connectedGroups[groupId]) {\n    var left = MAX_NUMBER;\n    var top = MAX_NUMBER;\n    var right = -MAX_NUMBER;\n    var bottom = -MAX_NUMBER;\n    var canvasList = [];\n    var dpr = opts && opts.pixelRatio || 1;\n    zrUtil.each(instances, function (chart, id) {\n      if (chart.group === groupId) {\n        var canvas = isSvg ? chart.getZr().painter.getSvgDom().innerHTML : chart.getRenderedCanvas(zrUtil.clone(opts));\n        var boundingRect = chart.getDom().getBoundingClientRect();\n        left = mathMin(boundingRect.left, left);\n        top = mathMin(boundingRect.top, top);\n        right = mathMax(boundingRect.right, right);\n        bottom = mathMax(boundingRect.bottom, bottom);\n        canvasList.push({\n          dom: canvas,\n          left: boundingRect.left,\n          top: boundingRect.top\n        });\n      }\n    });\n    left *= dpr;\n    top *= dpr;\n    right *= dpr;\n    bottom *= dpr;\n    var width = right - left;\n    var height = bottom - top;\n    var targetCanvas = zrUtil.createCanvas();\n    var zr = zrender.init(targetCanvas, {\n      renderer: isSvg ? 'svg' : 'canvas'\n    });\n    zr.resize({\n      width: width,\n      height: height\n    });\n\n    if (isSvg) {\n      var content = '';\n      each(canvasList, function (item) {\n        var x = item.left - left;\n        var y = item.top - top;\n        content += '<g transform=\"translate(' + x + ',' + y + ')\">' + item.dom + '</g>';\n      });\n      zr.painter.getSvgRoot().innerHTML = content;\n\n      if (opts.connectedBackgroundColor) {\n        zr.painter.setBackgroundColor(opts.connectedBackgroundColor);\n      }\n\n      zr.refreshImmediately();\n      return zr.painter.toDataURL();\n    } else {\n      // Background between the charts\n      if (opts.connectedBackgroundColor) {\n        zr.add(new graphic.Rect({\n          shape: {\n            x: 0,\n            y: 0,\n            width: width,\n            height: height\n          },\n          style: {\n            fill: opts.connectedBackgroundColor\n          }\n        }));\n      }\n\n      each(canvasList, function (item) {\n        var img = new graphic.Image({\n          style: {\n            x: item.left * dpr - left,\n            y: item.top * dpr - top,\n            image: item.dom\n          }\n        });\n        zr.add(img);\n      });\n      zr.refreshImmediately();\n      return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));\n    }\n  } else {\n    return this.getDataURL(opts);\n  }\n};\n/**\n * Convert from logical coordinate system to pixel coordinate system.\n * See CoordinateSystem#convertToPixel.\n * @param {string|Object} finder\n *        If string, e.g., 'geo', means {geoIndex: 0}.\n *        If Object, could contain some of these properties below:\n *        {\n *            seriesIndex / seriesId / seriesName,\n *            geoIndex / geoId, geoName,\n *            bmapIndex / bmapId / bmapName,\n *            xAxisIndex / xAxisId / xAxisName,\n *            yAxisIndex / yAxisId / yAxisName,\n *            gridIndex / gridId / gridName,\n *            ... (can be extended)\n *        }\n * @param {Array|number} value\n * @return {Array|number} result\n */\n\n\nechartsProto.convertToPixel = zrUtil.curry(doConvertPixel, 'convertToPixel');\n/**\n * Convert from pixel coordinate system to logical coordinate system.\n * See CoordinateSystem#convertFromPixel.\n * @param {string|Object} finder\n *        If string, e.g., 'geo', means {geoIndex: 0}.\n *        If Object, could contain some of these properties below:\n *        {\n *            seriesIndex / seriesId / seriesName,\n *            geoIndex / geoId / geoName,\n *            bmapIndex / bmapId / bmapName,\n *            xAxisIndex / xAxisId / xAxisName,\n *            yAxisIndex / yAxisId / yAxisName\n *            gridIndex / gridId / gridName,\n *            ... (can be extended)\n *        }\n * @param {Array|number} value\n * @return {Array|number} result\n */\n\nechartsProto.convertFromPixel = zrUtil.curry(doConvertPixel, 'convertFromPixel');\n\nfunction doConvertPixel(methodName, finder, value) {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  var ecModel = this._model;\n\n  var coordSysList = this._coordSysMgr.getCoordinateSystems();\n\n  var result;\n  finder = modelUtil.parseFinder(ecModel, finder);\n\n  for (var i = 0; i < coordSysList.length; i++) {\n    var coordSys = coordSysList[i];\n\n    if (coordSys[methodName] && (result = coordSys[methodName](ecModel, finder, value)) != null) {\n      return result;\n    }\n  }\n}\n/**\n * Is the specified coordinate systems or components contain the given pixel point.\n * @param {string|Object} finder\n *        If string, e.g., 'geo', means {geoIndex: 0}.\n *        If Object, could contain some of these properties below:\n *        {\n *            seriesIndex / seriesId / seriesName,\n *            geoIndex / geoId / geoName,\n *            bmapIndex / bmapId / bmapName,\n *            xAxisIndex / xAxisId / xAxisName,\n *            yAxisIndex / yAxisId / yAxisName,\n *            gridIndex / gridId / gridName,\n *            ... (can be extended)\n *        }\n * @param {Array|number} value\n * @return {boolean} result\n */\n\n\nechartsProto.containPixel = function (finder, value) {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  var ecModel = this._model;\n  var result;\n  finder = modelUtil.parseFinder(ecModel, finder);\n  zrUtil.each(finder, function (models, key) {\n    key.indexOf('Models') >= 0 && zrUtil.each(models, function (model) {\n      var coordSys = model.coordinateSystem;\n\n      if (coordSys && coordSys.containPoint) {\n        result |= !!coordSys.containPoint(value);\n      } else if (key === 'seriesModels') {\n        var view = this._chartsMap[model.__viewId];\n\n        if (view && view.containPoint) {\n          result |= view.containPoint(value, model);\n        } else {}\n      } else {}\n    }, this);\n  }, this);\n  return !!result;\n};\n/**\n * Get visual from series or data.\n * @param {string|Object} finder\n *        If string, e.g., 'series', means {seriesIndex: 0}.\n *        If Object, could contain some of these properties below:\n *        {\n *            seriesIndex / seriesId / seriesName,\n *            dataIndex / dataIndexInside\n *        }\n *        If dataIndex is not specified, series visual will be fetched,\n *        but not data item visual.\n *        If all of seriesIndex, seriesId, seriesName are not specified,\n *        visual will be fetched from first series.\n * @param {string} visualType 'color', 'symbol', 'symbolSize'\n */\n\n\nechartsProto.getVisual = function (finder, visualType) {\n  var ecModel = this._model;\n  finder = modelUtil.parseFinder(ecModel, finder, {\n    defaultMainType: 'series'\n  });\n  var seriesModel = finder.seriesModel;\n  var data = seriesModel.getData();\n  var dataIndexInside = finder.hasOwnProperty('dataIndexInside') ? finder.dataIndexInside : finder.hasOwnProperty('dataIndex') ? data.indexOfRawIndex(finder.dataIndex) : null;\n  return dataIndexInside != null ? data.getItemVisual(dataIndexInside, visualType) : data.getVisual(visualType);\n};\n/**\n * Get view of corresponding component model\n * @param  {module:echarts/model/Component} componentModel\n * @return {module:echarts/view/Component}\n */\n\n\nechartsProto.getViewOfComponentModel = function (componentModel) {\n  return this._componentsMap[componentModel.__viewId];\n};\n/**\n * Get view of corresponding series model\n * @param  {module:echarts/model/Series} seriesModel\n * @return {module:echarts/view/Chart}\n */\n\n\nechartsProto.getViewOfSeriesModel = function (seriesModel) {\n  return this._chartsMap[seriesModel.__viewId];\n};\n\nvar updateMethods = {\n  prepareAndUpdate: function prepareAndUpdate(payload) {\n    prepare(this);\n    updateMethods.update.call(this, payload);\n  },\n\n  /**\n   * @param {Object} payload\n   * @private\n   */\n  update: function update(payload) {\n    // console.profile && console.profile('update');\n    var ecModel = this._model;\n    var api = this._api;\n    var zr = this._zr;\n    var coordSysMgr = this._coordSysMgr;\n    var scheduler = this._scheduler; // update before setOption\n\n    if (!ecModel) {\n      return;\n    }\n\n    scheduler.restoreData(ecModel, payload);\n    scheduler.performSeriesTasks(ecModel); // TODO\n    // Save total ecModel here for undo/redo (after restoring data and before processing data).\n    // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.\n    // Create new coordinate system each update\n    // In LineView may save the old coordinate system and use it to get the orignal point\n\n    coordSysMgr.create(ecModel, api);\n    scheduler.performDataProcessorTasks(ecModel, payload); // Current stream render is not supported in data process. So we can update\n    // stream modes after data processing, where the filtered data is used to\n    // deteming whether use progressive rendering.\n\n    updateStreamModes(this, ecModel); // We update stream modes before coordinate system updated, then the modes info\n    // can be fetched when coord sys updating (consider the barGrid extent fix). But\n    // the drawback is the full coord info can not be fetched. Fortunately this full\n    // coord is not requied in stream mode updater currently.\n\n    coordSysMgr.update(ecModel, api);\n    clearColorPalette(ecModel);\n    scheduler.performVisualTasks(ecModel, payload);\n    render(this, ecModel, api, payload); // Set background\n\n    var backgroundColor = ecModel.get('backgroundColor') || 'transparent'; // In IE8\n\n    if (!env.canvasSupported) {\n      var colorArr = colorTool.parse(backgroundColor);\n      backgroundColor = colorTool.stringify(colorArr, 'rgb');\n\n      if (colorArr[3] === 0) {\n        backgroundColor = 'transparent';\n      }\n    } else {\n      zr.setBackgroundColor(backgroundColor);\n    }\n\n    performPostUpdateFuncs(ecModel, api); // console.profile && console.profileEnd('update');\n  },\n\n  /**\n   * @param {Object} payload\n   * @private\n   */\n  updateTransform: function updateTransform(payload) {\n    var ecModel = this._model;\n    var ecIns = this;\n    var api = this._api; // update before setOption\n\n    if (!ecModel) {\n      return;\n    } // ChartView.markUpdateMethod(payload, 'updateTransform');\n\n\n    var componentDirtyList = [];\n    ecModel.eachComponent(function (componentType, componentModel) {\n      var componentView = ecIns.getViewOfComponentModel(componentModel);\n\n      if (componentView && componentView.__alive) {\n        if (componentView.updateTransform) {\n          var result = componentView.updateTransform(componentModel, ecModel, api, payload);\n          result && result.update && componentDirtyList.push(componentView);\n        } else {\n          componentDirtyList.push(componentView);\n        }\n      }\n    });\n    var seriesDirtyMap = zrUtil.createHashMap();\n    ecModel.eachSeries(function (seriesModel) {\n      var chartView = ecIns._chartsMap[seriesModel.__viewId];\n\n      if (chartView.updateTransform) {\n        var result = chartView.updateTransform(seriesModel, ecModel, api, payload);\n        result && result.update && seriesDirtyMap.set(seriesModel.uid, 1);\n      } else {\n        seriesDirtyMap.set(seriesModel.uid, 1);\n      }\n    });\n    clearColorPalette(ecModel); // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.\n    // this._scheduler.performVisualTasks(ecModel, payload, 'layout', true);\n\n    this._scheduler.performVisualTasks(ecModel, payload, {\n      setDirty: true,\n      dirtyMap: seriesDirtyMap\n    }); // Currently, not call render of components. Geo render cost a lot.\n    // renderComponents(ecIns, ecModel, api, payload, componentDirtyList);\n\n\n    renderSeries(ecIns, ecModel, api, payload, seriesDirtyMap);\n    performPostUpdateFuncs(ecModel, this._api);\n  },\n\n  /**\n   * @param {Object} payload\n   * @private\n   */\n  updateView: function updateView(payload) {\n    var ecModel = this._model; // update before setOption\n\n    if (!ecModel) {\n      return;\n    }\n\n    ChartView.markUpdateMethod(payload, 'updateView');\n    clearColorPalette(ecModel); // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.\n\n    this._scheduler.performVisualTasks(ecModel, payload, {\n      setDirty: true\n    });\n\n    render(this, this._model, this._api, payload);\n    performPostUpdateFuncs(ecModel, this._api);\n  },\n\n  /**\n   * @param {Object} payload\n   * @private\n   */\n  updateVisual: function updateVisual(payload) {\n    updateMethods.update.call(this, payload); // var ecModel = this._model;\n    // // update before setOption\n    // if (!ecModel) {\n    //     return;\n    // }\n    // ChartView.markUpdateMethod(payload, 'updateVisual');\n    // clearColorPalette(ecModel);\n    // // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.\n    // this._scheduler.performVisualTasks(ecModel, payload, {visualType: 'visual', setDirty: true});\n    // render(this, this._model, this._api, payload);\n    // performPostUpdateFuncs(ecModel, this._api);\n  },\n\n  /**\n   * @param {Object} payload\n   * @private\n   */\n  updateLayout: function updateLayout(payload) {\n    updateMethods.update.call(this, payload); // var ecModel = this._model;\n    // // update before setOption\n    // if (!ecModel) {\n    //     return;\n    // }\n    // ChartView.markUpdateMethod(payload, 'updateLayout');\n    // // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.\n    // // this._scheduler.performVisualTasks(ecModel, payload, 'layout', true);\n    // this._scheduler.performVisualTasks(ecModel, payload, {setDirty: true});\n    // render(this, this._model, this._api, payload);\n    // performPostUpdateFuncs(ecModel, this._api);\n  }\n};\n\nfunction prepare(ecIns) {\n  var ecModel = ecIns._model;\n  var scheduler = ecIns._scheduler;\n  scheduler.restorePipelines(ecModel);\n  scheduler.prepareStageTasks();\n  prepareView(ecIns, 'component', ecModel, scheduler);\n  prepareView(ecIns, 'chart', ecModel, scheduler);\n  scheduler.plan();\n}\n/**\n * @private\n */\n\n\nfunction updateDirectly(ecIns, method, payload, mainType, subType) {\n  var ecModel = ecIns._model; // broadcast\n\n  if (!mainType) {\n    // FIXME\n    // Chart will not be update directly here, except set dirty.\n    // But there is no such scenario now.\n    each(ecIns._componentsViews.concat(ecIns._chartsViews), callView);\n    return;\n  }\n\n  var query = {};\n  query[mainType + 'Id'] = payload[mainType + 'Id'];\n  query[mainType + 'Index'] = payload[mainType + 'Index'];\n  query[mainType + 'Name'] = payload[mainType + 'Name'];\n  var condition = {\n    mainType: mainType,\n    query: query\n  };\n  subType && (condition.subType = subType); // subType may be '' by parseClassType;\n\n  var excludeSeriesId = payload.excludeSeriesId;\n\n  if (excludeSeriesId != null) {\n    excludeSeriesId = zrUtil.createHashMap(modelUtil.normalizeToArray(excludeSeriesId));\n  } // If dispatchAction before setOption, do nothing.\n\n\n  ecModel && ecModel.eachComponent(condition, function (model) {\n    if (!excludeSeriesId || excludeSeriesId.get(model.id) == null) {\n      callView(ecIns[mainType === 'series' ? '_chartsMap' : '_componentsMap'][model.__viewId]);\n    }\n  }, ecIns);\n\n  function callView(view) {\n    view && view.__alive && view[method] && view[method](view.__model, ecModel, ecIns._api, payload);\n  }\n}\n/**\n * Resize the chart\n * @param {Object} opts\n * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)\n * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)\n * @param {boolean} [opts.silent=false]\n */\n\n\nechartsProto.resize = function (opts) {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  this._zr.resize(opts);\n\n  var ecModel = this._model; // Resize loading effect\n\n  this._loadingFX && this._loadingFX.resize();\n\n  if (!ecModel) {\n    return;\n  }\n\n  var optionChanged = ecModel.resetOption('media');\n  var silent = opts && opts.silent;\n  this[IN_MAIN_PROCESS] = true;\n  optionChanged && prepare(this);\n  updateMethods.update.call(this);\n  this[IN_MAIN_PROCESS] = false;\n  flushPendingActions.call(this, silent);\n  triggerUpdatedEvent.call(this, silent);\n};\n\nfunction updateStreamModes(ecIns, ecModel) {\n  var chartsMap = ecIns._chartsMap;\n  var scheduler = ecIns._scheduler;\n  ecModel.eachSeries(function (seriesModel) {\n    scheduler.updateStreamModes(seriesModel, chartsMap[seriesModel.__viewId]);\n  });\n}\n/**\n * Show loading effect\n * @param  {string} [name='default']\n * @param  {Object} [cfg]\n */\n\n\nechartsProto.showLoading = function (name, cfg) {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  if (isObject(name)) {\n    cfg = name;\n    name = '';\n  }\n\n  name = name || 'default';\n  this.hideLoading();\n\n  if (!loadingEffects[name]) {\n    return;\n  }\n\n  var el = loadingEffects[name](this._api, cfg);\n  var zr = this._zr;\n  this._loadingFX = el;\n  zr.add(el);\n};\n/**\n * Hide loading effect\n */\n\n\nechartsProto.hideLoading = function () {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  this._loadingFX && this._zr.remove(this._loadingFX);\n  this._loadingFX = null;\n};\n/**\n * @param {Object} eventObj\n * @return {Object}\n */\n\n\nechartsProto.makeActionFromEvent = function (eventObj) {\n  var payload = zrUtil.extend({}, eventObj);\n  payload.type = eventActionMap[eventObj.type];\n  return payload;\n};\n/**\n * @pubilc\n * @param {Object} payload\n * @param {string} [payload.type] Action type\n * @param {Object|boolean} [opt] If pass boolean, means opt.silent\n * @param {boolean} [opt.silent=false] Whether trigger events.\n * @param {boolean} [opt.flush=undefined]\n *                  true: Flush immediately, and then pixel in canvas can be fetched\n *                      immediately. Caution: it might affect performance.\n *                  false: Not flush.\n *                  undefined: Auto decide whether perform flush.\n */\n\n\nechartsProto.dispatchAction = function (payload, opt) {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  if (!isObject(opt)) {\n    opt = {\n      silent: !!opt\n    };\n  }\n\n  if (!actions[payload.type]) {\n    return;\n  } // Avoid dispatch action before setOption. Especially in `connect`.\n\n\n  if (!this._model) {\n    return;\n  } // May dispatchAction in rendering procedure\n\n\n  if (this[IN_MAIN_PROCESS]) {\n    this._pendingActions.push(payload);\n\n    return;\n  }\n\n  doDispatchAction.call(this, payload, opt.silent);\n\n  if (opt.flush) {\n    this._zr.flush(true);\n  } else if (opt.flush !== false && env.browser.weChat) {\n    // In WeChat embeded browser, `requestAnimationFrame` and `setInterval`\n    // hang when sliding page (on touch event), which cause that zr does not\n    // refresh util user interaction finished, which is not expected.\n    // But `dispatchAction` may be called too frequently when pan on touch\n    // screen, which impacts performance if do not throttle them.\n    this._throttledZrFlush();\n  }\n\n  flushPendingActions.call(this, opt.silent);\n  triggerUpdatedEvent.call(this, opt.silent);\n};\n\nfunction doDispatchAction(payload, silent) {\n  var payloadType = payload.type;\n  var escapeConnect = payload.escapeConnect;\n  var actionWrap = actions[payloadType];\n  var actionInfo = actionWrap.actionInfo;\n  var cptType = (actionInfo.update || 'update').split(':');\n  var updateMethod = cptType.pop();\n  cptType = cptType[0] != null && parseClassType(cptType[0]);\n  this[IN_MAIN_PROCESS] = true;\n  var payloads = [payload];\n  var batched = false; // Batch action\n\n  if (payload.batch) {\n    batched = true;\n    payloads = zrUtil.map(payload.batch, function (item) {\n      item = zrUtil.defaults(zrUtil.extend({}, item), payload);\n      item.batch = null;\n      return item;\n    });\n  }\n\n  var eventObjBatch = [];\n  var eventObj;\n  var isHighDown = payloadType === 'highlight' || payloadType === 'downplay';\n  each(payloads, function (batchItem) {\n    // Action can specify the event by return it.\n    eventObj = actionWrap.action(batchItem, this._model, this._api); // Emit event outside\n\n    eventObj = eventObj || zrUtil.extend({}, batchItem); // Convert type to eventType\n\n    eventObj.type = actionInfo.event || eventObj.type;\n    eventObjBatch.push(eventObj); // light update does not perform data process, layout and visual.\n\n    if (isHighDown) {\n      // method, payload, mainType, subType\n      updateDirectly(this, updateMethod, batchItem, 'series');\n    } else if (cptType) {\n      updateDirectly(this, updateMethod, batchItem, cptType.main, cptType.sub);\n    }\n  }, this);\n\n  if (updateMethod !== 'none' && !isHighDown && !cptType) {\n    // Still dirty\n    if (this[OPTION_UPDATED]) {\n      // FIXME Pass payload ?\n      prepare(this);\n      updateMethods.update.call(this, payload);\n      this[OPTION_UPDATED] = false;\n    } else {\n      updateMethods[updateMethod].call(this, payload);\n    }\n  } // Follow the rule of action batch\n\n\n  if (batched) {\n    eventObj = {\n      type: actionInfo.event || payloadType,\n      escapeConnect: escapeConnect,\n      batch: eventObjBatch\n    };\n  } else {\n    eventObj = eventObjBatch[0];\n  }\n\n  this[IN_MAIN_PROCESS] = false;\n  !silent && this._messageCenter.trigger(eventObj.type, eventObj);\n}\n\nfunction flushPendingActions(silent) {\n  var pendingActions = this._pendingActions;\n\n  while (pendingActions.length) {\n    var payload = pendingActions.shift();\n    doDispatchAction.call(this, payload, silent);\n  }\n}\n\nfunction triggerUpdatedEvent(silent) {\n  !silent && this.trigger('updated');\n}\n/**\n * Event `rendered` is triggered when zr\n * rendered. It is useful for realtime\n * snapshot (reflect animation).\n *\n * Event `finished` is triggered when:\n * (1) zrender rendering finished.\n * (2) initial animation finished.\n * (3) progressive rendering finished.\n * (4) no pending action.\n * (5) no delayed setOption needs to be processed.\n */\n\n\nfunction bindRenderedEvent(zr, ecIns) {\n  zr.on('rendered', function () {\n    ecIns.trigger('rendered'); // The `finished` event should not be triggered repeatly,\n    // so it should only be triggered when rendering indeed happend\n    // in zrender. (Consider the case that dipatchAction is keep\n    // triggering when mouse move).\n\n    if ( // Although zr is dirty if initial animation is not finished\n    // and this checking is called on frame, we also check\n    // animation finished for robustness.\n    zr.animation.isFinished() && !ecIns[OPTION_UPDATED] && !ecIns._scheduler.unfinished && !ecIns._pendingActions.length) {\n      ecIns.trigger('finished');\n    }\n  });\n}\n/**\n * @param {Object} params\n * @param {number} params.seriesIndex\n * @param {Array|TypedArray} params.data\n */\n\n\nechartsProto.appendData = function (params) {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  var seriesIndex = params.seriesIndex;\n  var ecModel = this.getModel();\n  var seriesModel = ecModel.getSeriesByIndex(seriesIndex);\n  seriesModel.appendData(params); // Note: `appendData` does not support that update extent of coordinate\n  // system, util some scenario require that. In the expected usage of\n  // `appendData`, the initial extent of coordinate system should better\n  // be fixed by axis `min`/`max` setting or initial data, otherwise if\n  // the extent changed while `appendData`, the location of the painted\n  // graphic elements have to be changed, which make the usage of\n  // `appendData` meaningless.\n\n  this._scheduler.unfinished = true;\n};\n/**\n * Register event\n * @method\n */\n\n\nechartsProto.on = createRegisterEventWithLowercaseName('on', false);\nechartsProto.off = createRegisterEventWithLowercaseName('off', false);\nechartsProto.one = createRegisterEventWithLowercaseName('one', false);\n/**\n * Prepare view instances of charts and components\n * @param  {module:echarts/model/Global} ecModel\n * @private\n */\n\nfunction prepareView(ecIns, type, ecModel, scheduler) {\n  var isComponent = type === 'component';\n  var viewList = isComponent ? ecIns._componentsViews : ecIns._chartsViews;\n  var viewMap = isComponent ? ecIns._componentsMap : ecIns._chartsMap;\n  var zr = ecIns._zr;\n  var api = ecIns._api;\n\n  for (var i = 0; i < viewList.length; i++) {\n    viewList[i].__alive = false;\n  }\n\n  isComponent ? ecModel.eachComponent(function (componentType, model) {\n    componentType !== 'series' && doPrepare(model);\n  }) : ecModel.eachSeries(doPrepare);\n\n  function doPrepare(model) {\n    // Consider: id same and type changed.\n    var viewId = '_ec_' + model.id + '_' + model.type;\n    var view = viewMap[viewId];\n\n    if (!view) {\n      var classType = parseClassType(model.type);\n      var Clazz = isComponent ? ComponentView.getClass(classType.main, classType.sub) : ChartView.getClass(classType.sub);\n      view = new Clazz();\n      view.init(ecModel, api);\n      viewMap[viewId] = view;\n      viewList.push(view);\n      zr.add(view.group);\n    }\n\n    model.__viewId = view.__id = viewId;\n    view.__alive = true;\n    view.__model = model;\n    view.group.__ecComponentInfo = {\n      mainType: model.mainType,\n      index: model.componentIndex\n    };\n    !isComponent && scheduler.prepareView(view, model, ecModel, api);\n  }\n\n  for (var i = 0; i < viewList.length;) {\n    var view = viewList[i];\n\n    if (!view.__alive) {\n      !isComponent && view.renderTask.dispose();\n      zr.remove(view.group);\n      view.dispose(ecModel, api);\n      viewList.splice(i, 1);\n      delete viewMap[view.__id];\n      view.__id = view.group.__ecComponentInfo = null;\n    } else {\n      i++;\n    }\n  }\n} // /**\n//  * Encode visual infomation from data after data processing\n//  *\n//  * @param {module:echarts/model/Global} ecModel\n//  * @param {object} layout\n//  * @param {boolean} [layoutFilter] `true`: only layout,\n//  *                                 `false`: only not layout,\n//  *                                 `null`/`undefined`: all.\n//  * @param {string} taskBaseTag\n//  * @private\n//  */\n// function startVisualEncoding(ecIns, ecModel, api, payload, layoutFilter) {\n//     each(visualFuncs, function (visual, index) {\n//         var isLayout = visual.isLayout;\n//         if (layoutFilter == null\n//             || (layoutFilter === false && !isLayout)\n//             || (layoutFilter === true && isLayout)\n//         ) {\n//             visual.func(ecModel, api, payload);\n//         }\n//     });\n// }\n\n\nfunction clearColorPalette(ecModel) {\n  ecModel.clearColorPalette();\n  ecModel.eachSeries(function (seriesModel) {\n    seriesModel.clearColorPalette();\n  });\n}\n\nfunction render(ecIns, ecModel, api, payload) {\n  renderComponents(ecIns, ecModel, api, payload);\n  each(ecIns._chartsViews, function (chart) {\n    chart.__alive = false;\n  });\n  renderSeries(ecIns, ecModel, api, payload); // Remove groups of unrendered charts\n\n  each(ecIns._chartsViews, function (chart) {\n    if (!chart.__alive) {\n      chart.remove(ecModel, api);\n    }\n  });\n}\n\nfunction renderComponents(ecIns, ecModel, api, payload, dirtyList) {\n  each(dirtyList || ecIns._componentsViews, function (componentView) {\n    var componentModel = componentView.__model;\n    componentView.render(componentModel, ecModel, api, payload);\n    updateZ(componentModel, componentView);\n  });\n}\n/**\n * Render each chart and component\n * @private\n */\n\n\nfunction renderSeries(ecIns, ecModel, api, payload, dirtyMap) {\n  // Render all charts\n  var scheduler = ecIns._scheduler;\n  var unfinished;\n  ecModel.eachSeries(function (seriesModel) {\n    var chartView = ecIns._chartsMap[seriesModel.__viewId];\n    chartView.__alive = true;\n    var renderTask = chartView.renderTask;\n    scheduler.updatePayload(renderTask, payload);\n\n    if (dirtyMap && dirtyMap.get(seriesModel.uid)) {\n      renderTask.dirty();\n    }\n\n    unfinished |= renderTask.perform(scheduler.getPerformArgs(renderTask));\n    chartView.group.silent = !!seriesModel.get('silent');\n    updateZ(seriesModel, chartView);\n    updateBlend(seriesModel, chartView);\n  });\n  scheduler.unfinished |= unfinished; // If use hover layer\n\n  updateHoverLayerStatus(ecIns, ecModel); // Add aria\n\n  aria(ecIns._zr.dom, ecModel);\n}\n\nfunction performPostUpdateFuncs(ecModel, api) {\n  each(postUpdateFuncs, function (func) {\n    func(ecModel, api);\n  });\n}\n\nvar MOUSE_EVENT_NAMES = ['click', 'dblclick', 'mouseover', 'mouseout', 'mousemove', 'mousedown', 'mouseup', 'globalout', 'contextmenu'];\n/**\n * @private\n */\n\nechartsProto._initEvents = function () {\n  each(MOUSE_EVENT_NAMES, function (eveName) {\n    var handler = function handler(e) {\n      var ecModel = this.getModel();\n      var el = e.target;\n      var params;\n      var isGlobalOut = eveName === 'globalout'; // no e.target when 'globalout'.\n\n      if (isGlobalOut) {\n        params = {};\n      } else if (el && el.dataIndex != null) {\n        var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);\n        params = dataModel && dataModel.getDataParams(el.dataIndex, el.dataType, el) || {};\n      } // If element has custom eventData of components\n      else if (el && el.eventData) {\n          params = zrUtil.extend({}, el.eventData);\n        } // Contract: if params prepared in mouse event,\n      // these properties must be specified:\n      // {\n      //    componentType: string (component main type)\n      //    componentIndex: number\n      // }\n      // Otherwise event query can not work.\n\n\n      if (params) {\n        var componentType = params.componentType;\n        var componentIndex = params.componentIndex; // Special handling for historic reason: when trigger by\n        // markLine/markPoint/markArea, the componentType is\n        // 'markLine'/'markPoint'/'markArea', but we should better\n        // enable them to be queried by seriesIndex, since their\n        // option is set in each series.\n\n        if (componentType === 'markLine' || componentType === 'markPoint' || componentType === 'markArea') {\n          componentType = 'series';\n          componentIndex = params.seriesIndex;\n        }\n\n        var model = componentType && componentIndex != null && ecModel.getComponent(componentType, componentIndex);\n        var view = model && this[model.mainType === 'series' ? '_chartsMap' : '_componentsMap'][model.__viewId];\n        params.event = e;\n        params.type = eveName;\n        this._ecEventProcessor.eventInfo = {\n          targetEl: el,\n          packedEvent: params,\n          model: model,\n          view: view\n        };\n        this.trigger(eveName, params);\n      }\n    }; // Consider that some component (like tooltip, brush, ...)\n    // register zr event handler, but user event handler might\n    // do anything, such as call `setOption` or `dispatchAction`,\n    // which probably update any of the content and probably\n    // cause problem if it is called previous other inner handlers.\n\n\n    handler.zrEventfulCallAtLast = true;\n\n    this._zr.on(eveName, handler, this);\n  }, this);\n  each(eventActionMap, function (actionType, eventType) {\n    this._messageCenter.on(eventType, function (event) {\n      this.trigger(eventType, event);\n    }, this);\n  }, this);\n};\n/**\n * @return {boolean}\n */\n\n\nechartsProto.isDisposed = function () {\n  return this._disposed;\n};\n/**\n * Clear\n */\n\n\nechartsProto.clear = function () {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  this.setOption({\n    series: []\n  }, true);\n};\n/**\n * Dispose instance\n */\n\n\nechartsProto.dispose = function () {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  this._disposed = true;\n  modelUtil.setAttribute(this.getDom(), DOM_ATTRIBUTE_KEY, '');\n  var api = this._api;\n  var ecModel = this._model;\n  each(this._componentsViews, function (component) {\n    component.dispose(ecModel, api);\n  });\n  each(this._chartsViews, function (chart) {\n    chart.dispose(ecModel, api);\n  }); // Dispose after all views disposed\n\n  this._zr.dispose();\n\n  delete instances[this.id];\n};\n\nzrUtil.mixin(ECharts, Eventful);\n\nfunction disposedWarning(id) {}\n\nfunction updateHoverLayerStatus(ecIns, ecModel) {\n  var zr = ecIns._zr;\n  var storage = zr.storage;\n  var elCount = 0;\n  storage.traverse(function (el) {\n    elCount++;\n  });\n\n  if (elCount > ecModel.get('hoverLayerThreshold') && !env.node) {\n    ecModel.eachSeries(function (seriesModel) {\n      if (seriesModel.preventUsingHoverLayer) {\n        return;\n      }\n\n      var chartView = ecIns._chartsMap[seriesModel.__viewId];\n\n      if (chartView.__alive) {\n        chartView.group.traverse(function (el) {\n          // Don't switch back.\n          el.useHoverLayer = true;\n        });\n      }\n    });\n  }\n}\n/**\n * Update chart progressive and blend.\n * @param {module:echarts/model/Series|module:echarts/model/Component} model\n * @param {module:echarts/view/Component|module:echarts/view/Chart} view\n */\n\n\nfunction updateBlend(seriesModel, chartView) {\n  var blendMode = seriesModel.get('blendMode') || null;\n  chartView.group.traverse(function (el) {\n    // FIXME marker and other components\n    if (!el.isGroup) {\n      // Only set if blendMode is changed. In case element is incremental and don't wan't to rerender.\n      if (el.style.blend !== blendMode) {\n        el.setStyle('blend', blendMode);\n      }\n    }\n\n    if (el.eachPendingDisplayable) {\n      el.eachPendingDisplayable(function (displayable) {\n        displayable.setStyle('blend', blendMode);\n      });\n    }\n  });\n}\n/**\n * @param {module:echarts/model/Series|module:echarts/model/Component} model\n * @param {module:echarts/view/Component|module:echarts/view/Chart} view\n */\n\n\nfunction updateZ(model, view) {\n  var z = model.get('z');\n  var zlevel = model.get('zlevel'); // Set z and zlevel\n\n  view.group.traverse(function (el) {\n    if (el.type !== 'group') {\n      z != null && (el.z = z);\n      zlevel != null && (el.zlevel = zlevel);\n    }\n  });\n}\n\nfunction createExtensionAPI(ecInstance) {\n  var coordSysMgr = ecInstance._coordSysMgr;\n  return zrUtil.extend(new ExtensionAPI(ecInstance), {\n    // Inject methods\n    getCoordinateSystems: zrUtil.bind(coordSysMgr.getCoordinateSystems, coordSysMgr),\n    getComponentByElement: function getComponentByElement(el) {\n      while (el) {\n        var modelInfo = el.__ecComponentInfo;\n\n        if (modelInfo != null) {\n          return ecInstance._model.getComponent(modelInfo.mainType, modelInfo.index);\n        }\n\n        el = el.parent;\n      }\n    }\n  });\n}\n/**\n * @class\n * Usage of query:\n * `chart.on('click', query, handler);`\n * The `query` can be:\n * + The component type query string, only `mainType` or `mainType.subType`,\n *   like: 'xAxis', 'series', 'xAxis.category' or 'series.line'.\n * + The component query object, like:\n *   `{seriesIndex: 2}`, `{seriesName: 'xx'}`, `{seriesId: 'some'}`,\n *   `{xAxisIndex: 2}`, `{xAxisName: 'xx'}`, `{xAxisId: 'some'}`.\n * + The data query object, like:\n *   `{dataIndex: 123}`, `{dataType: 'link'}`, `{name: 'some'}`.\n * + The other query object (cmponent customized query), like:\n *   `{element: 'some'}` (only available in custom series).\n *\n * Caveat: If a prop in the `query` object is `null/undefined`, it is the\n * same as there is no such prop in the `query` object.\n */\n\n\nfunction EventProcessor() {\n  // These info required: targetEl, packedEvent, model, view\n  this.eventInfo;\n}\n\nEventProcessor.prototype = {\n  constructor: EventProcessor,\n  normalizeQuery: function normalizeQuery(query) {\n    var cptQuery = {};\n    var dataQuery = {};\n    var otherQuery = {}; // `query` is `mainType` or `mainType.subType` of component.\n\n    if (zrUtil.isString(query)) {\n      var condCptType = parseClassType(query); // `.main` and `.sub` may be ''.\n\n      cptQuery.mainType = condCptType.main || null;\n      cptQuery.subType = condCptType.sub || null;\n    } // `query` is an object, convert to {mainType, index, name, id}.\n    else {\n        // `xxxIndex`, `xxxName`, `xxxId`, `name`, `dataIndex`, `dataType` is reserved,\n        // can not be used in `compomentModel.filterForExposedEvent`.\n        var suffixes = ['Index', 'Name', 'Id'];\n        var dataKeys = {\n          name: 1,\n          dataIndex: 1,\n          dataType: 1\n        };\n        zrUtil.each(query, function (val, key) {\n          var reserved = false;\n\n          for (var i = 0; i < suffixes.length; i++) {\n            var propSuffix = suffixes[i];\n            var suffixPos = key.lastIndexOf(propSuffix);\n\n            if (suffixPos > 0 && suffixPos === key.length - propSuffix.length) {\n              var mainType = key.slice(0, suffixPos); // Consider `dataIndex`.\n\n              if (mainType !== 'data') {\n                cptQuery.mainType = mainType;\n                cptQuery[propSuffix.toLowerCase()] = val;\n                reserved = true;\n              }\n            }\n          }\n\n          if (dataKeys.hasOwnProperty(key)) {\n            dataQuery[key] = val;\n            reserved = true;\n          }\n\n          if (!reserved) {\n            otherQuery[key] = val;\n          }\n        });\n      }\n\n    return {\n      cptQuery: cptQuery,\n      dataQuery: dataQuery,\n      otherQuery: otherQuery\n    };\n  },\n  filter: function filter(eventType, query, args) {\n    // They should be assigned before each trigger call.\n    var eventInfo = this.eventInfo;\n\n    if (!eventInfo) {\n      return true;\n    }\n\n    var targetEl = eventInfo.targetEl;\n    var packedEvent = eventInfo.packedEvent;\n    var model = eventInfo.model;\n    var view = eventInfo.view; // For event like 'globalout'.\n\n    if (!model || !view) {\n      return true;\n    }\n\n    var cptQuery = query.cptQuery;\n    var dataQuery = query.dataQuery;\n    return check(cptQuery, model, 'mainType') && check(cptQuery, model, 'subType') && check(cptQuery, model, 'index', 'componentIndex') && check(cptQuery, model, 'name') && check(cptQuery, model, 'id') && check(dataQuery, packedEvent, 'name') && check(dataQuery, packedEvent, 'dataIndex') && check(dataQuery, packedEvent, 'dataType') && (!view.filterForExposedEvent || view.filterForExposedEvent(eventType, query.otherQuery, targetEl, packedEvent));\n\n    function check(query, host, prop, propOnHost) {\n      return query[prop] == null || host[propOnHost || prop] === query[prop];\n    }\n  },\n  afterTrigger: function afterTrigger() {\n    // Make sure the eventInfo wont be used in next trigger.\n    this.eventInfo = null;\n  }\n};\n/**\n * @type {Object} key: actionType.\n * @inner\n */\n\nvar actions = {};\n/**\n * Map eventType to actionType\n * @type {Object}\n */\n\nvar eventActionMap = {};\n/**\n * Data processor functions of each stage\n * @type {Array.<Object.<string, Function>>}\n * @inner\n */\n\nvar dataProcessorFuncs = [];\n/**\n * @type {Array.<Function>}\n * @inner\n */\n\nvar optionPreprocessorFuncs = [];\n/**\n * @type {Array.<Function>}\n * @inner\n */\n\nvar postUpdateFuncs = [];\n/**\n * Visual encoding functions of each stage\n * @type {Array.<Object.<string, Function>>}\n */\n\nvar visualFuncs = [];\n/**\n * Theme storage\n * @type {Object.<key, Object>}\n */\n\nvar themeStorage = {};\n/**\n * Loading effects\n */\n\nvar loadingEffects = {};\nvar instances = {};\nvar connectedGroups = {};\nvar idBase = new Date() - 0;\nvar groupIdBase = new Date() - 0;\nvar DOM_ATTRIBUTE_KEY = '_echarts_instance_';\n\nfunction enableConnect(chart) {\n  var STATUS_PENDING = 0;\n  var STATUS_UPDATING = 1;\n  var STATUS_UPDATED = 2;\n  var STATUS_KEY = '__connectUpdateStatus';\n\n  function updateConnectedChartsStatus(charts, status) {\n    for (var i = 0; i < charts.length; i++) {\n      var otherChart = charts[i];\n      otherChart[STATUS_KEY] = status;\n    }\n  }\n\n  each(eventActionMap, function (actionType, eventType) {\n    chart._messageCenter.on(eventType, function (event) {\n      if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {\n        if (event && event.escapeConnect) {\n          return;\n        }\n\n        var action = chart.makeActionFromEvent(event);\n        var otherCharts = [];\n        each(instances, function (otherChart) {\n          if (otherChart !== chart && otherChart.group === chart.group) {\n            otherCharts.push(otherChart);\n          }\n        });\n        updateConnectedChartsStatus(otherCharts, STATUS_PENDING);\n        each(otherCharts, function (otherChart) {\n          if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {\n            otherChart.dispatchAction(action);\n          }\n        });\n        updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);\n      }\n    });\n  });\n}\n/**\n * @param {HTMLElement} dom\n * @param {Object} [theme]\n * @param {Object} opts\n * @param {number} [opts.devicePixelRatio] Use window.devicePixelRatio by default\n * @param {string} [opts.renderer] Can choose 'canvas' or 'svg' to render the chart.\n * @param {number} [opts.width] Use clientWidth of the input `dom` by default.\n *                              Can be 'auto' (the same as null/undefined)\n * @param {number} [opts.height] Use clientHeight of the input `dom` by default.\n *                               Can be 'auto' (the same as null/undefined)\n */\n\n\nfunction init(dom, theme, opts) {\n  var existInstance = getInstanceByDom(dom);\n\n  if (existInstance) {\n    return existInstance;\n  }\n\n  var chart = new ECharts(dom, theme, opts);\n  chart.id = 'ec_' + idBase++;\n  instances[chart.id] = chart;\n  modelUtil.setAttribute(dom, DOM_ATTRIBUTE_KEY, chart.id);\n  enableConnect(chart);\n  return chart;\n}\n/**\n * @return {string|Array.<module:echarts~ECharts>} groupId\n */\n\n\nfunction connect(groupId) {\n  // Is array of charts\n  if (zrUtil.isArray(groupId)) {\n    var charts = groupId;\n    groupId = null; // If any chart has group\n\n    each(charts, function (chart) {\n      if (chart.group != null) {\n        groupId = chart.group;\n      }\n    });\n    groupId = groupId || 'g_' + groupIdBase++;\n    each(charts, function (chart) {\n      chart.group = groupId;\n    });\n  }\n\n  connectedGroups[groupId] = true;\n  return groupId;\n}\n/**\n * @DEPRECATED\n * @return {string} groupId\n */\n\n\nfunction disConnect(groupId) {\n  connectedGroups[groupId] = false;\n}\n/**\n * @return {string} groupId\n */\n\n\nvar disconnect = disConnect;\n/**\n * Dispose a chart instance\n * @param  {module:echarts~ECharts|HTMLDomElement|string} chart\n */\n\nfunction dispose(chart) {\n  if (typeof chart === 'string') {\n    chart = instances[chart];\n  } else if (!(chart instanceof ECharts)) {\n    // Try to treat as dom\n    chart = getInstanceByDom(chart);\n  }\n\n  if (chart instanceof ECharts && !chart.isDisposed()) {\n    chart.dispose();\n  }\n}\n/**\n * @param  {HTMLElement} dom\n * @return {echarts~ECharts}\n */\n\n\nfunction getInstanceByDom(dom) {\n  return instances[modelUtil.getAttribute(dom, DOM_ATTRIBUTE_KEY)];\n}\n/**\n * @param {string} key\n * @return {echarts~ECharts}\n */\n\n\nfunction getInstanceById(key) {\n  return instances[key];\n}\n/**\n * Register theme\n */\n\n\nfunction registerTheme(name, theme) {\n  themeStorage[name] = theme;\n}\n/**\n * Register option preprocessor\n * @param {Function} preprocessorFunc\n */\n\n\nfunction registerPreprocessor(preprocessorFunc) {\n  optionPreprocessorFuncs.push(preprocessorFunc);\n}\n/**\n * @param {number} [priority=1000]\n * @param {Object|Function} processor\n */\n\n\nfunction registerProcessor(priority, processor) {\n  normalizeRegister(dataProcessorFuncs, priority, processor, PRIORITY_PROCESSOR_FILTER);\n}\n/**\n * Register postUpdater\n * @param {Function} postUpdateFunc\n */\n\n\nfunction registerPostUpdate(postUpdateFunc) {\n  postUpdateFuncs.push(postUpdateFunc);\n}\n/**\n * Usage:\n * registerAction('someAction', 'someEvent', function () { ... });\n * registerAction('someAction', function () { ... });\n * registerAction(\n *     {type: 'someAction', event: 'someEvent', update: 'updateView'},\n *     function () { ... }\n * );\n *\n * @param {(string|Object)} actionInfo\n * @param {string} actionInfo.type\n * @param {string} [actionInfo.event]\n * @param {string} [actionInfo.update]\n * @param {string} [eventName]\n * @param {Function} action\n */\n\n\nfunction registerAction(actionInfo, eventName, action) {\n  if (typeof eventName === 'function') {\n    action = eventName;\n    eventName = '';\n  }\n\n  var actionType = isObject(actionInfo) ? actionInfo.type : [actionInfo, actionInfo = {\n    event: eventName\n  }][0]; // Event name is all lowercase\n\n  actionInfo.event = (actionInfo.event || actionType).toLowerCase();\n  eventName = actionInfo.event; // Validate action type and event name.\n\n  assert(ACTION_REG.test(actionType) && ACTION_REG.test(eventName));\n\n  if (!actions[actionType]) {\n    actions[actionType] = {\n      action: action,\n      actionInfo: actionInfo\n    };\n  }\n\n  eventActionMap[eventName] = actionType;\n}\n/**\n * @param {string} type\n * @param {*} CoordinateSystem\n */\n\n\nfunction registerCoordinateSystem(type, CoordinateSystem) {\n  CoordinateSystemManager.register(type, CoordinateSystem);\n}\n/**\n * Get dimensions of specified coordinate system.\n * @param {string} type\n * @return {Array.<string|Object>}\n */\n\n\nfunction getCoordinateSystemDimensions(type) {\n  var coordSysCreator = CoordinateSystemManager.get(type);\n\n  if (coordSysCreator) {\n    return coordSysCreator.getDimensionsInfo ? coordSysCreator.getDimensionsInfo() : coordSysCreator.dimensions.slice();\n  }\n}\n/**\n * Layout is a special stage of visual encoding\n * Most visual encoding like color are common for different chart\n * But each chart has it's own layout algorithm\n *\n * @param {number} [priority=1000]\n * @param {Function} layoutTask\n */\n\n\nfunction registerLayout(priority, layoutTask) {\n  normalizeRegister(visualFuncs, priority, layoutTask, PRIORITY_VISUAL_LAYOUT, 'layout');\n}\n/**\n * @param {number} [priority=3000]\n * @param {module:echarts/stream/Task} visualTask\n */\n\n\nfunction registerVisual(priority, visualTask) {\n  normalizeRegister(visualFuncs, priority, visualTask, PRIORITY_VISUAL_CHART, 'visual');\n}\n/**\n * @param {Object|Function} fn: {seriesType, createOnAllSeries, performRawSeries, reset}\n */\n\n\nfunction normalizeRegister(targetList, priority, fn, defaultPriority, visualType) {\n  if (isFunction(priority) || isObject(priority)) {\n    fn = priority;\n    priority = defaultPriority;\n  }\n\n  var stageHandler = Scheduler.wrapStageHandler(fn, visualType);\n  stageHandler.__prio = priority;\n  stageHandler.__raw = fn;\n  targetList.push(stageHandler);\n  return stageHandler;\n}\n/**\n * @param {string} name\n */\n\n\nfunction registerLoading(name, loadingFx) {\n  loadingEffects[name] = loadingFx;\n}\n/**\n * @param {Object} opts\n * @param {string} [superClass]\n */\n\n\nfunction extendComponentModel(opts\n/*, superClass*/\n) {\n  // var Clazz = ComponentModel;\n  // if (superClass) {\n  //     var classType = parseClassType(superClass);\n  //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\n  // }\n  return ComponentModel.extend(opts);\n}\n/**\n * @param {Object} opts\n * @param {string} [superClass]\n */\n\n\nfunction extendComponentView(opts\n/*, superClass*/\n) {\n  // var Clazz = ComponentView;\n  // if (superClass) {\n  //     var classType = parseClassType(superClass);\n  //     Clazz = ComponentView.getClass(classType.main, classType.sub, true);\n  // }\n  return ComponentView.extend(opts);\n}\n/**\n * @param {Object} opts\n * @param {string} [superClass]\n */\n\n\nfunction extendSeriesModel(opts\n/*, superClass*/\n) {\n  // var Clazz = SeriesModel;\n  // if (superClass) {\n  //     superClass = 'series.' + superClass.replace('series.', '');\n  //     var classType = parseClassType(superClass);\n  //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\n  // }\n  return SeriesModel.extend(opts);\n}\n/**\n * @param {Object} opts\n * @param {string} [superClass]\n */\n\n\nfunction extendChartView(opts\n/*, superClass*/\n) {\n  // var Clazz = ChartView;\n  // if (superClass) {\n  //     superClass = superClass.replace('series.', '');\n  //     var classType = parseClassType(superClass);\n  //     Clazz = ChartView.getClass(classType.main, true);\n  // }\n  return ChartView.extend(opts);\n}\n/**\n * ZRender need a canvas context to do measureText.\n * But in node environment canvas may be created by node-canvas.\n * So we need to specify how to create a canvas instead of using document.createElement('canvas')\n *\n * Be careful of using it in the browser.\n *\n * @param {Function} creator\n * @example\n *     var Canvas = require('canvas');\n *     var echarts = require('echarts');\n *     echarts.setCanvasCreator(function () {\n *         // Small size is enough.\n *         return new Canvas(32, 32);\n *     });\n */\n\n\nfunction setCanvasCreator(creator) {\n  zrUtil.$override('createCanvas', creator);\n}\n/**\n * @param {string} mapName\n * @param {Array.<Object>|Object|string} geoJson\n * @param {Object} [specialAreas]\n *\n * @example GeoJSON\n *     $.get('USA.json', function (geoJson) {\n *         echarts.registerMap('USA', geoJson);\n *         // Or\n *         echarts.registerMap('USA', {\n *             geoJson: geoJson,\n *             specialAreas: {}\n *         })\n *     });\n *\n *     $.get('airport.svg', function (svg) {\n *         echarts.registerMap('airport', {\n *             svg: svg\n *         }\n *     });\n *\n *     echarts.registerMap('eu', [\n *         {svg: eu-topographic.svg},\n *         {geoJSON: eu.json}\n *     ])\n */\n\n\nfunction registerMap(mapName, geoJson, specialAreas) {\n  mapDataStorage.registerMap(mapName, geoJson, specialAreas);\n}\n/**\n * @param {string} mapName\n * @return {Object}\n */\n\n\nfunction getMap(mapName) {\n  // For backward compatibility, only return the first one.\n  var records = mapDataStorage.retrieveMap(mapName);\n  return records && records[0] && {\n    geoJson: records[0].geoJSON,\n    specialAreas: records[0].specialAreas\n  };\n}\n\nregisterVisual(PRIORITY_VISUAL_GLOBAL, seriesColor);\nregisterPreprocessor(backwardCompat);\nregisterProcessor(PRIORITY_PROCESSOR_DATASTACK, dataStack);\nregisterLoading('default', loadingDefault); // Default actions\n\nregisterAction({\n  type: 'highlight',\n  event: 'highlight',\n  update: 'highlight'\n}, zrUtil.noop);\nregisterAction({\n  type: 'downplay',\n  event: 'downplay',\n  update: 'downplay'\n}, zrUtil.noop); // Default theme\n\nregisterTheme('light', lightTheme);\nregisterTheme('dark', darkTheme); // For backward compatibility, where the namespace `dataTool` will\n// be mounted on `echarts` is the extension `dataTool` is imported.\n\nvar dataTool = {};\nexports.version = version;\nexports.dependencies = dependencies;\nexports.PRIORITY = PRIORITY;\nexports.init = init;\nexports.connect = connect;\nexports.disConnect = disConnect;\nexports.disconnect = disconnect;\nexports.dispose = dispose;\nexports.getInstanceByDom = getInstanceByDom;\nexports.getInstanceById = getInstanceById;\nexports.registerTheme = registerTheme;\nexports.registerPreprocessor = registerPreprocessor;\nexports.registerProcessor = registerProcessor;\nexports.registerPostUpdate = registerPostUpdate;\nexports.registerAction = registerAction;\nexports.registerCoordinateSystem = registerCoordinateSystem;\nexports.getCoordinateSystemDimensions = getCoordinateSystemDimensions;\nexports.registerLayout = registerLayout;\nexports.registerVisual = registerVisual;\nexports.registerLoading = registerLoading;\nexports.extendComponentModel = extendComponentModel;\nexports.extendComponentView = extendComponentView;\nexports.extendSeriesModel = extendSeriesModel;\nexports.extendChartView = extendChartView;\nexports.setCanvasCreator = setCanvasCreator;\nexports.registerMap = registerMap;\nexports.getMap = getMap;\nexports.dataTool = dataTool;\n\nvar ___ec_export = require(\"./export\");\n\n(function () {\n  for (var key in ___ec_export) {\n    if (___ec_export.hasOwnProperty(key)) {\n      exports[key] = ___ec_export[key];\n    }\n  }\n})();","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/echarts.js"],"names":["_config","require","__DEV__","zrender","zrUtil","colorTool","env","timsort","Eventful","GlobalModel","ExtensionAPI","CoordinateSystemManager","OptionManager","backwardCompat","dataStack","ComponentModel","SeriesModel","ComponentView","ChartView","graphic","modelUtil","_throttle","throttle","seriesColor","aria","loadingDefault","Scheduler","lightTheme","darkTheme","mapDataStorage","assert","each","isFunction","isObject","parseClassType","version","dependencies","TEST_FRAME_REMAIN_TIME","PRIORITY_PROCESSOR_FILTER","PRIORITY_PROCESSOR_SERIES_FILTER","PRIORITY_PROCESSOR_DATASTACK","PRIORITY_PROCESSOR_STATISTIC","PRIORITY_VISUAL_LAYOUT","PRIORITY_VISUAL_PROGRESSIVE_LAYOUT","PRIORITY_VISUAL_GLOBAL","PRIORITY_VISUAL_CHART","PRIORITY_VISUAL_POST_CHART_LAYOUT","PRIORITY_VISUAL_COMPONENT","PRIORITY_VISUAL_BRUSH","PRIORITY","PROCESSOR","FILTER","SERIES_FILTER","STATISTIC","VISUAL","LAYOUT","PROGRESSIVE_LAYOUT","GLOBAL","CHART","POST_CHART_LAYOUT","COMPONENT","BRUSH","IN_MAIN_PROCESS","OPTION_UPDATED","ACTION_REG","createRegisterEventWithLowercaseName","method","ignoreDisposed","eventName","handler","context","_disposed","disposedWarning","id","toLowerCase","prototype","call","MessageCenter","on","off","one","mixin","ECharts","dom","theme","opts","themeStorage","group","_dom","defaultRenderer","zr","_zr","init","renderer","devicePixelRatio","width","height","_throttledZrFlush","bind","flush","clone","_theme","_chartsViews","_chartsMap","_componentsViews","_componentsMap","_coordSysMgr","api","_api","createExtensionAPI","prioritySortFunc","a","b","__prio","visualFuncs","dataProcessorFuncs","_scheduler","_ecEventProcessor","EventProcessor","_messageCenter","_initEvents","resize","_pendingActions","animation","_onframe","bindRenderedEvent","setAsPrimitive","echartsProto","scheduler","silent","prepare","updateMethods","update","flushPendingActions","triggerUpdatedEvent","unfinished","remainTime","ecModel","_model","startTime","Date","performSeriesTasks","performDataProcessorTasks","updateStreamModes","performVisualTasks","renderSeries","getDom","getZr","setOption","option","notMerge","lazyUpdate","optionManager","optionPreprocessorFuncs","setTheme","console","error","getModel","getOption","getWidth","getHeight","getDevicePixelRatio","painter","dpr","window","getRenderedCanvas","canvasSupported","pixelRatio","backgroundColor","get","getSvgDataURL","svgSupported","list","storage","getDisplayList","el","stopAnimation","toDataURL","getDataURL","excludeComponents","excludesComponentViews","self","componentType","eachComponent","mainType","component","view","__viewId","ignore","push","url","getType","type","getConnectedDataURL","isSvg","groupId","mathMin","Math","min","mathMax","max","MAX_NUMBER","Infinity","connectedGroups","left","top","right","bottom","canvasList","instances","chart","canvas","getSvgDom","innerHTML","boundingRect","getBoundingClientRect","targetCanvas","createCanvas","content","item","x","y","getSvgRoot","connectedBackgroundColor","setBackgroundColor","refreshImmediately","add","Rect","shape","style","fill","img","Image","image","convertToPixel","curry","doConvertPixel","convertFromPixel","methodName","finder","value","coordSysList","getCoordinateSystems","result","parseFinder","i","length","coordSys","containPixel","models","key","indexOf","model","coordinateSystem","containPoint","getVisual","visualType","defaultMainType","seriesModel","data","getData","dataIndexInside","hasOwnProperty","indexOfRawIndex","dataIndex","getItemVisual","getViewOfComponentModel","componentModel","getViewOfSeriesModel","prepareAndUpdate","payload","coordSysMgr","restoreData","create","clearColorPalette","render","colorArr","parse","stringify","performPostUpdateFuncs","updateTransform","ecIns","componentDirtyList","componentView","__alive","seriesDirtyMap","createHashMap","eachSeries","chartView","set","uid","setDirty","dirtyMap","updateView","markUpdateMethod","updateVisual","updateLayout","restorePipelines","prepareStageTasks","prepareView","plan","updateDirectly","subType","concat","callView","query","condition","excludeSeriesId","normalizeToArray","__model","_loadingFX","optionChanged","resetOption","chartsMap","showLoading","name","cfg","hideLoading","loadingEffects","remove","makeActionFromEvent","eventObj","extend","eventActionMap","dispatchAction","opt","actions","doDispatchAction","browser","weChat","payloadType","escapeConnect","actionWrap","actionInfo","cptType","split","updateMethod","pop","payloads","batched","batch","map","defaults","eventObjBatch","isHighDown","batchItem","action","event","main","sub","trigger","pendingActions","shift","isFinished","appendData","params","seriesIndex","getSeriesByIndex","isComponent","viewList","viewMap","doPrepare","viewId","classType","Clazz","getClass","__id","__ecComponentInfo","index","componentIndex","renderTask","dispose","splice","renderComponents","dirtyList","updateZ","updatePayload","dirty","perform","getPerformArgs","updateBlend","updateHoverLayerStatus","postUpdateFuncs","func","MOUSE_EVENT_NAMES","eveName","e","target","isGlobalOut","dataModel","getDataParams","dataType","eventData","getComponent","eventInfo","targetEl","packedEvent","zrEventfulCallAtLast","actionType","eventType","isDisposed","clear","series","setAttribute","DOM_ATTRIBUTE_KEY","elCount","traverse","node","preventUsingHoverLayer","useHoverLayer","blendMode","isGroup","blend","setStyle","eachPendingDisplayable","displayable","z","zlevel","ecInstance","getComponentByElement","modelInfo","parent","constructor","normalizeQuery","cptQuery","dataQuery","otherQuery","isString","condCptType","suffixes","dataKeys","val","reserved","propSuffix","suffixPos","lastIndexOf","slice","filter","args","check","filterForExposedEvent","host","prop","propOnHost","afterTrigger","idBase","groupIdBase","enableConnect","STATUS_PENDING","STATUS_UPDATING","STATUS_UPDATED","STATUS_KEY","updateConnectedChartsStatus","charts","status","otherChart","otherCharts","existInstance","getInstanceByDom","connect","isArray","disConnect","disconnect","getAttribute","getInstanceById","registerTheme","registerPreprocessor","preprocessorFunc","registerProcessor","priority","processor","normalizeRegister","registerPostUpdate","postUpdateFunc","registerAction","test","registerCoordinateSystem","CoordinateSystem","register","getCoordinateSystemDimensions","coordSysCreator","getDimensionsInfo","dimensions","registerLayout","layoutTask","registerVisual","visualTask","targetList","fn","defaultPriority","stageHandler","wrapStageHandler","__raw","registerLoading","loadingFx","extendComponentModel","extendComponentView","extendSeriesModel","extendChartView","setCanvasCreator","creator","$override","registerMap","mapName","geoJson","specialAreas","getMap","records","retrieveMap","geoJSON","noop","dataTool","exports","___ec_export"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _config = require(\"./config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar zrender = require(\"zrender/lib/zrender\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar colorTool = require(\"zrender/lib/tool/color\");\n\nvar env = require(\"zrender/lib/core/env\");\n\nvar timsort = require(\"zrender/lib/core/timsort\");\n\nvar Eventful = require(\"zrender/lib/mixin/Eventful\");\n\nvar GlobalModel = require(\"./model/Global\");\n\nvar ExtensionAPI = require(\"./ExtensionAPI\");\n\nvar CoordinateSystemManager = require(\"./CoordinateSystem\");\n\nvar OptionManager = require(\"./model/OptionManager\");\n\nvar backwardCompat = require(\"./preprocessor/backwardCompat\");\n\nvar dataStack = require(\"./processor/dataStack\");\n\nvar ComponentModel = require(\"./model/Component\");\n\nvar SeriesModel = require(\"./model/Series\");\n\nvar ComponentView = require(\"./view/Component\");\n\nvar ChartView = require(\"./view/Chart\");\n\nvar graphic = require(\"./util/graphic\");\n\nvar modelUtil = require(\"./util/model\");\n\nvar _throttle = require(\"./util/throttle\");\n\nvar throttle = _throttle.throttle;\n\nvar seriesColor = require(\"./visual/seriesColor\");\n\nvar aria = require(\"./visual/aria\");\n\nvar loadingDefault = require(\"./loading/default\");\n\nvar Scheduler = require(\"./stream/Scheduler\");\n\nvar lightTheme = require(\"./theme/light\");\n\nvar darkTheme = require(\"./theme/dark\");\n\nrequire(\"./component/dataset\");\n\nvar mapDataStorage = require(\"./coord/geo/mapDataStorage\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar assert = zrUtil.assert;\nvar each = zrUtil.each;\nvar isFunction = zrUtil.isFunction;\nvar isObject = zrUtil.isObject;\nvar parseClassType = ComponentModel.parseClassType;\nvar version = '4.9.0';\nvar dependencies = {\n  zrender: '4.3.2'\n};\nvar TEST_FRAME_REMAIN_TIME = 1;\nvar PRIORITY_PROCESSOR_FILTER = 1000;\nvar PRIORITY_PROCESSOR_SERIES_FILTER = 800;\nvar PRIORITY_PROCESSOR_DATASTACK = 900;\nvar PRIORITY_PROCESSOR_STATISTIC = 5000;\nvar PRIORITY_VISUAL_LAYOUT = 1000;\nvar PRIORITY_VISUAL_PROGRESSIVE_LAYOUT = 1100;\nvar PRIORITY_VISUAL_GLOBAL = 2000;\nvar PRIORITY_VISUAL_CHART = 3000;\nvar PRIORITY_VISUAL_POST_CHART_LAYOUT = 3500;\nvar PRIORITY_VISUAL_COMPONENT = 4000; // FIXME\n// necessary?\n\nvar PRIORITY_VISUAL_BRUSH = 5000;\nvar PRIORITY = {\n  PROCESSOR: {\n    FILTER: PRIORITY_PROCESSOR_FILTER,\n    SERIES_FILTER: PRIORITY_PROCESSOR_SERIES_FILTER,\n    STATISTIC: PRIORITY_PROCESSOR_STATISTIC\n  },\n  VISUAL: {\n    LAYOUT: PRIORITY_VISUAL_LAYOUT,\n    PROGRESSIVE_LAYOUT: PRIORITY_VISUAL_PROGRESSIVE_LAYOUT,\n    GLOBAL: PRIORITY_VISUAL_GLOBAL,\n    CHART: PRIORITY_VISUAL_CHART,\n    POST_CHART_LAYOUT: PRIORITY_VISUAL_POST_CHART_LAYOUT,\n    COMPONENT: PRIORITY_VISUAL_COMPONENT,\n    BRUSH: PRIORITY_VISUAL_BRUSH\n  }\n}; // Main process have three entries: `setOption`, `dispatchAction` and `resize`,\n// where they must not be invoked nestedly, except the only case: invoke\n// dispatchAction with updateMethod \"none\" in main process.\n// This flag is used to carry out this rule.\n// All events will be triggered out side main process (i.e. when !this[IN_MAIN_PROCESS]).\n\nvar IN_MAIN_PROCESS = '__flagInMainProcess';\nvar OPTION_UPDATED = '__optionUpdated';\nvar ACTION_REG = /^[a-zA-Z0-9_]+$/;\n\nfunction createRegisterEventWithLowercaseName(method, ignoreDisposed) {\n  return function (eventName, handler, context) {\n    if (!ignoreDisposed && this._disposed) {\n      disposedWarning(this.id);\n      return;\n    } // Event name is all lowercase\n\n\n    eventName = eventName && eventName.toLowerCase();\n    Eventful.prototype[method].call(this, eventName, handler, context);\n  };\n}\n/**\n * @module echarts~MessageCenter\n */\n\n\nfunction MessageCenter() {\n  Eventful.call(this);\n}\n\nMessageCenter.prototype.on = createRegisterEventWithLowercaseName('on', true);\nMessageCenter.prototype.off = createRegisterEventWithLowercaseName('off', true);\nMessageCenter.prototype.one = createRegisterEventWithLowercaseName('one', true);\nzrUtil.mixin(MessageCenter, Eventful);\n/**\n * @module echarts~ECharts\n */\n\nfunction ECharts(dom, theme, opts) {\n  opts = opts || {}; // Get theme by name\n\n  if (typeof theme === 'string') {\n    theme = themeStorage[theme];\n  }\n  /**\n   * @type {string}\n   */\n\n\n  this.id;\n  /**\n   * Group id\n   * @type {string}\n   */\n\n  this.group;\n  /**\n   * @type {HTMLElement}\n   * @private\n   */\n\n  this._dom = dom;\n  var defaultRenderer = 'canvas';\n\n  /**\n   * @type {module:zrender/ZRender}\n   * @private\n   */\n  var zr = this._zr = zrender.init(dom, {\n    renderer: opts.renderer || defaultRenderer,\n    devicePixelRatio: opts.devicePixelRatio,\n    width: opts.width,\n    height: opts.height\n  });\n  /**\n   * Expect 60 fps.\n   * @type {Function}\n   * @private\n   */\n\n  this._throttledZrFlush = throttle(zrUtil.bind(zr.flush, zr), 17);\n  var theme = zrUtil.clone(theme);\n  theme && backwardCompat(theme, true);\n  /**\n   * @type {Object}\n   * @private\n   */\n\n  this._theme = theme;\n  /**\n   * @type {Array.<module:echarts/view/Chart>}\n   * @private\n   */\n\n  this._chartsViews = [];\n  /**\n   * @type {Object.<string, module:echarts/view/Chart>}\n   * @private\n   */\n\n  this._chartsMap = {};\n  /**\n   * @type {Array.<module:echarts/view/Component>}\n   * @private\n   */\n\n  this._componentsViews = [];\n  /**\n   * @type {Object.<string, module:echarts/view/Component>}\n   * @private\n   */\n\n  this._componentsMap = {};\n  /**\n   * @type {module:echarts/CoordinateSystem}\n   * @private\n   */\n\n  this._coordSysMgr = new CoordinateSystemManager();\n  /**\n   * @type {module:echarts/ExtensionAPI}\n   * @private\n   */\n\n  var api = this._api = createExtensionAPI(this); // Sort on demand\n\n  function prioritySortFunc(a, b) {\n    return a.__prio - b.__prio;\n  }\n\n  timsort(visualFuncs, prioritySortFunc);\n  timsort(dataProcessorFuncs, prioritySortFunc);\n  /**\n   * @type {module:echarts/stream/Scheduler}\n   */\n\n  this._scheduler = new Scheduler(this, api, dataProcessorFuncs, visualFuncs);\n  Eventful.call(this, this._ecEventProcessor = new EventProcessor());\n  /**\n   * @type {module:echarts~MessageCenter}\n   * @private\n   */\n\n  this._messageCenter = new MessageCenter(); // Init mouse events\n\n  this._initEvents(); // In case some people write `window.onresize = chart.resize`\n\n\n  this.resize = zrUtil.bind(this.resize, this); // Can't dispatch action during rendering procedure\n\n  this._pendingActions = [];\n  zr.animation.on('frame', this._onframe, this);\n  bindRenderedEvent(zr, this); // ECharts instance can be used as value.\n\n  zrUtil.setAsPrimitive(this);\n}\n\nvar echartsProto = ECharts.prototype;\n\nechartsProto._onframe = function () {\n  if (this._disposed) {\n    return;\n  }\n\n  var scheduler = this._scheduler; // Lazy update\n\n  if (this[OPTION_UPDATED]) {\n    var silent = this[OPTION_UPDATED].silent;\n    this[IN_MAIN_PROCESS] = true;\n    prepare(this);\n    updateMethods.update.call(this);\n    this[IN_MAIN_PROCESS] = false;\n    this[OPTION_UPDATED] = false;\n    flushPendingActions.call(this, silent);\n    triggerUpdatedEvent.call(this, silent);\n  } // Avoid do both lazy update and progress in one frame.\n  else if (scheduler.unfinished) {\n      // Stream progress.\n      var remainTime = TEST_FRAME_REMAIN_TIME;\n      var ecModel = this._model;\n      var api = this._api;\n      scheduler.unfinished = false;\n\n      do {\n        var startTime = +new Date();\n        scheduler.performSeriesTasks(ecModel); // Currently dataProcessorFuncs do not check threshold.\n\n        scheduler.performDataProcessorTasks(ecModel);\n        updateStreamModes(this, ecModel); // Do not update coordinate system here. Because that coord system update in\n        // each frame is not a good user experience. So we follow the rule that\n        // the extent of the coordinate system is determin in the first frame (the\n        // frame is executed immedietely after task reset.\n        // this._coordSysMgr.update(ecModel, api);\n        // console.log('--- ec frame visual ---', remainTime);\n\n        scheduler.performVisualTasks(ecModel);\n        renderSeries(this, this._model, api, 'remain');\n        remainTime -= +new Date() - startTime;\n      } while (remainTime > 0 && scheduler.unfinished); // Call flush explicitly for trigger finished event.\n\n\n      if (!scheduler.unfinished) {\n        this._zr.flush();\n      } // Else, zr flushing be ensue within the same frame,\n      // because zr flushing is after onframe event.\n\n    }\n};\n/**\n * @return {HTMLElement}\n */\n\n\nechartsProto.getDom = function () {\n  return this._dom;\n};\n/**\n * @return {module:zrender~ZRender}\n */\n\n\nechartsProto.getZr = function () {\n  return this._zr;\n};\n/**\n * Usage:\n * chart.setOption(option, notMerge, lazyUpdate);\n * chart.setOption(option, {\n *     notMerge: ...,\n *     lazyUpdate: ...,\n *     silent: ...\n * });\n *\n * @param {Object} option\n * @param {Object|boolean} [opts] opts or notMerge.\n * @param {boolean} [opts.notMerge=false]\n * @param {boolean} [opts.lazyUpdate=false] Useful when setOption frequently.\n */\n\n\nechartsProto.setOption = function (option, notMerge, lazyUpdate) {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  var silent;\n\n  if (isObject(notMerge)) {\n    lazyUpdate = notMerge.lazyUpdate;\n    silent = notMerge.silent;\n    notMerge = notMerge.notMerge;\n  }\n\n  this[IN_MAIN_PROCESS] = true;\n\n  if (!this._model || notMerge) {\n    var optionManager = new OptionManager(this._api);\n    var theme = this._theme;\n    var ecModel = this._model = new GlobalModel();\n    ecModel.scheduler = this._scheduler;\n    ecModel.init(null, null, theme, optionManager);\n  }\n\n  this._model.setOption(option, optionPreprocessorFuncs);\n\n  if (lazyUpdate) {\n    this[OPTION_UPDATED] = {\n      silent: silent\n    };\n    this[IN_MAIN_PROCESS] = false;\n  } else {\n    prepare(this);\n    updateMethods.update.call(this); // Ensure zr refresh sychronously, and then pixel in canvas can be\n    // fetched after `setOption`.\n\n    this._zr.flush();\n\n    this[OPTION_UPDATED] = false;\n    this[IN_MAIN_PROCESS] = false;\n    flushPendingActions.call(this, silent);\n    triggerUpdatedEvent.call(this, silent);\n  }\n};\n/**\n * @DEPRECATED\n */\n\n\nechartsProto.setTheme = function () {\n  console.error('ECharts#setTheme() is DEPRECATED in ECharts 3.0');\n};\n/**\n * @return {module:echarts/model/Global}\n */\n\n\nechartsProto.getModel = function () {\n  return this._model;\n};\n/**\n * @return {Object}\n */\n\n\nechartsProto.getOption = function () {\n  return this._model && this._model.getOption();\n};\n/**\n * @return {number}\n */\n\n\nechartsProto.getWidth = function () {\n  return this._zr.getWidth();\n};\n/**\n * @return {number}\n */\n\n\nechartsProto.getHeight = function () {\n  return this._zr.getHeight();\n};\n/**\n * @return {number}\n */\n\n\nechartsProto.getDevicePixelRatio = function () {\n  return this._zr.painter.dpr || window.devicePixelRatio || 1;\n};\n/**\n * Get canvas which has all thing rendered\n * @param {Object} opts\n * @param {string} [opts.backgroundColor]\n * @return {string}\n */\n\n\nechartsProto.getRenderedCanvas = function (opts) {\n  if (!env.canvasSupported) {\n    return;\n  }\n\n  opts = opts || {};\n  opts.pixelRatio = opts.pixelRatio || 1;\n  opts.backgroundColor = opts.backgroundColor || this._model.get('backgroundColor');\n  var zr = this._zr; // var list = zr.storage.getDisplayList();\n  // Stop animations\n  // Never works before in init animation, so remove it.\n  // zrUtil.each(list, function (el) {\n  //     el.stopAnimation(true);\n  // });\n\n  return zr.painter.getRenderedCanvas(opts);\n};\n/**\n * Get svg data url\n * @return {string}\n */\n\n\nechartsProto.getSvgDataURL = function () {\n  if (!env.svgSupported) {\n    return;\n  }\n\n  var zr = this._zr;\n  var list = zr.storage.getDisplayList(); // Stop animations\n\n  zrUtil.each(list, function (el) {\n    el.stopAnimation(true);\n  });\n  return zr.painter.toDataURL();\n};\n/**\n * @return {string}\n * @param {Object} opts\n * @param {string} [opts.type='png']\n * @param {string} [opts.pixelRatio=1]\n * @param {string} [opts.backgroundColor]\n * @param {string} [opts.excludeComponents]\n */\n\n\nechartsProto.getDataURL = function (opts) {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  opts = opts || {};\n  var excludeComponents = opts.excludeComponents;\n  var ecModel = this._model;\n  var excludesComponentViews = [];\n  var self = this;\n  each(excludeComponents, function (componentType) {\n    ecModel.eachComponent({\n      mainType: componentType\n    }, function (component) {\n      var view = self._componentsMap[component.__viewId];\n\n      if (!view.group.ignore) {\n        excludesComponentViews.push(view);\n        view.group.ignore = true;\n      }\n    });\n  });\n  var url = this._zr.painter.getType() === 'svg' ? this.getSvgDataURL() : this.getRenderedCanvas(opts).toDataURL('image/' + (opts && opts.type || 'png'));\n  each(excludesComponentViews, function (view) {\n    view.group.ignore = false;\n  });\n  return url;\n};\n/**\n * @return {string}\n * @param {Object} opts\n * @param {string} [opts.type='png']\n * @param {string} [opts.pixelRatio=1]\n * @param {string} [opts.backgroundColor]\n */\n\n\nechartsProto.getConnectedDataURL = function (opts) {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  if (!env.canvasSupported) {\n    return;\n  }\n\n  var isSvg = opts.type === 'svg';\n  var groupId = this.group;\n  var mathMin = Math.min;\n  var mathMax = Math.max;\n  var MAX_NUMBER = Infinity;\n\n  if (connectedGroups[groupId]) {\n    var left = MAX_NUMBER;\n    var top = MAX_NUMBER;\n    var right = -MAX_NUMBER;\n    var bottom = -MAX_NUMBER;\n    var canvasList = [];\n    var dpr = opts && opts.pixelRatio || 1;\n    zrUtil.each(instances, function (chart, id) {\n      if (chart.group === groupId) {\n        var canvas = isSvg ? chart.getZr().painter.getSvgDom().innerHTML : chart.getRenderedCanvas(zrUtil.clone(opts));\n        var boundingRect = chart.getDom().getBoundingClientRect();\n        left = mathMin(boundingRect.left, left);\n        top = mathMin(boundingRect.top, top);\n        right = mathMax(boundingRect.right, right);\n        bottom = mathMax(boundingRect.bottom, bottom);\n        canvasList.push({\n          dom: canvas,\n          left: boundingRect.left,\n          top: boundingRect.top\n        });\n      }\n    });\n    left *= dpr;\n    top *= dpr;\n    right *= dpr;\n    bottom *= dpr;\n    var width = right - left;\n    var height = bottom - top;\n    var targetCanvas = zrUtil.createCanvas();\n    var zr = zrender.init(targetCanvas, {\n      renderer: isSvg ? 'svg' : 'canvas'\n    });\n    zr.resize({\n      width: width,\n      height: height\n    });\n\n    if (isSvg) {\n      var content = '';\n      each(canvasList, function (item) {\n        var x = item.left - left;\n        var y = item.top - top;\n        content += '<g transform=\"translate(' + x + ',' + y + ')\">' + item.dom + '</g>';\n      });\n      zr.painter.getSvgRoot().innerHTML = content;\n\n      if (opts.connectedBackgroundColor) {\n        zr.painter.setBackgroundColor(opts.connectedBackgroundColor);\n      }\n\n      zr.refreshImmediately();\n      return zr.painter.toDataURL();\n    } else {\n      // Background between the charts\n      if (opts.connectedBackgroundColor) {\n        zr.add(new graphic.Rect({\n          shape: {\n            x: 0,\n            y: 0,\n            width: width,\n            height: height\n          },\n          style: {\n            fill: opts.connectedBackgroundColor\n          }\n        }));\n      }\n\n      each(canvasList, function (item) {\n        var img = new graphic.Image({\n          style: {\n            x: item.left * dpr - left,\n            y: item.top * dpr - top,\n            image: item.dom\n          }\n        });\n        zr.add(img);\n      });\n      zr.refreshImmediately();\n      return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));\n    }\n  } else {\n    return this.getDataURL(opts);\n  }\n};\n/**\n * Convert from logical coordinate system to pixel coordinate system.\n * See CoordinateSystem#convertToPixel.\n * @param {string|Object} finder\n *        If string, e.g., 'geo', means {geoIndex: 0}.\n *        If Object, could contain some of these properties below:\n *        {\n *            seriesIndex / seriesId / seriesName,\n *            geoIndex / geoId, geoName,\n *            bmapIndex / bmapId / bmapName,\n *            xAxisIndex / xAxisId / xAxisName,\n *            yAxisIndex / yAxisId / yAxisName,\n *            gridIndex / gridId / gridName,\n *            ... (can be extended)\n *        }\n * @param {Array|number} value\n * @return {Array|number} result\n */\n\n\nechartsProto.convertToPixel = zrUtil.curry(doConvertPixel, 'convertToPixel');\n/**\n * Convert from pixel coordinate system to logical coordinate system.\n * See CoordinateSystem#convertFromPixel.\n * @param {string|Object} finder\n *        If string, e.g., 'geo', means {geoIndex: 0}.\n *        If Object, could contain some of these properties below:\n *        {\n *            seriesIndex / seriesId / seriesName,\n *            geoIndex / geoId / geoName,\n *            bmapIndex / bmapId / bmapName,\n *            xAxisIndex / xAxisId / xAxisName,\n *            yAxisIndex / yAxisId / yAxisName\n *            gridIndex / gridId / gridName,\n *            ... (can be extended)\n *        }\n * @param {Array|number} value\n * @return {Array|number} result\n */\n\nechartsProto.convertFromPixel = zrUtil.curry(doConvertPixel, 'convertFromPixel');\n\nfunction doConvertPixel(methodName, finder, value) {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  var ecModel = this._model;\n\n  var coordSysList = this._coordSysMgr.getCoordinateSystems();\n\n  var result;\n  finder = modelUtil.parseFinder(ecModel, finder);\n\n  for (var i = 0; i < coordSysList.length; i++) {\n    var coordSys = coordSysList[i];\n\n    if (coordSys[methodName] && (result = coordSys[methodName](ecModel, finder, value)) != null) {\n      return result;\n    }\n  }\n}\n/**\n * Is the specified coordinate systems or components contain the given pixel point.\n * @param {string|Object} finder\n *        If string, e.g., 'geo', means {geoIndex: 0}.\n *        If Object, could contain some of these properties below:\n *        {\n *            seriesIndex / seriesId / seriesName,\n *            geoIndex / geoId / geoName,\n *            bmapIndex / bmapId / bmapName,\n *            xAxisIndex / xAxisId / xAxisName,\n *            yAxisIndex / yAxisId / yAxisName,\n *            gridIndex / gridId / gridName,\n *            ... (can be extended)\n *        }\n * @param {Array|number} value\n * @return {boolean} result\n */\n\n\nechartsProto.containPixel = function (finder, value) {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  var ecModel = this._model;\n  var result;\n  finder = modelUtil.parseFinder(ecModel, finder);\n  zrUtil.each(finder, function (models, key) {\n    key.indexOf('Models') >= 0 && zrUtil.each(models, function (model) {\n      var coordSys = model.coordinateSystem;\n\n      if (coordSys && coordSys.containPoint) {\n        result |= !!coordSys.containPoint(value);\n      } else if (key === 'seriesModels') {\n        var view = this._chartsMap[model.__viewId];\n\n        if (view && view.containPoint) {\n          result |= view.containPoint(value, model);\n        } else {}\n      } else {}\n    }, this);\n  }, this);\n  return !!result;\n};\n/**\n * Get visual from series or data.\n * @param {string|Object} finder\n *        If string, e.g., 'series', means {seriesIndex: 0}.\n *        If Object, could contain some of these properties below:\n *        {\n *            seriesIndex / seriesId / seriesName,\n *            dataIndex / dataIndexInside\n *        }\n *        If dataIndex is not specified, series visual will be fetched,\n *        but not data item visual.\n *        If all of seriesIndex, seriesId, seriesName are not specified,\n *        visual will be fetched from first series.\n * @param {string} visualType 'color', 'symbol', 'symbolSize'\n */\n\n\nechartsProto.getVisual = function (finder, visualType) {\n  var ecModel = this._model;\n  finder = modelUtil.parseFinder(ecModel, finder, {\n    defaultMainType: 'series'\n  });\n  var seriesModel = finder.seriesModel;\n  var data = seriesModel.getData();\n  var dataIndexInside = finder.hasOwnProperty('dataIndexInside') ? finder.dataIndexInside : finder.hasOwnProperty('dataIndex') ? data.indexOfRawIndex(finder.dataIndex) : null;\n  return dataIndexInside != null ? data.getItemVisual(dataIndexInside, visualType) : data.getVisual(visualType);\n};\n/**\n * Get view of corresponding component model\n * @param  {module:echarts/model/Component} componentModel\n * @return {module:echarts/view/Component}\n */\n\n\nechartsProto.getViewOfComponentModel = function (componentModel) {\n  return this._componentsMap[componentModel.__viewId];\n};\n/**\n * Get view of corresponding series model\n * @param  {module:echarts/model/Series} seriesModel\n * @return {module:echarts/view/Chart}\n */\n\n\nechartsProto.getViewOfSeriesModel = function (seriesModel) {\n  return this._chartsMap[seriesModel.__viewId];\n};\n\nvar updateMethods = {\n  prepareAndUpdate: function (payload) {\n    prepare(this);\n    updateMethods.update.call(this, payload);\n  },\n\n  /**\n   * @param {Object} payload\n   * @private\n   */\n  update: function (payload) {\n    // console.profile && console.profile('update');\n    var ecModel = this._model;\n    var api = this._api;\n    var zr = this._zr;\n    var coordSysMgr = this._coordSysMgr;\n    var scheduler = this._scheduler; // update before setOption\n\n    if (!ecModel) {\n      return;\n    }\n\n    scheduler.restoreData(ecModel, payload);\n    scheduler.performSeriesTasks(ecModel); // TODO\n    // Save total ecModel here for undo/redo (after restoring data and before processing data).\n    // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.\n    // Create new coordinate system each update\n    // In LineView may save the old coordinate system and use it to get the orignal point\n\n    coordSysMgr.create(ecModel, api);\n    scheduler.performDataProcessorTasks(ecModel, payload); // Current stream render is not supported in data process. So we can update\n    // stream modes after data processing, where the filtered data is used to\n    // deteming whether use progressive rendering.\n\n    updateStreamModes(this, ecModel); // We update stream modes before coordinate system updated, then the modes info\n    // can be fetched when coord sys updating (consider the barGrid extent fix). But\n    // the drawback is the full coord info can not be fetched. Fortunately this full\n    // coord is not requied in stream mode updater currently.\n\n    coordSysMgr.update(ecModel, api);\n    clearColorPalette(ecModel);\n    scheduler.performVisualTasks(ecModel, payload);\n    render(this, ecModel, api, payload); // Set background\n\n    var backgroundColor = ecModel.get('backgroundColor') || 'transparent'; // In IE8\n\n    if (!env.canvasSupported) {\n      var colorArr = colorTool.parse(backgroundColor);\n      backgroundColor = colorTool.stringify(colorArr, 'rgb');\n\n      if (colorArr[3] === 0) {\n        backgroundColor = 'transparent';\n      }\n    } else {\n      zr.setBackgroundColor(backgroundColor);\n    }\n\n    performPostUpdateFuncs(ecModel, api); // console.profile && console.profileEnd('update');\n  },\n\n  /**\n   * @param {Object} payload\n   * @private\n   */\n  updateTransform: function (payload) {\n    var ecModel = this._model;\n    var ecIns = this;\n    var api = this._api; // update before setOption\n\n    if (!ecModel) {\n      return;\n    } // ChartView.markUpdateMethod(payload, 'updateTransform');\n\n\n    var componentDirtyList = [];\n    ecModel.eachComponent(function (componentType, componentModel) {\n      var componentView = ecIns.getViewOfComponentModel(componentModel);\n\n      if (componentView && componentView.__alive) {\n        if (componentView.updateTransform) {\n          var result = componentView.updateTransform(componentModel, ecModel, api, payload);\n          result && result.update && componentDirtyList.push(componentView);\n        } else {\n          componentDirtyList.push(componentView);\n        }\n      }\n    });\n    var seriesDirtyMap = zrUtil.createHashMap();\n    ecModel.eachSeries(function (seriesModel) {\n      var chartView = ecIns._chartsMap[seriesModel.__viewId];\n\n      if (chartView.updateTransform) {\n        var result = chartView.updateTransform(seriesModel, ecModel, api, payload);\n        result && result.update && seriesDirtyMap.set(seriesModel.uid, 1);\n      } else {\n        seriesDirtyMap.set(seriesModel.uid, 1);\n      }\n    });\n    clearColorPalette(ecModel); // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.\n    // this._scheduler.performVisualTasks(ecModel, payload, 'layout', true);\n\n    this._scheduler.performVisualTasks(ecModel, payload, {\n      setDirty: true,\n      dirtyMap: seriesDirtyMap\n    }); // Currently, not call render of components. Geo render cost a lot.\n    // renderComponents(ecIns, ecModel, api, payload, componentDirtyList);\n\n\n    renderSeries(ecIns, ecModel, api, payload, seriesDirtyMap);\n    performPostUpdateFuncs(ecModel, this._api);\n  },\n\n  /**\n   * @param {Object} payload\n   * @private\n   */\n  updateView: function (payload) {\n    var ecModel = this._model; // update before setOption\n\n    if (!ecModel) {\n      return;\n    }\n\n    ChartView.markUpdateMethod(payload, 'updateView');\n    clearColorPalette(ecModel); // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.\n\n    this._scheduler.performVisualTasks(ecModel, payload, {\n      setDirty: true\n    });\n\n    render(this, this._model, this._api, payload);\n    performPostUpdateFuncs(ecModel, this._api);\n  },\n\n  /**\n   * @param {Object} payload\n   * @private\n   */\n  updateVisual: function (payload) {\n    updateMethods.update.call(this, payload); // var ecModel = this._model;\n    // // update before setOption\n    // if (!ecModel) {\n    //     return;\n    // }\n    // ChartView.markUpdateMethod(payload, 'updateVisual');\n    // clearColorPalette(ecModel);\n    // // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.\n    // this._scheduler.performVisualTasks(ecModel, payload, {visualType: 'visual', setDirty: true});\n    // render(this, this._model, this._api, payload);\n    // performPostUpdateFuncs(ecModel, this._api);\n  },\n\n  /**\n   * @param {Object} payload\n   * @private\n   */\n  updateLayout: function (payload) {\n    updateMethods.update.call(this, payload); // var ecModel = this._model;\n    // // update before setOption\n    // if (!ecModel) {\n    //     return;\n    // }\n    // ChartView.markUpdateMethod(payload, 'updateLayout');\n    // // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.\n    // // this._scheduler.performVisualTasks(ecModel, payload, 'layout', true);\n    // this._scheduler.performVisualTasks(ecModel, payload, {setDirty: true});\n    // render(this, this._model, this._api, payload);\n    // performPostUpdateFuncs(ecModel, this._api);\n  }\n};\n\nfunction prepare(ecIns) {\n  var ecModel = ecIns._model;\n  var scheduler = ecIns._scheduler;\n  scheduler.restorePipelines(ecModel);\n  scheduler.prepareStageTasks();\n  prepareView(ecIns, 'component', ecModel, scheduler);\n  prepareView(ecIns, 'chart', ecModel, scheduler);\n  scheduler.plan();\n}\n/**\n * @private\n */\n\n\nfunction updateDirectly(ecIns, method, payload, mainType, subType) {\n  var ecModel = ecIns._model; // broadcast\n\n  if (!mainType) {\n    // FIXME\n    // Chart will not be update directly here, except set dirty.\n    // But there is no such scenario now.\n    each(ecIns._componentsViews.concat(ecIns._chartsViews), callView);\n    return;\n  }\n\n  var query = {};\n  query[mainType + 'Id'] = payload[mainType + 'Id'];\n  query[mainType + 'Index'] = payload[mainType + 'Index'];\n  query[mainType + 'Name'] = payload[mainType + 'Name'];\n  var condition = {\n    mainType: mainType,\n    query: query\n  };\n  subType && (condition.subType = subType); // subType may be '' by parseClassType;\n\n  var excludeSeriesId = payload.excludeSeriesId;\n\n  if (excludeSeriesId != null) {\n    excludeSeriesId = zrUtil.createHashMap(modelUtil.normalizeToArray(excludeSeriesId));\n  } // If dispatchAction before setOption, do nothing.\n\n\n  ecModel && ecModel.eachComponent(condition, function (model) {\n    if (!excludeSeriesId || excludeSeriesId.get(model.id) == null) {\n      callView(ecIns[mainType === 'series' ? '_chartsMap' : '_componentsMap'][model.__viewId]);\n    }\n  }, ecIns);\n\n  function callView(view) {\n    view && view.__alive && view[method] && view[method](view.__model, ecModel, ecIns._api, payload);\n  }\n}\n/**\n * Resize the chart\n * @param {Object} opts\n * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)\n * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)\n * @param {boolean} [opts.silent=false]\n */\n\n\nechartsProto.resize = function (opts) {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  this._zr.resize(opts);\n\n  var ecModel = this._model; // Resize loading effect\n\n  this._loadingFX && this._loadingFX.resize();\n\n  if (!ecModel) {\n    return;\n  }\n\n  var optionChanged = ecModel.resetOption('media');\n  var silent = opts && opts.silent;\n  this[IN_MAIN_PROCESS] = true;\n  optionChanged && prepare(this);\n  updateMethods.update.call(this);\n  this[IN_MAIN_PROCESS] = false;\n  flushPendingActions.call(this, silent);\n  triggerUpdatedEvent.call(this, silent);\n};\n\nfunction updateStreamModes(ecIns, ecModel) {\n  var chartsMap = ecIns._chartsMap;\n  var scheduler = ecIns._scheduler;\n  ecModel.eachSeries(function (seriesModel) {\n    scheduler.updateStreamModes(seriesModel, chartsMap[seriesModel.__viewId]);\n  });\n}\n/**\n * Show loading effect\n * @param  {string} [name='default']\n * @param  {Object} [cfg]\n */\n\n\nechartsProto.showLoading = function (name, cfg) {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  if (isObject(name)) {\n    cfg = name;\n    name = '';\n  }\n\n  name = name || 'default';\n  this.hideLoading();\n\n  if (!loadingEffects[name]) {\n    return;\n  }\n\n  var el = loadingEffects[name](this._api, cfg);\n  var zr = this._zr;\n  this._loadingFX = el;\n  zr.add(el);\n};\n/**\n * Hide loading effect\n */\n\n\nechartsProto.hideLoading = function () {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  this._loadingFX && this._zr.remove(this._loadingFX);\n  this._loadingFX = null;\n};\n/**\n * @param {Object} eventObj\n * @return {Object}\n */\n\n\nechartsProto.makeActionFromEvent = function (eventObj) {\n  var payload = zrUtil.extend({}, eventObj);\n  payload.type = eventActionMap[eventObj.type];\n  return payload;\n};\n/**\n * @pubilc\n * @param {Object} payload\n * @param {string} [payload.type] Action type\n * @param {Object|boolean} [opt] If pass boolean, means opt.silent\n * @param {boolean} [opt.silent=false] Whether trigger events.\n * @param {boolean} [opt.flush=undefined]\n *                  true: Flush immediately, and then pixel in canvas can be fetched\n *                      immediately. Caution: it might affect performance.\n *                  false: Not flush.\n *                  undefined: Auto decide whether perform flush.\n */\n\n\nechartsProto.dispatchAction = function (payload, opt) {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  if (!isObject(opt)) {\n    opt = {\n      silent: !!opt\n    };\n  }\n\n  if (!actions[payload.type]) {\n    return;\n  } // Avoid dispatch action before setOption. Especially in `connect`.\n\n\n  if (!this._model) {\n    return;\n  } // May dispatchAction in rendering procedure\n\n\n  if (this[IN_MAIN_PROCESS]) {\n    this._pendingActions.push(payload);\n\n    return;\n  }\n\n  doDispatchAction.call(this, payload, opt.silent);\n\n  if (opt.flush) {\n    this._zr.flush(true);\n  } else if (opt.flush !== false && env.browser.weChat) {\n    // In WeChat embeded browser, `requestAnimationFrame` and `setInterval`\n    // hang when sliding page (on touch event), which cause that zr does not\n    // refresh util user interaction finished, which is not expected.\n    // But `dispatchAction` may be called too frequently when pan on touch\n    // screen, which impacts performance if do not throttle them.\n    this._throttledZrFlush();\n  }\n\n  flushPendingActions.call(this, opt.silent);\n  triggerUpdatedEvent.call(this, opt.silent);\n};\n\nfunction doDispatchAction(payload, silent) {\n  var payloadType = payload.type;\n  var escapeConnect = payload.escapeConnect;\n  var actionWrap = actions[payloadType];\n  var actionInfo = actionWrap.actionInfo;\n  var cptType = (actionInfo.update || 'update').split(':');\n  var updateMethod = cptType.pop();\n  cptType = cptType[0] != null && parseClassType(cptType[0]);\n  this[IN_MAIN_PROCESS] = true;\n  var payloads = [payload];\n  var batched = false; // Batch action\n\n  if (payload.batch) {\n    batched = true;\n    payloads = zrUtil.map(payload.batch, function (item) {\n      item = zrUtil.defaults(zrUtil.extend({}, item), payload);\n      item.batch = null;\n      return item;\n    });\n  }\n\n  var eventObjBatch = [];\n  var eventObj;\n  var isHighDown = payloadType === 'highlight' || payloadType === 'downplay';\n  each(payloads, function (batchItem) {\n    // Action can specify the event by return it.\n    eventObj = actionWrap.action(batchItem, this._model, this._api); // Emit event outside\n\n    eventObj = eventObj || zrUtil.extend({}, batchItem); // Convert type to eventType\n\n    eventObj.type = actionInfo.event || eventObj.type;\n    eventObjBatch.push(eventObj); // light update does not perform data process, layout and visual.\n\n    if (isHighDown) {\n      // method, payload, mainType, subType\n      updateDirectly(this, updateMethod, batchItem, 'series');\n    } else if (cptType) {\n      updateDirectly(this, updateMethod, batchItem, cptType.main, cptType.sub);\n    }\n  }, this);\n\n  if (updateMethod !== 'none' && !isHighDown && !cptType) {\n    // Still dirty\n    if (this[OPTION_UPDATED]) {\n      // FIXME Pass payload ?\n      prepare(this);\n      updateMethods.update.call(this, payload);\n      this[OPTION_UPDATED] = false;\n    } else {\n      updateMethods[updateMethod].call(this, payload);\n    }\n  } // Follow the rule of action batch\n\n\n  if (batched) {\n    eventObj = {\n      type: actionInfo.event || payloadType,\n      escapeConnect: escapeConnect,\n      batch: eventObjBatch\n    };\n  } else {\n    eventObj = eventObjBatch[0];\n  }\n\n  this[IN_MAIN_PROCESS] = false;\n  !silent && this._messageCenter.trigger(eventObj.type, eventObj);\n}\n\nfunction flushPendingActions(silent) {\n  var pendingActions = this._pendingActions;\n\n  while (pendingActions.length) {\n    var payload = pendingActions.shift();\n    doDispatchAction.call(this, payload, silent);\n  }\n}\n\nfunction triggerUpdatedEvent(silent) {\n  !silent && this.trigger('updated');\n}\n/**\n * Event `rendered` is triggered when zr\n * rendered. It is useful for realtime\n * snapshot (reflect animation).\n *\n * Event `finished` is triggered when:\n * (1) zrender rendering finished.\n * (2) initial animation finished.\n * (3) progressive rendering finished.\n * (4) no pending action.\n * (5) no delayed setOption needs to be processed.\n */\n\n\nfunction bindRenderedEvent(zr, ecIns) {\n  zr.on('rendered', function () {\n    ecIns.trigger('rendered'); // The `finished` event should not be triggered repeatly,\n    // so it should only be triggered when rendering indeed happend\n    // in zrender. (Consider the case that dipatchAction is keep\n    // triggering when mouse move).\n\n    if ( // Although zr is dirty if initial animation is not finished\n    // and this checking is called on frame, we also check\n    // animation finished for robustness.\n    zr.animation.isFinished() && !ecIns[OPTION_UPDATED] && !ecIns._scheduler.unfinished && !ecIns._pendingActions.length) {\n      ecIns.trigger('finished');\n    }\n  });\n}\n/**\n * @param {Object} params\n * @param {number} params.seriesIndex\n * @param {Array|TypedArray} params.data\n */\n\n\nechartsProto.appendData = function (params) {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  var seriesIndex = params.seriesIndex;\n  var ecModel = this.getModel();\n  var seriesModel = ecModel.getSeriesByIndex(seriesIndex);\n  seriesModel.appendData(params); // Note: `appendData` does not support that update extent of coordinate\n  // system, util some scenario require that. In the expected usage of\n  // `appendData`, the initial extent of coordinate system should better\n  // be fixed by axis `min`/`max` setting or initial data, otherwise if\n  // the extent changed while `appendData`, the location of the painted\n  // graphic elements have to be changed, which make the usage of\n  // `appendData` meaningless.\n\n  this._scheduler.unfinished = true;\n};\n/**\n * Register event\n * @method\n */\n\n\nechartsProto.on = createRegisterEventWithLowercaseName('on', false);\nechartsProto.off = createRegisterEventWithLowercaseName('off', false);\nechartsProto.one = createRegisterEventWithLowercaseName('one', false);\n/**\n * Prepare view instances of charts and components\n * @param  {module:echarts/model/Global} ecModel\n * @private\n */\n\nfunction prepareView(ecIns, type, ecModel, scheduler) {\n  var isComponent = type === 'component';\n  var viewList = isComponent ? ecIns._componentsViews : ecIns._chartsViews;\n  var viewMap = isComponent ? ecIns._componentsMap : ecIns._chartsMap;\n  var zr = ecIns._zr;\n  var api = ecIns._api;\n\n  for (var i = 0; i < viewList.length; i++) {\n    viewList[i].__alive = false;\n  }\n\n  isComponent ? ecModel.eachComponent(function (componentType, model) {\n    componentType !== 'series' && doPrepare(model);\n  }) : ecModel.eachSeries(doPrepare);\n\n  function doPrepare(model) {\n    // Consider: id same and type changed.\n    var viewId = '_ec_' + model.id + '_' + model.type;\n    var view = viewMap[viewId];\n\n    if (!view) {\n      var classType = parseClassType(model.type);\n      var Clazz = isComponent ? ComponentView.getClass(classType.main, classType.sub) : ChartView.getClass(classType.sub);\n      view = new Clazz();\n      view.init(ecModel, api);\n      viewMap[viewId] = view;\n      viewList.push(view);\n      zr.add(view.group);\n    }\n\n    model.__viewId = view.__id = viewId;\n    view.__alive = true;\n    view.__model = model;\n    view.group.__ecComponentInfo = {\n      mainType: model.mainType,\n      index: model.componentIndex\n    };\n    !isComponent && scheduler.prepareView(view, model, ecModel, api);\n  }\n\n  for (var i = 0; i < viewList.length;) {\n    var view = viewList[i];\n\n    if (!view.__alive) {\n      !isComponent && view.renderTask.dispose();\n      zr.remove(view.group);\n      view.dispose(ecModel, api);\n      viewList.splice(i, 1);\n      delete viewMap[view.__id];\n      view.__id = view.group.__ecComponentInfo = null;\n    } else {\n      i++;\n    }\n  }\n} // /**\n//  * Encode visual infomation from data after data processing\n//  *\n//  * @param {module:echarts/model/Global} ecModel\n//  * @param {object} layout\n//  * @param {boolean} [layoutFilter] `true`: only layout,\n//  *                                 `false`: only not layout,\n//  *                                 `null`/`undefined`: all.\n//  * @param {string} taskBaseTag\n//  * @private\n//  */\n// function startVisualEncoding(ecIns, ecModel, api, payload, layoutFilter) {\n//     each(visualFuncs, function (visual, index) {\n//         var isLayout = visual.isLayout;\n//         if (layoutFilter == null\n//             || (layoutFilter === false && !isLayout)\n//             || (layoutFilter === true && isLayout)\n//         ) {\n//             visual.func(ecModel, api, payload);\n//         }\n//     });\n// }\n\n\nfunction clearColorPalette(ecModel) {\n  ecModel.clearColorPalette();\n  ecModel.eachSeries(function (seriesModel) {\n    seriesModel.clearColorPalette();\n  });\n}\n\nfunction render(ecIns, ecModel, api, payload) {\n  renderComponents(ecIns, ecModel, api, payload);\n  each(ecIns._chartsViews, function (chart) {\n    chart.__alive = false;\n  });\n  renderSeries(ecIns, ecModel, api, payload); // Remove groups of unrendered charts\n\n  each(ecIns._chartsViews, function (chart) {\n    if (!chart.__alive) {\n      chart.remove(ecModel, api);\n    }\n  });\n}\n\nfunction renderComponents(ecIns, ecModel, api, payload, dirtyList) {\n  each(dirtyList || ecIns._componentsViews, function (componentView) {\n    var componentModel = componentView.__model;\n    componentView.render(componentModel, ecModel, api, payload);\n    updateZ(componentModel, componentView);\n  });\n}\n/**\n * Render each chart and component\n * @private\n */\n\n\nfunction renderSeries(ecIns, ecModel, api, payload, dirtyMap) {\n  // Render all charts\n  var scheduler = ecIns._scheduler;\n  var unfinished;\n  ecModel.eachSeries(function (seriesModel) {\n    var chartView = ecIns._chartsMap[seriesModel.__viewId];\n    chartView.__alive = true;\n    var renderTask = chartView.renderTask;\n    scheduler.updatePayload(renderTask, payload);\n\n    if (dirtyMap && dirtyMap.get(seriesModel.uid)) {\n      renderTask.dirty();\n    }\n\n    unfinished |= renderTask.perform(scheduler.getPerformArgs(renderTask));\n    chartView.group.silent = !!seriesModel.get('silent');\n    updateZ(seriesModel, chartView);\n    updateBlend(seriesModel, chartView);\n  });\n  scheduler.unfinished |= unfinished; // If use hover layer\n\n  updateHoverLayerStatus(ecIns, ecModel); // Add aria\n\n  aria(ecIns._zr.dom, ecModel);\n}\n\nfunction performPostUpdateFuncs(ecModel, api) {\n  each(postUpdateFuncs, function (func) {\n    func(ecModel, api);\n  });\n}\n\nvar MOUSE_EVENT_NAMES = ['click', 'dblclick', 'mouseover', 'mouseout', 'mousemove', 'mousedown', 'mouseup', 'globalout', 'contextmenu'];\n/**\n * @private\n */\n\nechartsProto._initEvents = function () {\n  each(MOUSE_EVENT_NAMES, function (eveName) {\n    var handler = function (e) {\n      var ecModel = this.getModel();\n      var el = e.target;\n      var params;\n      var isGlobalOut = eveName === 'globalout'; // no e.target when 'globalout'.\n\n      if (isGlobalOut) {\n        params = {};\n      } else if (el && el.dataIndex != null) {\n        var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);\n        params = dataModel && dataModel.getDataParams(el.dataIndex, el.dataType, el) || {};\n      } // If element has custom eventData of components\n      else if (el && el.eventData) {\n          params = zrUtil.extend({}, el.eventData);\n        } // Contract: if params prepared in mouse event,\n      // these properties must be specified:\n      // {\n      //    componentType: string (component main type)\n      //    componentIndex: number\n      // }\n      // Otherwise event query can not work.\n\n\n      if (params) {\n        var componentType = params.componentType;\n        var componentIndex = params.componentIndex; // Special handling for historic reason: when trigger by\n        // markLine/markPoint/markArea, the componentType is\n        // 'markLine'/'markPoint'/'markArea', but we should better\n        // enable them to be queried by seriesIndex, since their\n        // option is set in each series.\n\n        if (componentType === 'markLine' || componentType === 'markPoint' || componentType === 'markArea') {\n          componentType = 'series';\n          componentIndex = params.seriesIndex;\n        }\n\n        var model = componentType && componentIndex != null && ecModel.getComponent(componentType, componentIndex);\n        var view = model && this[model.mainType === 'series' ? '_chartsMap' : '_componentsMap'][model.__viewId];\n        params.event = e;\n        params.type = eveName;\n        this._ecEventProcessor.eventInfo = {\n          targetEl: el,\n          packedEvent: params,\n          model: model,\n          view: view\n        };\n        this.trigger(eveName, params);\n      }\n    }; // Consider that some component (like tooltip, brush, ...)\n    // register zr event handler, but user event handler might\n    // do anything, such as call `setOption` or `dispatchAction`,\n    // which probably update any of the content and probably\n    // cause problem if it is called previous other inner handlers.\n\n\n    handler.zrEventfulCallAtLast = true;\n\n    this._zr.on(eveName, handler, this);\n  }, this);\n  each(eventActionMap, function (actionType, eventType) {\n    this._messageCenter.on(eventType, function (event) {\n      this.trigger(eventType, event);\n    }, this);\n  }, this);\n};\n/**\n * @return {boolean}\n */\n\n\nechartsProto.isDisposed = function () {\n  return this._disposed;\n};\n/**\n * Clear\n */\n\n\nechartsProto.clear = function () {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  this.setOption({\n    series: []\n  }, true);\n};\n/**\n * Dispose instance\n */\n\n\nechartsProto.dispose = function () {\n  if (this._disposed) {\n    disposedWarning(this.id);\n    return;\n  }\n\n  this._disposed = true;\n  modelUtil.setAttribute(this.getDom(), DOM_ATTRIBUTE_KEY, '');\n  var api = this._api;\n  var ecModel = this._model;\n  each(this._componentsViews, function (component) {\n    component.dispose(ecModel, api);\n  });\n  each(this._chartsViews, function (chart) {\n    chart.dispose(ecModel, api);\n  }); // Dispose after all views disposed\n\n  this._zr.dispose();\n\n  delete instances[this.id];\n};\n\nzrUtil.mixin(ECharts, Eventful);\n\nfunction disposedWarning(id) {}\n\nfunction updateHoverLayerStatus(ecIns, ecModel) {\n  var zr = ecIns._zr;\n  var storage = zr.storage;\n  var elCount = 0;\n  storage.traverse(function (el) {\n    elCount++;\n  });\n\n  if (elCount > ecModel.get('hoverLayerThreshold') && !env.node) {\n    ecModel.eachSeries(function (seriesModel) {\n      if (seriesModel.preventUsingHoverLayer) {\n        return;\n      }\n\n      var chartView = ecIns._chartsMap[seriesModel.__viewId];\n\n      if (chartView.__alive) {\n        chartView.group.traverse(function (el) {\n          // Don't switch back.\n          el.useHoverLayer = true;\n        });\n      }\n    });\n  }\n}\n/**\n * Update chart progressive and blend.\n * @param {module:echarts/model/Series|module:echarts/model/Component} model\n * @param {module:echarts/view/Component|module:echarts/view/Chart} view\n */\n\n\nfunction updateBlend(seriesModel, chartView) {\n  var blendMode = seriesModel.get('blendMode') || null;\n  chartView.group.traverse(function (el) {\n    // FIXME marker and other components\n    if (!el.isGroup) {\n      // Only set if blendMode is changed. In case element is incremental and don't wan't to rerender.\n      if (el.style.blend !== blendMode) {\n        el.setStyle('blend', blendMode);\n      }\n    }\n\n    if (el.eachPendingDisplayable) {\n      el.eachPendingDisplayable(function (displayable) {\n        displayable.setStyle('blend', blendMode);\n      });\n    }\n  });\n}\n/**\n * @param {module:echarts/model/Series|module:echarts/model/Component} model\n * @param {module:echarts/view/Component|module:echarts/view/Chart} view\n */\n\n\nfunction updateZ(model, view) {\n  var z = model.get('z');\n  var zlevel = model.get('zlevel'); // Set z and zlevel\n\n  view.group.traverse(function (el) {\n    if (el.type !== 'group') {\n      z != null && (el.z = z);\n      zlevel != null && (el.zlevel = zlevel);\n    }\n  });\n}\n\nfunction createExtensionAPI(ecInstance) {\n  var coordSysMgr = ecInstance._coordSysMgr;\n  return zrUtil.extend(new ExtensionAPI(ecInstance), {\n    // Inject methods\n    getCoordinateSystems: zrUtil.bind(coordSysMgr.getCoordinateSystems, coordSysMgr),\n    getComponentByElement: function (el) {\n      while (el) {\n        var modelInfo = el.__ecComponentInfo;\n\n        if (modelInfo != null) {\n          return ecInstance._model.getComponent(modelInfo.mainType, modelInfo.index);\n        }\n\n        el = el.parent;\n      }\n    }\n  });\n}\n/**\n * @class\n * Usage of query:\n * `chart.on('click', query, handler);`\n * The `query` can be:\n * + The component type query string, only `mainType` or `mainType.subType`,\n *   like: 'xAxis', 'series', 'xAxis.category' or 'series.line'.\n * + The component query object, like:\n *   `{seriesIndex: 2}`, `{seriesName: 'xx'}`, `{seriesId: 'some'}`,\n *   `{xAxisIndex: 2}`, `{xAxisName: 'xx'}`, `{xAxisId: 'some'}`.\n * + The data query object, like:\n *   `{dataIndex: 123}`, `{dataType: 'link'}`, `{name: 'some'}`.\n * + The other query object (cmponent customized query), like:\n *   `{element: 'some'}` (only available in custom series).\n *\n * Caveat: If a prop in the `query` object is `null/undefined`, it is the\n * same as there is no such prop in the `query` object.\n */\n\n\nfunction EventProcessor() {\n  // These info required: targetEl, packedEvent, model, view\n  this.eventInfo;\n}\n\nEventProcessor.prototype = {\n  constructor: EventProcessor,\n  normalizeQuery: function (query) {\n    var cptQuery = {};\n    var dataQuery = {};\n    var otherQuery = {}; // `query` is `mainType` or `mainType.subType` of component.\n\n    if (zrUtil.isString(query)) {\n      var condCptType = parseClassType(query); // `.main` and `.sub` may be ''.\n\n      cptQuery.mainType = condCptType.main || null;\n      cptQuery.subType = condCptType.sub || null;\n    } // `query` is an object, convert to {mainType, index, name, id}.\n    else {\n        // `xxxIndex`, `xxxName`, `xxxId`, `name`, `dataIndex`, `dataType` is reserved,\n        // can not be used in `compomentModel.filterForExposedEvent`.\n        var suffixes = ['Index', 'Name', 'Id'];\n        var dataKeys = {\n          name: 1,\n          dataIndex: 1,\n          dataType: 1\n        };\n        zrUtil.each(query, function (val, key) {\n          var reserved = false;\n\n          for (var i = 0; i < suffixes.length; i++) {\n            var propSuffix = suffixes[i];\n            var suffixPos = key.lastIndexOf(propSuffix);\n\n            if (suffixPos > 0 && suffixPos === key.length - propSuffix.length) {\n              var mainType = key.slice(0, suffixPos); // Consider `dataIndex`.\n\n              if (mainType !== 'data') {\n                cptQuery.mainType = mainType;\n                cptQuery[propSuffix.toLowerCase()] = val;\n                reserved = true;\n              }\n            }\n          }\n\n          if (dataKeys.hasOwnProperty(key)) {\n            dataQuery[key] = val;\n            reserved = true;\n          }\n\n          if (!reserved) {\n            otherQuery[key] = val;\n          }\n        });\n      }\n\n    return {\n      cptQuery: cptQuery,\n      dataQuery: dataQuery,\n      otherQuery: otherQuery\n    };\n  },\n  filter: function (eventType, query, args) {\n    // They should be assigned before each trigger call.\n    var eventInfo = this.eventInfo;\n\n    if (!eventInfo) {\n      return true;\n    }\n\n    var targetEl = eventInfo.targetEl;\n    var packedEvent = eventInfo.packedEvent;\n    var model = eventInfo.model;\n    var view = eventInfo.view; // For event like 'globalout'.\n\n    if (!model || !view) {\n      return true;\n    }\n\n    var cptQuery = query.cptQuery;\n    var dataQuery = query.dataQuery;\n    return check(cptQuery, model, 'mainType') && check(cptQuery, model, 'subType') && check(cptQuery, model, 'index', 'componentIndex') && check(cptQuery, model, 'name') && check(cptQuery, model, 'id') && check(dataQuery, packedEvent, 'name') && check(dataQuery, packedEvent, 'dataIndex') && check(dataQuery, packedEvent, 'dataType') && (!view.filterForExposedEvent || view.filterForExposedEvent(eventType, query.otherQuery, targetEl, packedEvent));\n\n    function check(query, host, prop, propOnHost) {\n      return query[prop] == null || host[propOnHost || prop] === query[prop];\n    }\n  },\n  afterTrigger: function () {\n    // Make sure the eventInfo wont be used in next trigger.\n    this.eventInfo = null;\n  }\n};\n/**\n * @type {Object} key: actionType.\n * @inner\n */\n\nvar actions = {};\n/**\n * Map eventType to actionType\n * @type {Object}\n */\n\nvar eventActionMap = {};\n/**\n * Data processor functions of each stage\n * @type {Array.<Object.<string, Function>>}\n * @inner\n */\n\nvar dataProcessorFuncs = [];\n/**\n * @type {Array.<Function>}\n * @inner\n */\n\nvar optionPreprocessorFuncs = [];\n/**\n * @type {Array.<Function>}\n * @inner\n */\n\nvar postUpdateFuncs = [];\n/**\n * Visual encoding functions of each stage\n * @type {Array.<Object.<string, Function>>}\n */\n\nvar visualFuncs = [];\n/**\n * Theme storage\n * @type {Object.<key, Object>}\n */\n\nvar themeStorage = {};\n/**\n * Loading effects\n */\n\nvar loadingEffects = {};\nvar instances = {};\nvar connectedGroups = {};\nvar idBase = new Date() - 0;\nvar groupIdBase = new Date() - 0;\nvar DOM_ATTRIBUTE_KEY = '_echarts_instance_';\n\nfunction enableConnect(chart) {\n  var STATUS_PENDING = 0;\n  var STATUS_UPDATING = 1;\n  var STATUS_UPDATED = 2;\n  var STATUS_KEY = '__connectUpdateStatus';\n\n  function updateConnectedChartsStatus(charts, status) {\n    for (var i = 0; i < charts.length; i++) {\n      var otherChart = charts[i];\n      otherChart[STATUS_KEY] = status;\n    }\n  }\n\n  each(eventActionMap, function (actionType, eventType) {\n    chart._messageCenter.on(eventType, function (event) {\n      if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {\n        if (event && event.escapeConnect) {\n          return;\n        }\n\n        var action = chart.makeActionFromEvent(event);\n        var otherCharts = [];\n        each(instances, function (otherChart) {\n          if (otherChart !== chart && otherChart.group === chart.group) {\n            otherCharts.push(otherChart);\n          }\n        });\n        updateConnectedChartsStatus(otherCharts, STATUS_PENDING);\n        each(otherCharts, function (otherChart) {\n          if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {\n            otherChart.dispatchAction(action);\n          }\n        });\n        updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);\n      }\n    });\n  });\n}\n/**\n * @param {HTMLElement} dom\n * @param {Object} [theme]\n * @param {Object} opts\n * @param {number} [opts.devicePixelRatio] Use window.devicePixelRatio by default\n * @param {string} [opts.renderer] Can choose 'canvas' or 'svg' to render the chart.\n * @param {number} [opts.width] Use clientWidth of the input `dom` by default.\n *                              Can be 'auto' (the same as null/undefined)\n * @param {number} [opts.height] Use clientHeight of the input `dom` by default.\n *                               Can be 'auto' (the same as null/undefined)\n */\n\n\nfunction init(dom, theme, opts) {\n  var existInstance = getInstanceByDom(dom);\n\n  if (existInstance) {\n    return existInstance;\n  }\n\n  var chart = new ECharts(dom, theme, opts);\n  chart.id = 'ec_' + idBase++;\n  instances[chart.id] = chart;\n  modelUtil.setAttribute(dom, DOM_ATTRIBUTE_KEY, chart.id);\n  enableConnect(chart);\n  return chart;\n}\n/**\n * @return {string|Array.<module:echarts~ECharts>} groupId\n */\n\n\nfunction connect(groupId) {\n  // Is array of charts\n  if (zrUtil.isArray(groupId)) {\n    var charts = groupId;\n    groupId = null; // If any chart has group\n\n    each(charts, function (chart) {\n      if (chart.group != null) {\n        groupId = chart.group;\n      }\n    });\n    groupId = groupId || 'g_' + groupIdBase++;\n    each(charts, function (chart) {\n      chart.group = groupId;\n    });\n  }\n\n  connectedGroups[groupId] = true;\n  return groupId;\n}\n/**\n * @DEPRECATED\n * @return {string} groupId\n */\n\n\nfunction disConnect(groupId) {\n  connectedGroups[groupId] = false;\n}\n/**\n * @return {string} groupId\n */\n\n\nvar disconnect = disConnect;\n/**\n * Dispose a chart instance\n * @param  {module:echarts~ECharts|HTMLDomElement|string} chart\n */\n\nfunction dispose(chart) {\n  if (typeof chart === 'string') {\n    chart = instances[chart];\n  } else if (!(chart instanceof ECharts)) {\n    // Try to treat as dom\n    chart = getInstanceByDom(chart);\n  }\n\n  if (chart instanceof ECharts && !chart.isDisposed()) {\n    chart.dispose();\n  }\n}\n/**\n * @param  {HTMLElement} dom\n * @return {echarts~ECharts}\n */\n\n\nfunction getInstanceByDom(dom) {\n  return instances[modelUtil.getAttribute(dom, DOM_ATTRIBUTE_KEY)];\n}\n/**\n * @param {string} key\n * @return {echarts~ECharts}\n */\n\n\nfunction getInstanceById(key) {\n  return instances[key];\n}\n/**\n * Register theme\n */\n\n\nfunction registerTheme(name, theme) {\n  themeStorage[name] = theme;\n}\n/**\n * Register option preprocessor\n * @param {Function} preprocessorFunc\n */\n\n\nfunction registerPreprocessor(preprocessorFunc) {\n  optionPreprocessorFuncs.push(preprocessorFunc);\n}\n/**\n * @param {number} [priority=1000]\n * @param {Object|Function} processor\n */\n\n\nfunction registerProcessor(priority, processor) {\n  normalizeRegister(dataProcessorFuncs, priority, processor, PRIORITY_PROCESSOR_FILTER);\n}\n/**\n * Register postUpdater\n * @param {Function} postUpdateFunc\n */\n\n\nfunction registerPostUpdate(postUpdateFunc) {\n  postUpdateFuncs.push(postUpdateFunc);\n}\n/**\n * Usage:\n * registerAction('someAction', 'someEvent', function () { ... });\n * registerAction('someAction', function () { ... });\n * registerAction(\n *     {type: 'someAction', event: 'someEvent', update: 'updateView'},\n *     function () { ... }\n * );\n *\n * @param {(string|Object)} actionInfo\n * @param {string} actionInfo.type\n * @param {string} [actionInfo.event]\n * @param {string} [actionInfo.update]\n * @param {string} [eventName]\n * @param {Function} action\n */\n\n\nfunction registerAction(actionInfo, eventName, action) {\n  if (typeof eventName === 'function') {\n    action = eventName;\n    eventName = '';\n  }\n\n  var actionType = isObject(actionInfo) ? actionInfo.type : [actionInfo, actionInfo = {\n    event: eventName\n  }][0]; // Event name is all lowercase\n\n  actionInfo.event = (actionInfo.event || actionType).toLowerCase();\n  eventName = actionInfo.event; // Validate action type and event name.\n\n  assert(ACTION_REG.test(actionType) && ACTION_REG.test(eventName));\n\n  if (!actions[actionType]) {\n    actions[actionType] = {\n      action: action,\n      actionInfo: actionInfo\n    };\n  }\n\n  eventActionMap[eventName] = actionType;\n}\n/**\n * @param {string} type\n * @param {*} CoordinateSystem\n */\n\n\nfunction registerCoordinateSystem(type, CoordinateSystem) {\n  CoordinateSystemManager.register(type, CoordinateSystem);\n}\n/**\n * Get dimensions of specified coordinate system.\n * @param {string} type\n * @return {Array.<string|Object>}\n */\n\n\nfunction getCoordinateSystemDimensions(type) {\n  var coordSysCreator = CoordinateSystemManager.get(type);\n\n  if (coordSysCreator) {\n    return coordSysCreator.getDimensionsInfo ? coordSysCreator.getDimensionsInfo() : coordSysCreator.dimensions.slice();\n  }\n}\n/**\n * Layout is a special stage of visual encoding\n * Most visual encoding like color are common for different chart\n * But each chart has it's own layout algorithm\n *\n * @param {number} [priority=1000]\n * @param {Function} layoutTask\n */\n\n\nfunction registerLayout(priority, layoutTask) {\n  normalizeRegister(visualFuncs, priority, layoutTask, PRIORITY_VISUAL_LAYOUT, 'layout');\n}\n/**\n * @param {number} [priority=3000]\n * @param {module:echarts/stream/Task} visualTask\n */\n\n\nfunction registerVisual(priority, visualTask) {\n  normalizeRegister(visualFuncs, priority, visualTask, PRIORITY_VISUAL_CHART, 'visual');\n}\n/**\n * @param {Object|Function} fn: {seriesType, createOnAllSeries, performRawSeries, reset}\n */\n\n\nfunction normalizeRegister(targetList, priority, fn, defaultPriority, visualType) {\n  if (isFunction(priority) || isObject(priority)) {\n    fn = priority;\n    priority = defaultPriority;\n  }\n\n  var stageHandler = Scheduler.wrapStageHandler(fn, visualType);\n  stageHandler.__prio = priority;\n  stageHandler.__raw = fn;\n  targetList.push(stageHandler);\n  return stageHandler;\n}\n/**\n * @param {string} name\n */\n\n\nfunction registerLoading(name, loadingFx) {\n  loadingEffects[name] = loadingFx;\n}\n/**\n * @param {Object} opts\n * @param {string} [superClass]\n */\n\n\nfunction extendComponentModel(opts\n/*, superClass*/\n) {\n  // var Clazz = ComponentModel;\n  // if (superClass) {\n  //     var classType = parseClassType(superClass);\n  //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\n  // }\n  return ComponentModel.extend(opts);\n}\n/**\n * @param {Object} opts\n * @param {string} [superClass]\n */\n\n\nfunction extendComponentView(opts\n/*, superClass*/\n) {\n  // var Clazz = ComponentView;\n  // if (superClass) {\n  //     var classType = parseClassType(superClass);\n  //     Clazz = ComponentView.getClass(classType.main, classType.sub, true);\n  // }\n  return ComponentView.extend(opts);\n}\n/**\n * @param {Object} opts\n * @param {string} [superClass]\n */\n\n\nfunction extendSeriesModel(opts\n/*, superClass*/\n) {\n  // var Clazz = SeriesModel;\n  // if (superClass) {\n  //     superClass = 'series.' + superClass.replace('series.', '');\n  //     var classType = parseClassType(superClass);\n  //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\n  // }\n  return SeriesModel.extend(opts);\n}\n/**\n * @param {Object} opts\n * @param {string} [superClass]\n */\n\n\nfunction extendChartView(opts\n/*, superClass*/\n) {\n  // var Clazz = ChartView;\n  // if (superClass) {\n  //     superClass = superClass.replace('series.', '');\n  //     var classType = parseClassType(superClass);\n  //     Clazz = ChartView.getClass(classType.main, true);\n  // }\n  return ChartView.extend(opts);\n}\n/**\n * ZRender need a canvas context to do measureText.\n * But in node environment canvas may be created by node-canvas.\n * So we need to specify how to create a canvas instead of using document.createElement('canvas')\n *\n * Be careful of using it in the browser.\n *\n * @param {Function} creator\n * @example\n *     var Canvas = require('canvas');\n *     var echarts = require('echarts');\n *     echarts.setCanvasCreator(function () {\n *         // Small size is enough.\n *         return new Canvas(32, 32);\n *     });\n */\n\n\nfunction setCanvasCreator(creator) {\n  zrUtil.$override('createCanvas', creator);\n}\n/**\n * @param {string} mapName\n * @param {Array.<Object>|Object|string} geoJson\n * @param {Object} [specialAreas]\n *\n * @example GeoJSON\n *     $.get('USA.json', function (geoJson) {\n *         echarts.registerMap('USA', geoJson);\n *         // Or\n *         echarts.registerMap('USA', {\n *             geoJson: geoJson,\n *             specialAreas: {}\n *         })\n *     });\n *\n *     $.get('airport.svg', function (svg) {\n *         echarts.registerMap('airport', {\n *             svg: svg\n *         }\n *     });\n *\n *     echarts.registerMap('eu', [\n *         {svg: eu-topographic.svg},\n *         {geoJSON: eu.json}\n *     ])\n */\n\n\nfunction registerMap(mapName, geoJson, specialAreas) {\n  mapDataStorage.registerMap(mapName, geoJson, specialAreas);\n}\n/**\n * @param {string} mapName\n * @return {Object}\n */\n\n\nfunction getMap(mapName) {\n  // For backward compatibility, only return the first one.\n  var records = mapDataStorage.retrieveMap(mapName);\n  return records && records[0] && {\n    geoJson: records[0].geoJSON,\n    specialAreas: records[0].specialAreas\n  };\n}\n\nregisterVisual(PRIORITY_VISUAL_GLOBAL, seriesColor);\nregisterPreprocessor(backwardCompat);\nregisterProcessor(PRIORITY_PROCESSOR_DATASTACK, dataStack);\nregisterLoading('default', loadingDefault); // Default actions\n\nregisterAction({\n  type: 'highlight',\n  event: 'highlight',\n  update: 'highlight'\n}, zrUtil.noop);\nregisterAction({\n  type: 'downplay',\n  event: 'downplay',\n  update: 'downplay'\n}, zrUtil.noop); // Default theme\n\nregisterTheme('light', lightTheme);\nregisterTheme('dark', darkTheme); // For backward compatibility, where the namespace `dataTool` will\n// be mounted on `echarts` is the extension `dataTool` is imported.\n\nvar dataTool = {};\nexports.version = version;\nexports.dependencies = dependencies;\nexports.PRIORITY = PRIORITY;\nexports.init = init;\nexports.connect = connect;\nexports.disConnect = disConnect;\nexports.disconnect = disconnect;\nexports.dispose = dispose;\nexports.getInstanceByDom = getInstanceByDom;\nexports.getInstanceById = getInstanceById;\nexports.registerTheme = registerTheme;\nexports.registerPreprocessor = registerPreprocessor;\nexports.registerProcessor = registerProcessor;\nexports.registerPostUpdate = registerPostUpdate;\nexports.registerAction = registerAction;\nexports.registerCoordinateSystem = registerCoordinateSystem;\nexports.getCoordinateSystemDimensions = getCoordinateSystemDimensions;\nexports.registerLayout = registerLayout;\nexports.registerVisual = registerVisual;\nexports.registerLoading = registerLoading;\nexports.extendComponentModel = extendComponentModel;\nexports.extendComponentView = extendComponentView;\nexports.extendSeriesModel = extendSeriesModel;\nexports.extendChartView = extendChartView;\nexports.setCanvasCreator = setCanvasCreator;\nexports.registerMap = registerMap;\nexports.getMap = getMap;\nexports.dataTool = dataTool;\nvar ___ec_export = require(\"./export\");\n(function () {\n    for (var key in ___ec_export) {\n        if (___ec_export.hasOwnProperty(key)) {\n            exports[key] = ___ec_export[key];\n        }\n    }\n})();"]},"metadata":{},"sourceType":"script"}