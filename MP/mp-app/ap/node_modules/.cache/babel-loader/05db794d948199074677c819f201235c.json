{"ast":null,"code":"var Path = require(\"./Path\"); // CompoundPath to improve performance\n\n\nvar _default = Path.extend({\n  type: 'compound',\n  shape: {\n    paths: null\n  },\n  _updatePathDirty: function _updatePathDirty() {\n    var dirtyPath = this.__dirtyPath;\n    var paths = this.shape.paths;\n\n    for (var i = 0; i < paths.length; i++) {\n      // Mark as dirty if any subpath is dirty\n      dirtyPath = dirtyPath || paths[i].__dirtyPath;\n    }\n\n    this.__dirtyPath = dirtyPath;\n    this.__dirty = this.__dirty || dirtyPath;\n  },\n  beforeBrush: function beforeBrush() {\n    this._updatePathDirty();\n\n    var paths = this.shape.paths || [];\n    var scale = this.getGlobalScale(); // Update path scale\n\n    for (var i = 0; i < paths.length; i++) {\n      if (!paths[i].path) {\n        paths[i].createPathProxy();\n      }\n\n      paths[i].path.setScale(scale[0], scale[1], paths[i].segmentIgnoreThreshold);\n    }\n  },\n  buildPath: function buildPath(ctx, shape) {\n    var paths = shape.paths || [];\n\n    for (var i = 0; i < paths.length; i++) {\n      paths[i].buildPath(ctx, paths[i].shape, true);\n    }\n  },\n  afterBrush: function afterBrush() {\n    var paths = this.shape.paths || [];\n\n    for (var i = 0; i < paths.length; i++) {\n      paths[i].__dirtyPath = false;\n    }\n  },\n  getBoundingRect: function getBoundingRect() {\n    this._updatePathDirty();\n\n    return Path.prototype.getBoundingRect.call(this);\n  }\n});\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/zrender/lib/graphic/CompoundPath.js"],"names":["Path","require","_default","extend","type","shape","paths","_updatePathDirty","dirtyPath","__dirtyPath","i","length","__dirty","beforeBrush","scale","getGlobalScale","path","createPathProxy","setScale","segmentIgnoreThreshold","buildPath","ctx","afterBrush","getBoundingRect","prototype","call","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;;AACA,IAAIC,QAAQ,GAAGF,IAAI,CAACG,MAAL,CAAY;AACzBC,EAAAA,IAAI,EAAE,UADmB;AAEzBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE;AADF,GAFkB;AAKzBC,EAAAA,gBAAgB,EAAE,4BAAY;AAC5B,QAAIC,SAAS,GAAG,KAAKC,WAArB;AACA,QAAIH,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAvB;;AAEA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC;AACAF,MAAAA,SAAS,GAAGA,SAAS,IAAIF,KAAK,CAACI,CAAD,CAAL,CAASD,WAAlC;AACD;;AAED,SAAKA,WAAL,GAAmBD,SAAnB;AACA,SAAKI,OAAL,GAAe,KAAKA,OAAL,IAAgBJ,SAA/B;AACD,GAhBwB;AAiBzBK,EAAAA,WAAW,EAAE,uBAAY;AACvB,SAAKN,gBAAL;;AAEA,QAAID,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAX,IAAoB,EAAhC;AACA,QAAIQ,KAAK,GAAG,KAAKC,cAAL,EAAZ,CAJuB,CAIY;;AAEnC,SAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,UAAI,CAACJ,KAAK,CAACI,CAAD,CAAL,CAASM,IAAd,EAAoB;AAClBV,QAAAA,KAAK,CAACI,CAAD,CAAL,CAASO,eAAT;AACD;;AAEDX,MAAAA,KAAK,CAACI,CAAD,CAAL,CAASM,IAAT,CAAcE,QAAd,CAAuBJ,KAAK,CAAC,CAAD,CAA5B,EAAiCA,KAAK,CAAC,CAAD,CAAtC,EAA2CR,KAAK,CAACI,CAAD,CAAL,CAASS,sBAApD;AACD;AACF,GA9BwB;AA+BzBC,EAAAA,SAAS,EAAE,mBAAUC,GAAV,EAAehB,KAAf,EAAsB;AAC/B,QAAIC,KAAK,GAAGD,KAAK,CAACC,KAAN,IAAe,EAA3B;;AAEA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCJ,MAAAA,KAAK,CAACI,CAAD,CAAL,CAASU,SAAT,CAAmBC,GAAnB,EAAwBf,KAAK,CAACI,CAAD,CAAL,CAASL,KAAjC,EAAwC,IAAxC;AACD;AACF,GArCwB;AAsCzBiB,EAAAA,UAAU,EAAE,sBAAY;AACtB,QAAIhB,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAX,IAAoB,EAAhC;;AAEA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCJ,MAAAA,KAAK,CAACI,CAAD,CAAL,CAASD,WAAT,GAAuB,KAAvB;AACD;AACF,GA5CwB;AA6CzBc,EAAAA,eAAe,EAAE,2BAAY;AAC3B,SAAKhB,gBAAL;;AAEA,WAAOP,IAAI,CAACwB,SAAL,CAAeD,eAAf,CAA+BE,IAA/B,CAAoC,IAApC,CAAP;AACD;AAjDwB,CAAZ,CAAf;;AAoDAC,MAAM,CAACC,OAAP,GAAiBzB,QAAjB","sourcesContent":["var Path = require(\"./Path\");\n\n// CompoundPath to improve performance\nvar _default = Path.extend({\n  type: 'compound',\n  shape: {\n    paths: null\n  },\n  _updatePathDirty: function () {\n    var dirtyPath = this.__dirtyPath;\n    var paths = this.shape.paths;\n\n    for (var i = 0; i < paths.length; i++) {\n      // Mark as dirty if any subpath is dirty\n      dirtyPath = dirtyPath || paths[i].__dirtyPath;\n    }\n\n    this.__dirtyPath = dirtyPath;\n    this.__dirty = this.__dirty || dirtyPath;\n  },\n  beforeBrush: function () {\n    this._updatePathDirty();\n\n    var paths = this.shape.paths || [];\n    var scale = this.getGlobalScale(); // Update path scale\n\n    for (var i = 0; i < paths.length; i++) {\n      if (!paths[i].path) {\n        paths[i].createPathProxy();\n      }\n\n      paths[i].path.setScale(scale[0], scale[1], paths[i].segmentIgnoreThreshold);\n    }\n  },\n  buildPath: function (ctx, shape) {\n    var paths = shape.paths || [];\n\n    for (var i = 0; i < paths.length; i++) {\n      paths[i].buildPath(ctx, paths[i].shape, true);\n    }\n  },\n  afterBrush: function () {\n    var paths = this.shape.paths || [];\n\n    for (var i = 0; i < paths.length; i++) {\n      paths[i].__dirtyPath = false;\n    }\n  },\n  getBoundingRect: function () {\n    this._updatePathDirty();\n\n    return Path.prototype.getBoundingRect.call(this);\n  }\n});\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}