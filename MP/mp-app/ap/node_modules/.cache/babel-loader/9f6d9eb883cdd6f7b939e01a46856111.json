{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar _model = require(\"../../util/model\");\n\nvar makeInner = _model.makeInner;\nvar getDataItemValue = _model.getDataItemValue;\n\nvar _util = require(\"zrender/lib/core/util\");\n\nvar createHashMap = _util.createHashMap;\nvar each = _util.each;\nvar map = _util.map;\nvar isArray = _util.isArray;\nvar isString = _util.isString;\nvar isObject = _util.isObject;\nvar isTypedArray = _util.isTypedArray;\nvar isArrayLike = _util.isArrayLike;\nvar extend = _util.extend;\nvar assert = _util.assert;\n\nvar Source = require(\"../Source\");\n\nvar _sourceType = require(\"./sourceType\");\n\nvar SOURCE_FORMAT_ORIGINAL = _sourceType.SOURCE_FORMAT_ORIGINAL;\nvar SOURCE_FORMAT_ARRAY_ROWS = _sourceType.SOURCE_FORMAT_ARRAY_ROWS;\nvar SOURCE_FORMAT_OBJECT_ROWS = _sourceType.SOURCE_FORMAT_OBJECT_ROWS;\nvar SOURCE_FORMAT_KEYED_COLUMNS = _sourceType.SOURCE_FORMAT_KEYED_COLUMNS;\nvar SOURCE_FORMAT_UNKNOWN = _sourceType.SOURCE_FORMAT_UNKNOWN;\nvar SOURCE_FORMAT_TYPED_ARRAY = _sourceType.SOURCE_FORMAT_TYPED_ARRAY;\nvar SERIES_LAYOUT_BY_ROW = _sourceType.SERIES_LAYOUT_BY_ROW;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// The result of `guessOrdinal`.\n\nvar BE_ORDINAL = {\n  Must: 1,\n  // Encounter string but not '-' and not number-like.\n  Might: 2,\n  // Encounter string but number-like.\n  Not: 3 // Other cases\n\n};\nvar inner = makeInner();\n/**\n * @see {module:echarts/data/Source}\n * @param {module:echarts/component/dataset/DatasetModel} datasetModel\n * @return {string} sourceFormat\n */\n\nfunction detectSourceFormat(datasetModel) {\n  var data = datasetModel.option.source;\n  var sourceFormat = SOURCE_FORMAT_UNKNOWN;\n\n  if (isTypedArray(data)) {\n    sourceFormat = SOURCE_FORMAT_TYPED_ARRAY;\n  } else if (isArray(data)) {\n    // FIXME Whether tolerate null in top level array?\n    if (data.length === 0) {\n      sourceFormat = SOURCE_FORMAT_ARRAY_ROWS;\n    }\n\n    for (var i = 0, len = data.length; i < len; i++) {\n      var item = data[i];\n\n      if (item == null) {\n        continue;\n      } else if (isArray(item)) {\n        sourceFormat = SOURCE_FORMAT_ARRAY_ROWS;\n        break;\n      } else if (isObject(item)) {\n        sourceFormat = SOURCE_FORMAT_OBJECT_ROWS;\n        break;\n      }\n    }\n  } else if (isObject(data)) {\n    for (var key in data) {\n      if (data.hasOwnProperty(key) && isArrayLike(data[key])) {\n        sourceFormat = SOURCE_FORMAT_KEYED_COLUMNS;\n        break;\n      }\n    }\n  } else if (data != null) {\n    throw new Error('Invalid data');\n  }\n\n  inner(datasetModel).sourceFormat = sourceFormat;\n}\n/**\n * [Scenarios]:\n * (1) Provide source data directly:\n *     series: {\n *         encode: {...},\n *         dimensions: [...]\n *         seriesLayoutBy: 'row',\n *         data: [[...]]\n *     }\n * (2) Refer to datasetModel.\n *     series: [{\n *         encode: {...}\n *         // Ignore datasetIndex means `datasetIndex: 0`\n *         // and the dimensions defination in dataset is used\n *     }, {\n *         encode: {...},\n *         seriesLayoutBy: 'column',\n *         datasetIndex: 1\n *     }]\n *\n * Get data from series itself or datset.\n * @return {module:echarts/data/Source} source\n */\n\n\nfunction getSource(seriesModel) {\n  return inner(seriesModel).source;\n}\n/**\n * MUST be called before mergeOption of all series.\n * @param {module:echarts/model/Global} ecModel\n */\n\n\nfunction resetSourceDefaulter(ecModel) {\n  // `datasetMap` is used to make default encode.\n  inner(ecModel).datasetMap = createHashMap();\n}\n/**\n * [Caution]:\n * MUST be called after series option merged and\n * before \"series.getInitailData()\" called.\n *\n * [The rule of making default encode]:\n * Category axis (if exists) alway map to the first dimension.\n * Each other axis occupies a subsequent dimension.\n *\n * [Why make default encode]:\n * Simplify the typing of encode in option, avoiding the case like that:\n * series: [{encode: {x: 0, y: 1}}, {encode: {x: 0, y: 2}}, {encode: {x: 0, y: 3}}],\n * where the \"y\" have to be manually typed as \"1, 2, 3, ...\".\n *\n * @param {module:echarts/model/Series} seriesModel\n */\n\n\nfunction prepareSource(seriesModel) {\n  var seriesOption = seriesModel.option;\n  var data = seriesOption.data;\n  var sourceFormat = isTypedArray(data) ? SOURCE_FORMAT_TYPED_ARRAY : SOURCE_FORMAT_ORIGINAL;\n  var fromDataset = false;\n  var seriesLayoutBy = seriesOption.seriesLayoutBy;\n  var sourceHeader = seriesOption.sourceHeader;\n  var dimensionsDefine = seriesOption.dimensions;\n  var datasetModel = getDatasetModel(seriesModel);\n\n  if (datasetModel) {\n    var datasetOption = datasetModel.option;\n    data = datasetOption.source;\n    sourceFormat = inner(datasetModel).sourceFormat;\n    fromDataset = true; // These settings from series has higher priority.\n\n    seriesLayoutBy = seriesLayoutBy || datasetOption.seriesLayoutBy;\n    sourceHeader == null && (sourceHeader = datasetOption.sourceHeader);\n    dimensionsDefine = dimensionsDefine || datasetOption.dimensions;\n  }\n\n  var completeResult = completeBySourceData(data, sourceFormat, seriesLayoutBy, sourceHeader, dimensionsDefine);\n  inner(seriesModel).source = new Source({\n    data: data,\n    fromDataset: fromDataset,\n    seriesLayoutBy: seriesLayoutBy,\n    sourceFormat: sourceFormat,\n    dimensionsDefine: completeResult.dimensionsDefine,\n    startIndex: completeResult.startIndex,\n    dimensionsDetectCount: completeResult.dimensionsDetectCount,\n    // Note: dataset option does not have `encode`.\n    encodeDefine: seriesOption.encode\n  });\n} // return {startIndex, dimensionsDefine, dimensionsCount}\n\n\nfunction completeBySourceData(data, sourceFormat, seriesLayoutBy, sourceHeader, dimensionsDefine) {\n  if (!data) {\n    return {\n      dimensionsDefine: normalizeDimensionsDefine(dimensionsDefine)\n    };\n  }\n\n  var dimensionsDetectCount;\n  var startIndex;\n\n  if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS) {\n    // Rule: Most of the first line are string: it is header.\n    // Caution: consider a line with 5 string and 1 number,\n    // it still can not be sure it is a head, because the\n    // 5 string may be 5 values of category columns.\n    if (sourceHeader === 'auto' || sourceHeader == null) {\n      arrayRowsTravelFirst(function (val) {\n        // '-' is regarded as null/undefined.\n        if (val != null && val !== '-') {\n          if (isString(val)) {\n            startIndex == null && (startIndex = 1);\n          } else {\n            startIndex = 0;\n          }\n        } // 10 is an experience number, avoid long loop.\n\n      }, seriesLayoutBy, data, 10);\n    } else {\n      startIndex = sourceHeader ? 1 : 0;\n    }\n\n    if (!dimensionsDefine && startIndex === 1) {\n      dimensionsDefine = [];\n      arrayRowsTravelFirst(function (val, index) {\n        dimensionsDefine[index] = val != null ? val : '';\n      }, seriesLayoutBy, data);\n    }\n\n    dimensionsDetectCount = dimensionsDefine ? dimensionsDefine.length : seriesLayoutBy === SERIES_LAYOUT_BY_ROW ? data.length : data[0] ? data[0].length : null;\n  } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS) {\n    if (!dimensionsDefine) {\n      dimensionsDefine = objectRowsCollectDimensions(data);\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {\n    if (!dimensionsDefine) {\n      dimensionsDefine = [];\n      each(data, function (colArr, key) {\n        dimensionsDefine.push(key);\n      });\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL) {\n    var value0 = getDataItemValue(data[0]);\n    dimensionsDetectCount = isArray(value0) && value0.length || 1;\n  } else if (sourceFormat === SOURCE_FORMAT_TYPED_ARRAY) {}\n\n  return {\n    startIndex: startIndex,\n    dimensionsDefine: normalizeDimensionsDefine(dimensionsDefine),\n    dimensionsDetectCount: dimensionsDetectCount\n  };\n} // Consider dimensions defined like ['A', 'price', 'B', 'price', 'C', 'price'],\n// which is reasonable. But dimension name is duplicated.\n// Returns undefined or an array contains only object without null/undefiend or string.\n\n\nfunction normalizeDimensionsDefine(dimensionsDefine) {\n  if (!dimensionsDefine) {\n    // The meaning of null/undefined is different from empty array.\n    return;\n  }\n\n  var nameMap = createHashMap();\n  return map(dimensionsDefine, function (item, index) {\n    item = extend({}, isObject(item) ? item : {\n      name: item\n    }); // User can set null in dimensions.\n    // We dont auto specify name, othewise a given name may\n    // cause it be refered unexpectedly.\n\n    if (item.name == null) {\n      return item;\n    } // Also consider number form like 2012.\n\n\n    item.name += ''; // User may also specify displayName.\n    // displayName will always exists except user not\n    // specified or dim name is not specified or detected.\n    // (A auto generated dim name will not be used as\n    // displayName).\n\n    if (item.displayName == null) {\n      item.displayName = item.name;\n    }\n\n    var exist = nameMap.get(item.name);\n\n    if (!exist) {\n      nameMap.set(item.name, {\n        count: 1\n      });\n    } else {\n      item.name += '-' + exist.count++;\n    }\n\n    return item;\n  });\n}\n\nfunction arrayRowsTravelFirst(cb, seriesLayoutBy, data, maxLoop) {\n  maxLoop == null && (maxLoop = Infinity);\n\n  if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW) {\n    for (var i = 0; i < data.length && i < maxLoop; i++) {\n      cb(data[i] ? data[i][0] : null, i);\n    }\n  } else {\n    var value0 = data[0] || [];\n\n    for (var i = 0; i < value0.length && i < maxLoop; i++) {\n      cb(value0[i], i);\n    }\n  }\n}\n\nfunction objectRowsCollectDimensions(data) {\n  var firstIndex = 0;\n  var obj;\n\n  while (firstIndex < data.length && !(obj = data[firstIndex++])) {} // jshint ignore: line\n\n\n  if (obj) {\n    var dimensions = [];\n    each(obj, function (value, key) {\n      dimensions.push(key);\n    });\n    return dimensions;\n  }\n}\n/**\n * [The strategy of the arrengment of data dimensions for dataset]:\n * \"value way\": all axes are non-category axes. So series one by one take\n *     several (the number is coordSysDims.length) dimensions from dataset.\n *     The result of data arrengment of data dimensions like:\n *     | ser0_x | ser0_y | ser1_x | ser1_y | ser2_x | ser2_y |\n * \"category way\": at least one axis is category axis. So the the first data\n *     dimension is always mapped to the first category axis and shared by\n *     all of the series. The other data dimensions are taken by series like\n *     \"value way\" does.\n *     The result of data arrengment of data dimensions like:\n *     | ser_shared_x | ser0_y | ser1_y | ser2_y |\n *\n * @param {Array.<Object|string>} coordDimensions [{name: <string>, type: <string>, dimsDef: <Array>}, ...]\n * @param {module:model/Series} seriesModel\n * @param {module:data/Source} source\n * @return {Object} encode Never be `null/undefined`.\n */\n\n\nfunction makeSeriesEncodeForAxisCoordSys(coordDimensions, seriesModel, source) {\n  var encode = {};\n  var datasetModel = getDatasetModel(seriesModel); // Currently only make default when using dataset, util more reqirements occur.\n\n  if (!datasetModel || !coordDimensions) {\n    return encode;\n  }\n\n  var encodeItemName = [];\n  var encodeSeriesName = [];\n  var ecModel = seriesModel.ecModel;\n  var datasetMap = inner(ecModel).datasetMap;\n  var key = datasetModel.uid + '_' + source.seriesLayoutBy;\n  var baseCategoryDimIndex;\n  var categoryWayValueDimStart;\n  coordDimensions = coordDimensions.slice();\n  each(coordDimensions, function (coordDimInfo, coordDimIdx) {\n    !isObject(coordDimInfo) && (coordDimensions[coordDimIdx] = {\n      name: coordDimInfo\n    });\n\n    if (coordDimInfo.type === 'ordinal' && baseCategoryDimIndex == null) {\n      baseCategoryDimIndex = coordDimIdx;\n      categoryWayValueDimStart = getDataDimCountOnCoordDim(coordDimensions[coordDimIdx]);\n    }\n\n    encode[coordDimInfo.name] = [];\n  });\n  var datasetRecord = datasetMap.get(key) || datasetMap.set(key, {\n    categoryWayDim: categoryWayValueDimStart,\n    valueWayDim: 0\n  }); // TODO\n  // Auto detect first time axis and do arrangement.\n\n  each(coordDimensions, function (coordDimInfo, coordDimIdx) {\n    var coordDimName = coordDimInfo.name;\n    var count = getDataDimCountOnCoordDim(coordDimInfo); // In value way.\n\n    if (baseCategoryDimIndex == null) {\n      var start = datasetRecord.valueWayDim;\n      pushDim(encode[coordDimName], start, count);\n      pushDim(encodeSeriesName, start, count);\n      datasetRecord.valueWayDim += count; // ??? TODO give a better default series name rule?\n      // especially when encode x y specified.\n      // consider: when mutiple series share one dimension\n      // category axis, series name should better use\n      // the other dimsion name. On the other hand, use\n      // both dimensions name.\n    } // In category way, the first category axis.\n    else if (baseCategoryDimIndex === coordDimIdx) {\n        pushDim(encode[coordDimName], 0, count);\n        pushDim(encodeItemName, 0, count);\n      } // In category way, the other axis.\n      else {\n          var start = datasetRecord.categoryWayDim;\n          pushDim(encode[coordDimName], start, count);\n          pushDim(encodeSeriesName, start, count);\n          datasetRecord.categoryWayDim += count;\n        }\n  });\n\n  function pushDim(dimIdxArr, idxFrom, idxCount) {\n    for (var i = 0; i < idxCount; i++) {\n      dimIdxArr.push(idxFrom + i);\n    }\n  }\n\n  function getDataDimCountOnCoordDim(coordDimInfo) {\n    var dimsDef = coordDimInfo.dimsDef;\n    return dimsDef ? dimsDef.length : 1;\n  }\n\n  encodeItemName.length && (encode.itemName = encodeItemName);\n  encodeSeriesName.length && (encode.seriesName = encodeSeriesName);\n  return encode;\n}\n/**\n * Work for data like [{name: ..., value: ...}, ...].\n *\n * @param {module:model/Series} seriesModel\n * @param {module:data/Source} source\n * @return {Object} encode Never be `null/undefined`.\n */\n\n\nfunction makeSeriesEncodeForNameBased(seriesModel, source, dimCount) {\n  var encode = {};\n  var datasetModel = getDatasetModel(seriesModel); // Currently only make default when using dataset, util more reqirements occur.\n\n  if (!datasetModel) {\n    return encode;\n  }\n\n  var sourceFormat = source.sourceFormat;\n  var dimensionsDefine = source.dimensionsDefine;\n  var potentialNameDimIndex;\n\n  if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS || sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {\n    each(dimensionsDefine, function (dim, idx) {\n      if ((isObject(dim) ? dim.name : dim) === 'name') {\n        potentialNameDimIndex = idx;\n      }\n    });\n  } // idxResult: {v, n}.\n\n\n  var idxResult = function () {\n    var idxRes0 = {};\n    var idxRes1 = {};\n    var guessRecords = []; // 5 is an experience value.\n\n    for (var i = 0, len = Math.min(5, dimCount); i < len; i++) {\n      var guessResult = doGuessOrdinal(source.data, sourceFormat, source.seriesLayoutBy, dimensionsDefine, source.startIndex, i);\n      guessRecords.push(guessResult);\n      var isPureNumber = guessResult === BE_ORDINAL.Not; // [Strategy of idxRes0]: find the first BE_ORDINAL.Not as the value dim,\n      // and then find a name dim with the priority:\n      // \"BE_ORDINAL.Might|BE_ORDINAL.Must\" > \"other dim\" > \"the value dim itself\".\n\n      if (isPureNumber && idxRes0.v == null && i !== potentialNameDimIndex) {\n        idxRes0.v = i;\n      }\n\n      if (idxRes0.n == null || idxRes0.n === idxRes0.v || !isPureNumber && guessRecords[idxRes0.n] === BE_ORDINAL.Not) {\n        idxRes0.n = i;\n      }\n\n      if (fulfilled(idxRes0) && guessRecords[idxRes0.n] !== BE_ORDINAL.Not) {\n        return idxRes0;\n      } // [Strategy of idxRes1]: if idxRes0 not satisfied (that is, no BE_ORDINAL.Not),\n      // find the first BE_ORDINAL.Might as the value dim,\n      // and then find a name dim with the priority:\n      // \"other dim\" > \"the value dim itself\".\n      // That is for backward compat: number-like (e.g., `'3'`, `'55'`) can be\n      // treated as number.\n\n\n      if (!isPureNumber) {\n        if (guessResult === BE_ORDINAL.Might && idxRes1.v == null && i !== potentialNameDimIndex) {\n          idxRes1.v = i;\n        }\n\n        if (idxRes1.n == null || idxRes1.n === idxRes1.v) {\n          idxRes1.n = i;\n        }\n      }\n    }\n\n    function fulfilled(idxResult) {\n      return idxResult.v != null && idxResult.n != null;\n    }\n\n    return fulfilled(idxRes0) ? idxRes0 : fulfilled(idxRes1) ? idxRes1 : null;\n  }();\n\n  if (idxResult) {\n    encode.value = idxResult.v; // `potentialNameDimIndex` has highest priority.\n\n    var nameDimIndex = potentialNameDimIndex != null ? potentialNameDimIndex : idxResult.n; // By default, label use itemName in charts.\n    // So we dont set encodeLabel here.\n\n    encode.itemName = [nameDimIndex];\n    encode.seriesName = [nameDimIndex];\n  }\n\n  return encode;\n}\n/**\n * If return null/undefined, indicate that should not use datasetModel.\n */\n\n\nfunction getDatasetModel(seriesModel) {\n  var option = seriesModel.option; // Caution: consider the scenario:\n  // A dataset is declared and a series is not expected to use the dataset,\n  // and at the beginning `setOption({series: { noData })` (just prepare other\n  // option but no data), then `setOption({series: {data: [...]}); In this case,\n  // the user should set an empty array to avoid that dataset is used by default.\n\n  var thisData = option.data;\n\n  if (!thisData) {\n    return seriesModel.ecModel.getComponent('dataset', option.datasetIndex || 0);\n  }\n}\n/**\n * The rule should not be complex, otherwise user might not\n * be able to known where the data is wrong.\n * The code is ugly, but how to make it neat?\n *\n * @param {module:echars/data/Source} source\n * @param {number} dimIndex\n * @return {BE_ORDINAL} guess result.\n */\n\n\nfunction guessOrdinal(source, dimIndex) {\n  return doGuessOrdinal(source.data, source.sourceFormat, source.seriesLayoutBy, source.dimensionsDefine, source.startIndex, dimIndex);\n} // dimIndex may be overflow source data.\n// return {BE_ORDINAL}\n\n\nfunction doGuessOrdinal(data, sourceFormat, seriesLayoutBy, dimensionsDefine, startIndex, dimIndex) {\n  var result; // Experience value.\n\n  var maxLoop = 5;\n\n  if (isTypedArray(data)) {\n    return BE_ORDINAL.Not;\n  } // When sourceType is 'objectRows' or 'keyedColumns', dimensionsDefine\n  // always exists in source.\n\n\n  var dimName;\n  var dimType;\n\n  if (dimensionsDefine) {\n    var dimDefItem = dimensionsDefine[dimIndex];\n\n    if (isObject(dimDefItem)) {\n      dimName = dimDefItem.name;\n      dimType = dimDefItem.type;\n    } else if (isString(dimDefItem)) {\n      dimName = dimDefItem;\n    }\n  }\n\n  if (dimType != null) {\n    return dimType === 'ordinal' ? BE_ORDINAL.Must : BE_ORDINAL.Not;\n  }\n\n  if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS) {\n    if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW) {\n      var sample = data[dimIndex];\n\n      for (var i = 0; i < (sample || []).length && i < maxLoop; i++) {\n        if ((result = detectValue(sample[startIndex + i])) != null) {\n          return result;\n        }\n      }\n    } else {\n      for (var i = 0; i < data.length && i < maxLoop; i++) {\n        var row = data[startIndex + i];\n\n        if (row && (result = detectValue(row[dimIndex])) != null) {\n          return result;\n        }\n      }\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS) {\n    if (!dimName) {\n      return BE_ORDINAL.Not;\n    }\n\n    for (var i = 0; i < data.length && i < maxLoop; i++) {\n      var item = data[i];\n\n      if (item && (result = detectValue(item[dimName])) != null) {\n        return result;\n      }\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {\n    if (!dimName) {\n      return BE_ORDINAL.Not;\n    }\n\n    var sample = data[dimName];\n\n    if (!sample || isTypedArray(sample)) {\n      return BE_ORDINAL.Not;\n    }\n\n    for (var i = 0; i < sample.length && i < maxLoop; i++) {\n      if ((result = detectValue(sample[i])) != null) {\n        return result;\n      }\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL) {\n    for (var i = 0; i < data.length && i < maxLoop; i++) {\n      var item = data[i];\n      var val = getDataItemValue(item);\n\n      if (!isArray(val)) {\n        return BE_ORDINAL.Not;\n      }\n\n      if ((result = detectValue(val[dimIndex])) != null) {\n        return result;\n      }\n    }\n  }\n\n  function detectValue(val) {\n    var beStr = isString(val); // Consider usage convenience, '1', '2' will be treated as \"number\".\n    // `isFinit('')` get `true`.\n\n    if (val != null && isFinite(val) && val !== '') {\n      return beStr ? BE_ORDINAL.Might : BE_ORDINAL.Not;\n    } else if (beStr && val !== '-') {\n      return BE_ORDINAL.Must;\n    }\n  }\n\n  return BE_ORDINAL.Not;\n}\n\nexports.BE_ORDINAL = BE_ORDINAL;\nexports.detectSourceFormat = detectSourceFormat;\nexports.getSource = getSource;\nexports.resetSourceDefaulter = resetSourceDefaulter;\nexports.prepareSource = prepareSource;\nexports.makeSeriesEncodeForAxisCoordSys = makeSeriesEncodeForAxisCoordSys;\nexports.makeSeriesEncodeForNameBased = makeSeriesEncodeForNameBased;\nexports.guessOrdinal = guessOrdinal;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/data/helper/sourceHelper.js"],"names":["_config","require","__DEV__","_model","makeInner","getDataItemValue","_util","createHashMap","each","map","isArray","isString","isObject","isTypedArray","isArrayLike","extend","assert","Source","_sourceType","SOURCE_FORMAT_ORIGINAL","SOURCE_FORMAT_ARRAY_ROWS","SOURCE_FORMAT_OBJECT_ROWS","SOURCE_FORMAT_KEYED_COLUMNS","SOURCE_FORMAT_UNKNOWN","SOURCE_FORMAT_TYPED_ARRAY","SERIES_LAYOUT_BY_ROW","BE_ORDINAL","Must","Might","Not","inner","detectSourceFormat","datasetModel","data","option","source","sourceFormat","length","i","len","item","key","hasOwnProperty","Error","getSource","seriesModel","resetSourceDefaulter","ecModel","datasetMap","prepareSource","seriesOption","fromDataset","seriesLayoutBy","sourceHeader","dimensionsDefine","dimensions","getDatasetModel","datasetOption","completeResult","completeBySourceData","startIndex","dimensionsDetectCount","encodeDefine","encode","normalizeDimensionsDefine","arrayRowsTravelFirst","val","index","objectRowsCollectDimensions","colArr","push","value0","nameMap","name","displayName","exist","get","set","count","cb","maxLoop","Infinity","firstIndex","obj","value","makeSeriesEncodeForAxisCoordSys","coordDimensions","encodeItemName","encodeSeriesName","uid","baseCategoryDimIndex","categoryWayValueDimStart","slice","coordDimInfo","coordDimIdx","type","getDataDimCountOnCoordDim","datasetRecord","categoryWayDim","valueWayDim","coordDimName","start","pushDim","dimIdxArr","idxFrom","idxCount","dimsDef","itemName","seriesName","makeSeriesEncodeForNameBased","dimCount","potentialNameDimIndex","dim","idx","idxResult","idxRes0","idxRes1","guessRecords","Math","min","guessResult","doGuessOrdinal","isPureNumber","v","n","fulfilled","nameDimIndex","thisData","getComponent","datasetIndex","guessOrdinal","dimIndex","result","dimName","dimType","dimDefItem","sample","detectValue","row","beStr","isFinite","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar _model = require(\"../../util/model\");\n\nvar makeInner = _model.makeInner;\nvar getDataItemValue = _model.getDataItemValue;\n\nvar _util = require(\"zrender/lib/core/util\");\n\nvar createHashMap = _util.createHashMap;\nvar each = _util.each;\nvar map = _util.map;\nvar isArray = _util.isArray;\nvar isString = _util.isString;\nvar isObject = _util.isObject;\nvar isTypedArray = _util.isTypedArray;\nvar isArrayLike = _util.isArrayLike;\nvar extend = _util.extend;\nvar assert = _util.assert;\n\nvar Source = require(\"../Source\");\n\nvar _sourceType = require(\"./sourceType\");\n\nvar SOURCE_FORMAT_ORIGINAL = _sourceType.SOURCE_FORMAT_ORIGINAL;\nvar SOURCE_FORMAT_ARRAY_ROWS = _sourceType.SOURCE_FORMAT_ARRAY_ROWS;\nvar SOURCE_FORMAT_OBJECT_ROWS = _sourceType.SOURCE_FORMAT_OBJECT_ROWS;\nvar SOURCE_FORMAT_KEYED_COLUMNS = _sourceType.SOURCE_FORMAT_KEYED_COLUMNS;\nvar SOURCE_FORMAT_UNKNOWN = _sourceType.SOURCE_FORMAT_UNKNOWN;\nvar SOURCE_FORMAT_TYPED_ARRAY = _sourceType.SOURCE_FORMAT_TYPED_ARRAY;\nvar SERIES_LAYOUT_BY_ROW = _sourceType.SERIES_LAYOUT_BY_ROW;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// The result of `guessOrdinal`.\nvar BE_ORDINAL = {\n  Must: 1,\n  // Encounter string but not '-' and not number-like.\n  Might: 2,\n  // Encounter string but number-like.\n  Not: 3 // Other cases\n\n};\nvar inner = makeInner();\n/**\n * @see {module:echarts/data/Source}\n * @param {module:echarts/component/dataset/DatasetModel} datasetModel\n * @return {string} sourceFormat\n */\n\nfunction detectSourceFormat(datasetModel) {\n  var data = datasetModel.option.source;\n  var sourceFormat = SOURCE_FORMAT_UNKNOWN;\n\n  if (isTypedArray(data)) {\n    sourceFormat = SOURCE_FORMAT_TYPED_ARRAY;\n  } else if (isArray(data)) {\n    // FIXME Whether tolerate null in top level array?\n    if (data.length === 0) {\n      sourceFormat = SOURCE_FORMAT_ARRAY_ROWS;\n    }\n\n    for (var i = 0, len = data.length; i < len; i++) {\n      var item = data[i];\n\n      if (item == null) {\n        continue;\n      } else if (isArray(item)) {\n        sourceFormat = SOURCE_FORMAT_ARRAY_ROWS;\n        break;\n      } else if (isObject(item)) {\n        sourceFormat = SOURCE_FORMAT_OBJECT_ROWS;\n        break;\n      }\n    }\n  } else if (isObject(data)) {\n    for (var key in data) {\n      if (data.hasOwnProperty(key) && isArrayLike(data[key])) {\n        sourceFormat = SOURCE_FORMAT_KEYED_COLUMNS;\n        break;\n      }\n    }\n  } else if (data != null) {\n    throw new Error('Invalid data');\n  }\n\n  inner(datasetModel).sourceFormat = sourceFormat;\n}\n/**\n * [Scenarios]:\n * (1) Provide source data directly:\n *     series: {\n *         encode: {...},\n *         dimensions: [...]\n *         seriesLayoutBy: 'row',\n *         data: [[...]]\n *     }\n * (2) Refer to datasetModel.\n *     series: [{\n *         encode: {...}\n *         // Ignore datasetIndex means `datasetIndex: 0`\n *         // and the dimensions defination in dataset is used\n *     }, {\n *         encode: {...},\n *         seriesLayoutBy: 'column',\n *         datasetIndex: 1\n *     }]\n *\n * Get data from series itself or datset.\n * @return {module:echarts/data/Source} source\n */\n\n\nfunction getSource(seriesModel) {\n  return inner(seriesModel).source;\n}\n/**\n * MUST be called before mergeOption of all series.\n * @param {module:echarts/model/Global} ecModel\n */\n\n\nfunction resetSourceDefaulter(ecModel) {\n  // `datasetMap` is used to make default encode.\n  inner(ecModel).datasetMap = createHashMap();\n}\n/**\n * [Caution]:\n * MUST be called after series option merged and\n * before \"series.getInitailData()\" called.\n *\n * [The rule of making default encode]:\n * Category axis (if exists) alway map to the first dimension.\n * Each other axis occupies a subsequent dimension.\n *\n * [Why make default encode]:\n * Simplify the typing of encode in option, avoiding the case like that:\n * series: [{encode: {x: 0, y: 1}}, {encode: {x: 0, y: 2}}, {encode: {x: 0, y: 3}}],\n * where the \"y\" have to be manually typed as \"1, 2, 3, ...\".\n *\n * @param {module:echarts/model/Series} seriesModel\n */\n\n\nfunction prepareSource(seriesModel) {\n  var seriesOption = seriesModel.option;\n  var data = seriesOption.data;\n  var sourceFormat = isTypedArray(data) ? SOURCE_FORMAT_TYPED_ARRAY : SOURCE_FORMAT_ORIGINAL;\n  var fromDataset = false;\n  var seriesLayoutBy = seriesOption.seriesLayoutBy;\n  var sourceHeader = seriesOption.sourceHeader;\n  var dimensionsDefine = seriesOption.dimensions;\n  var datasetModel = getDatasetModel(seriesModel);\n\n  if (datasetModel) {\n    var datasetOption = datasetModel.option;\n    data = datasetOption.source;\n    sourceFormat = inner(datasetModel).sourceFormat;\n    fromDataset = true; // These settings from series has higher priority.\n\n    seriesLayoutBy = seriesLayoutBy || datasetOption.seriesLayoutBy;\n    sourceHeader == null && (sourceHeader = datasetOption.sourceHeader);\n    dimensionsDefine = dimensionsDefine || datasetOption.dimensions;\n  }\n\n  var completeResult = completeBySourceData(data, sourceFormat, seriesLayoutBy, sourceHeader, dimensionsDefine);\n  inner(seriesModel).source = new Source({\n    data: data,\n    fromDataset: fromDataset,\n    seriesLayoutBy: seriesLayoutBy,\n    sourceFormat: sourceFormat,\n    dimensionsDefine: completeResult.dimensionsDefine,\n    startIndex: completeResult.startIndex,\n    dimensionsDetectCount: completeResult.dimensionsDetectCount,\n    // Note: dataset option does not have `encode`.\n    encodeDefine: seriesOption.encode\n  });\n} // return {startIndex, dimensionsDefine, dimensionsCount}\n\n\nfunction completeBySourceData(data, sourceFormat, seriesLayoutBy, sourceHeader, dimensionsDefine) {\n  if (!data) {\n    return {\n      dimensionsDefine: normalizeDimensionsDefine(dimensionsDefine)\n    };\n  }\n\n  var dimensionsDetectCount;\n  var startIndex;\n\n  if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS) {\n    // Rule: Most of the first line are string: it is header.\n    // Caution: consider a line with 5 string and 1 number,\n    // it still can not be sure it is a head, because the\n    // 5 string may be 5 values of category columns.\n    if (sourceHeader === 'auto' || sourceHeader == null) {\n      arrayRowsTravelFirst(function (val) {\n        // '-' is regarded as null/undefined.\n        if (val != null && val !== '-') {\n          if (isString(val)) {\n            startIndex == null && (startIndex = 1);\n          } else {\n            startIndex = 0;\n          }\n        } // 10 is an experience number, avoid long loop.\n\n      }, seriesLayoutBy, data, 10);\n    } else {\n      startIndex = sourceHeader ? 1 : 0;\n    }\n\n    if (!dimensionsDefine && startIndex === 1) {\n      dimensionsDefine = [];\n      arrayRowsTravelFirst(function (val, index) {\n        dimensionsDefine[index] = val != null ? val : '';\n      }, seriesLayoutBy, data);\n    }\n\n    dimensionsDetectCount = dimensionsDefine ? dimensionsDefine.length : seriesLayoutBy === SERIES_LAYOUT_BY_ROW ? data.length : data[0] ? data[0].length : null;\n  } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS) {\n    if (!dimensionsDefine) {\n      dimensionsDefine = objectRowsCollectDimensions(data);\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {\n    if (!dimensionsDefine) {\n      dimensionsDefine = [];\n      each(data, function (colArr, key) {\n        dimensionsDefine.push(key);\n      });\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL) {\n    var value0 = getDataItemValue(data[0]);\n    dimensionsDetectCount = isArray(value0) && value0.length || 1;\n  } else if (sourceFormat === SOURCE_FORMAT_TYPED_ARRAY) {}\n\n  return {\n    startIndex: startIndex,\n    dimensionsDefine: normalizeDimensionsDefine(dimensionsDefine),\n    dimensionsDetectCount: dimensionsDetectCount\n  };\n} // Consider dimensions defined like ['A', 'price', 'B', 'price', 'C', 'price'],\n// which is reasonable. But dimension name is duplicated.\n// Returns undefined or an array contains only object without null/undefiend or string.\n\n\nfunction normalizeDimensionsDefine(dimensionsDefine) {\n  if (!dimensionsDefine) {\n    // The meaning of null/undefined is different from empty array.\n    return;\n  }\n\n  var nameMap = createHashMap();\n  return map(dimensionsDefine, function (item, index) {\n    item = extend({}, isObject(item) ? item : {\n      name: item\n    }); // User can set null in dimensions.\n    // We dont auto specify name, othewise a given name may\n    // cause it be refered unexpectedly.\n\n    if (item.name == null) {\n      return item;\n    } // Also consider number form like 2012.\n\n\n    item.name += ''; // User may also specify displayName.\n    // displayName will always exists except user not\n    // specified or dim name is not specified or detected.\n    // (A auto generated dim name will not be used as\n    // displayName).\n\n    if (item.displayName == null) {\n      item.displayName = item.name;\n    }\n\n    var exist = nameMap.get(item.name);\n\n    if (!exist) {\n      nameMap.set(item.name, {\n        count: 1\n      });\n    } else {\n      item.name += '-' + exist.count++;\n    }\n\n    return item;\n  });\n}\n\nfunction arrayRowsTravelFirst(cb, seriesLayoutBy, data, maxLoop) {\n  maxLoop == null && (maxLoop = Infinity);\n\n  if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW) {\n    for (var i = 0; i < data.length && i < maxLoop; i++) {\n      cb(data[i] ? data[i][0] : null, i);\n    }\n  } else {\n    var value0 = data[0] || [];\n\n    for (var i = 0; i < value0.length && i < maxLoop; i++) {\n      cb(value0[i], i);\n    }\n  }\n}\n\nfunction objectRowsCollectDimensions(data) {\n  var firstIndex = 0;\n  var obj;\n\n  while (firstIndex < data.length && !(obj = data[firstIndex++])) {} // jshint ignore: line\n\n\n  if (obj) {\n    var dimensions = [];\n    each(obj, function (value, key) {\n      dimensions.push(key);\n    });\n    return dimensions;\n  }\n}\n/**\n * [The strategy of the arrengment of data dimensions for dataset]:\n * \"value way\": all axes are non-category axes. So series one by one take\n *     several (the number is coordSysDims.length) dimensions from dataset.\n *     The result of data arrengment of data dimensions like:\n *     | ser0_x | ser0_y | ser1_x | ser1_y | ser2_x | ser2_y |\n * \"category way\": at least one axis is category axis. So the the first data\n *     dimension is always mapped to the first category axis and shared by\n *     all of the series. The other data dimensions are taken by series like\n *     \"value way\" does.\n *     The result of data arrengment of data dimensions like:\n *     | ser_shared_x | ser0_y | ser1_y | ser2_y |\n *\n * @param {Array.<Object|string>} coordDimensions [{name: <string>, type: <string>, dimsDef: <Array>}, ...]\n * @param {module:model/Series} seriesModel\n * @param {module:data/Source} source\n * @return {Object} encode Never be `null/undefined`.\n */\n\n\nfunction makeSeriesEncodeForAxisCoordSys(coordDimensions, seriesModel, source) {\n  var encode = {};\n  var datasetModel = getDatasetModel(seriesModel); // Currently only make default when using dataset, util more reqirements occur.\n\n  if (!datasetModel || !coordDimensions) {\n    return encode;\n  }\n\n  var encodeItemName = [];\n  var encodeSeriesName = [];\n  var ecModel = seriesModel.ecModel;\n  var datasetMap = inner(ecModel).datasetMap;\n  var key = datasetModel.uid + '_' + source.seriesLayoutBy;\n  var baseCategoryDimIndex;\n  var categoryWayValueDimStart;\n  coordDimensions = coordDimensions.slice();\n  each(coordDimensions, function (coordDimInfo, coordDimIdx) {\n    !isObject(coordDimInfo) && (coordDimensions[coordDimIdx] = {\n      name: coordDimInfo\n    });\n\n    if (coordDimInfo.type === 'ordinal' && baseCategoryDimIndex == null) {\n      baseCategoryDimIndex = coordDimIdx;\n      categoryWayValueDimStart = getDataDimCountOnCoordDim(coordDimensions[coordDimIdx]);\n    }\n\n    encode[coordDimInfo.name] = [];\n  });\n  var datasetRecord = datasetMap.get(key) || datasetMap.set(key, {\n    categoryWayDim: categoryWayValueDimStart,\n    valueWayDim: 0\n  }); // TODO\n  // Auto detect first time axis and do arrangement.\n\n  each(coordDimensions, function (coordDimInfo, coordDimIdx) {\n    var coordDimName = coordDimInfo.name;\n    var count = getDataDimCountOnCoordDim(coordDimInfo); // In value way.\n\n    if (baseCategoryDimIndex == null) {\n      var start = datasetRecord.valueWayDim;\n      pushDim(encode[coordDimName], start, count);\n      pushDim(encodeSeriesName, start, count);\n      datasetRecord.valueWayDim += count; // ??? TODO give a better default series name rule?\n      // especially when encode x y specified.\n      // consider: when mutiple series share one dimension\n      // category axis, series name should better use\n      // the other dimsion name. On the other hand, use\n      // both dimensions name.\n    } // In category way, the first category axis.\n    else if (baseCategoryDimIndex === coordDimIdx) {\n        pushDim(encode[coordDimName], 0, count);\n        pushDim(encodeItemName, 0, count);\n      } // In category way, the other axis.\n      else {\n          var start = datasetRecord.categoryWayDim;\n          pushDim(encode[coordDimName], start, count);\n          pushDim(encodeSeriesName, start, count);\n          datasetRecord.categoryWayDim += count;\n        }\n  });\n\n  function pushDim(dimIdxArr, idxFrom, idxCount) {\n    for (var i = 0; i < idxCount; i++) {\n      dimIdxArr.push(idxFrom + i);\n    }\n  }\n\n  function getDataDimCountOnCoordDim(coordDimInfo) {\n    var dimsDef = coordDimInfo.dimsDef;\n    return dimsDef ? dimsDef.length : 1;\n  }\n\n  encodeItemName.length && (encode.itemName = encodeItemName);\n  encodeSeriesName.length && (encode.seriesName = encodeSeriesName);\n  return encode;\n}\n/**\n * Work for data like [{name: ..., value: ...}, ...].\n *\n * @param {module:model/Series} seriesModel\n * @param {module:data/Source} source\n * @return {Object} encode Never be `null/undefined`.\n */\n\n\nfunction makeSeriesEncodeForNameBased(seriesModel, source, dimCount) {\n  var encode = {};\n  var datasetModel = getDatasetModel(seriesModel); // Currently only make default when using dataset, util more reqirements occur.\n\n  if (!datasetModel) {\n    return encode;\n  }\n\n  var sourceFormat = source.sourceFormat;\n  var dimensionsDefine = source.dimensionsDefine;\n  var potentialNameDimIndex;\n\n  if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS || sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {\n    each(dimensionsDefine, function (dim, idx) {\n      if ((isObject(dim) ? dim.name : dim) === 'name') {\n        potentialNameDimIndex = idx;\n      }\n    });\n  } // idxResult: {v, n}.\n\n\n  var idxResult = function () {\n    var idxRes0 = {};\n    var idxRes1 = {};\n    var guessRecords = []; // 5 is an experience value.\n\n    for (var i = 0, len = Math.min(5, dimCount); i < len; i++) {\n      var guessResult = doGuessOrdinal(source.data, sourceFormat, source.seriesLayoutBy, dimensionsDefine, source.startIndex, i);\n      guessRecords.push(guessResult);\n      var isPureNumber = guessResult === BE_ORDINAL.Not; // [Strategy of idxRes0]: find the first BE_ORDINAL.Not as the value dim,\n      // and then find a name dim with the priority:\n      // \"BE_ORDINAL.Might|BE_ORDINAL.Must\" > \"other dim\" > \"the value dim itself\".\n\n      if (isPureNumber && idxRes0.v == null && i !== potentialNameDimIndex) {\n        idxRes0.v = i;\n      }\n\n      if (idxRes0.n == null || idxRes0.n === idxRes0.v || !isPureNumber && guessRecords[idxRes0.n] === BE_ORDINAL.Not) {\n        idxRes0.n = i;\n      }\n\n      if (fulfilled(idxRes0) && guessRecords[idxRes0.n] !== BE_ORDINAL.Not) {\n        return idxRes0;\n      } // [Strategy of idxRes1]: if idxRes0 not satisfied (that is, no BE_ORDINAL.Not),\n      // find the first BE_ORDINAL.Might as the value dim,\n      // and then find a name dim with the priority:\n      // \"other dim\" > \"the value dim itself\".\n      // That is for backward compat: number-like (e.g., `'3'`, `'55'`) can be\n      // treated as number.\n\n\n      if (!isPureNumber) {\n        if (guessResult === BE_ORDINAL.Might && idxRes1.v == null && i !== potentialNameDimIndex) {\n          idxRes1.v = i;\n        }\n\n        if (idxRes1.n == null || idxRes1.n === idxRes1.v) {\n          idxRes1.n = i;\n        }\n      }\n    }\n\n    function fulfilled(idxResult) {\n      return idxResult.v != null && idxResult.n != null;\n    }\n\n    return fulfilled(idxRes0) ? idxRes0 : fulfilled(idxRes1) ? idxRes1 : null;\n  }();\n\n  if (idxResult) {\n    encode.value = idxResult.v; // `potentialNameDimIndex` has highest priority.\n\n    var nameDimIndex = potentialNameDimIndex != null ? potentialNameDimIndex : idxResult.n; // By default, label use itemName in charts.\n    // So we dont set encodeLabel here.\n\n    encode.itemName = [nameDimIndex];\n    encode.seriesName = [nameDimIndex];\n  }\n\n  return encode;\n}\n/**\n * If return null/undefined, indicate that should not use datasetModel.\n */\n\n\nfunction getDatasetModel(seriesModel) {\n  var option = seriesModel.option; // Caution: consider the scenario:\n  // A dataset is declared and a series is not expected to use the dataset,\n  // and at the beginning `setOption({series: { noData })` (just prepare other\n  // option but no data), then `setOption({series: {data: [...]}); In this case,\n  // the user should set an empty array to avoid that dataset is used by default.\n\n  var thisData = option.data;\n\n  if (!thisData) {\n    return seriesModel.ecModel.getComponent('dataset', option.datasetIndex || 0);\n  }\n}\n/**\n * The rule should not be complex, otherwise user might not\n * be able to known where the data is wrong.\n * The code is ugly, but how to make it neat?\n *\n * @param {module:echars/data/Source} source\n * @param {number} dimIndex\n * @return {BE_ORDINAL} guess result.\n */\n\n\nfunction guessOrdinal(source, dimIndex) {\n  return doGuessOrdinal(source.data, source.sourceFormat, source.seriesLayoutBy, source.dimensionsDefine, source.startIndex, dimIndex);\n} // dimIndex may be overflow source data.\n// return {BE_ORDINAL}\n\n\nfunction doGuessOrdinal(data, sourceFormat, seriesLayoutBy, dimensionsDefine, startIndex, dimIndex) {\n  var result; // Experience value.\n\n  var maxLoop = 5;\n\n  if (isTypedArray(data)) {\n    return BE_ORDINAL.Not;\n  } // When sourceType is 'objectRows' or 'keyedColumns', dimensionsDefine\n  // always exists in source.\n\n\n  var dimName;\n  var dimType;\n\n  if (dimensionsDefine) {\n    var dimDefItem = dimensionsDefine[dimIndex];\n\n    if (isObject(dimDefItem)) {\n      dimName = dimDefItem.name;\n      dimType = dimDefItem.type;\n    } else if (isString(dimDefItem)) {\n      dimName = dimDefItem;\n    }\n  }\n\n  if (dimType != null) {\n    return dimType === 'ordinal' ? BE_ORDINAL.Must : BE_ORDINAL.Not;\n  }\n\n  if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS) {\n    if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW) {\n      var sample = data[dimIndex];\n\n      for (var i = 0; i < (sample || []).length && i < maxLoop; i++) {\n        if ((result = detectValue(sample[startIndex + i])) != null) {\n          return result;\n        }\n      }\n    } else {\n      for (var i = 0; i < data.length && i < maxLoop; i++) {\n        var row = data[startIndex + i];\n\n        if (row && (result = detectValue(row[dimIndex])) != null) {\n          return result;\n        }\n      }\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS) {\n    if (!dimName) {\n      return BE_ORDINAL.Not;\n    }\n\n    for (var i = 0; i < data.length && i < maxLoop; i++) {\n      var item = data[i];\n\n      if (item && (result = detectValue(item[dimName])) != null) {\n        return result;\n      }\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {\n    if (!dimName) {\n      return BE_ORDINAL.Not;\n    }\n\n    var sample = data[dimName];\n\n    if (!sample || isTypedArray(sample)) {\n      return BE_ORDINAL.Not;\n    }\n\n    for (var i = 0; i < sample.length && i < maxLoop; i++) {\n      if ((result = detectValue(sample[i])) != null) {\n        return result;\n      }\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL) {\n    for (var i = 0; i < data.length && i < maxLoop; i++) {\n      var item = data[i];\n      var val = getDataItemValue(item);\n\n      if (!isArray(val)) {\n        return BE_ORDINAL.Not;\n      }\n\n      if ((result = detectValue(val[dimIndex])) != null) {\n        return result;\n      }\n    }\n  }\n\n  function detectValue(val) {\n    var beStr = isString(val); // Consider usage convenience, '1', '2' will be treated as \"number\".\n    // `isFinit('')` get `true`.\n\n    if (val != null && isFinite(val) && val !== '') {\n      return beStr ? BE_ORDINAL.Might : BE_ORDINAL.Not;\n    } else if (beStr && val !== '-') {\n      return BE_ORDINAL.Must;\n    }\n  }\n\n  return BE_ORDINAL.Not;\n}\n\nexports.BE_ORDINAL = BE_ORDINAL;\nexports.detectSourceFormat = detectSourceFormat;\nexports.getSource = getSource;\nexports.resetSourceDefaulter = resetSourceDefaulter;\nexports.prepareSource = prepareSource;\nexports.makeSeriesEncodeForAxisCoordSys = makeSeriesEncodeForAxisCoordSys;\nexports.makeSeriesEncodeForNameBased = makeSeriesEncodeForNameBased;\nexports.guessOrdinal = guessOrdinal;"]},"metadata":{},"sourceType":"script"}