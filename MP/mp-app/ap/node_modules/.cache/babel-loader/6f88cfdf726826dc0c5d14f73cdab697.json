{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Data selectable mixin for chart series.\n * To eanble data select, option of series must have `selectedMode`.\n * And each data item will use `selected` to toggle itself selected status\n */\n\n\nvar _default = {\n  /**\n   * @param {Array.<Object>} targetList [{name, value, selected}, ...]\n   *        If targetList is an array, it should like [{name: ..., value: ...}, ...].\n   *        If targetList is a \"List\", it must have coordDim: 'value' dimension and name.\n   */\n  updateSelectedMap: function updateSelectedMap(targetList) {\n    this._targetList = zrUtil.isArray(targetList) ? targetList.slice() : [];\n    this._selectTargetMap = zrUtil.reduce(targetList || [], function (targetMap, target) {\n      targetMap.set(target.name, target);\n      return targetMap;\n    }, zrUtil.createHashMap());\n  },\n\n  /**\n   * Either name or id should be passed as input here.\n   * If both of them are defined, id is used.\n   *\n   * @param {string|undefined} name name of data\n   * @param {number|undefined} id dataIndex of data\n   */\n  // PENGING If selectedMode is null ?\n  select: function select(name, id) {\n    var target = id != null ? this._targetList[id] : this._selectTargetMap.get(name);\n    var selectedMode = this.get('selectedMode');\n\n    if (selectedMode === 'single') {\n      this._selectTargetMap.each(function (target) {\n        target.selected = false;\n      });\n    }\n\n    target && (target.selected = true);\n  },\n\n  /**\n   * Either name or id should be passed as input here.\n   * If both of them are defined, id is used.\n   *\n   * @param {string|undefined} name name of data\n   * @param {number|undefined} id dataIndex of data\n   */\n  unSelect: function unSelect(name, id) {\n    var target = id != null ? this._targetList[id] : this._selectTargetMap.get(name); // var selectedMode = this.get('selectedMode');\n    // selectedMode !== 'single' && target && (target.selected = false);\n\n    target && (target.selected = false);\n  },\n\n  /**\n   * Either name or id should be passed as input here.\n   * If both of them are defined, id is used.\n   *\n   * @param {string|undefined} name name of data\n   * @param {number|undefined} id dataIndex of data\n   */\n  toggleSelected: function toggleSelected(name, id) {\n    var target = id != null ? this._targetList[id] : this._selectTargetMap.get(name);\n\n    if (target != null) {\n      this[target.selected ? 'unSelect' : 'select'](name, id);\n      return target.selected;\n    }\n  },\n\n  /**\n   * Either name or id should be passed as input here.\n   * If both of them are defined, id is used.\n   *\n   * @param {string|undefined} name name of data\n   * @param {number|undefined} id dataIndex of data\n   */\n  isSelected: function isSelected(name, id) {\n    var target = id != null ? this._targetList[id] : this._selectTargetMap.get(name);\n    return target && target.selected;\n  }\n};\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/component/helper/selectableMixin.js"],"names":["zrUtil","require","_default","updateSelectedMap","targetList","_targetList","isArray","slice","_selectTargetMap","reduce","targetMap","target","set","name","createHashMap","select","id","get","selectedMode","each","selected","unSelect","toggleSelected","isSelected","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Data selectable mixin for chart series.\n * To eanble data select, option of series must have `selectedMode`.\n * And each data item will use `selected` to toggle itself selected status\n */\nvar _default = {\n  /**\n   * @param {Array.<Object>} targetList [{name, value, selected}, ...]\n   *        If targetList is an array, it should like [{name: ..., value: ...}, ...].\n   *        If targetList is a \"List\", it must have coordDim: 'value' dimension and name.\n   */\n  updateSelectedMap: function (targetList) {\n    this._targetList = zrUtil.isArray(targetList) ? targetList.slice() : [];\n    this._selectTargetMap = zrUtil.reduce(targetList || [], function (targetMap, target) {\n      targetMap.set(target.name, target);\n      return targetMap;\n    }, zrUtil.createHashMap());\n  },\n\n  /**\n   * Either name or id should be passed as input here.\n   * If both of them are defined, id is used.\n   *\n   * @param {string|undefined} name name of data\n   * @param {number|undefined} id dataIndex of data\n   */\n  // PENGING If selectedMode is null ?\n  select: function (name, id) {\n    var target = id != null ? this._targetList[id] : this._selectTargetMap.get(name);\n    var selectedMode = this.get('selectedMode');\n\n    if (selectedMode === 'single') {\n      this._selectTargetMap.each(function (target) {\n        target.selected = false;\n      });\n    }\n\n    target && (target.selected = true);\n  },\n\n  /**\n   * Either name or id should be passed as input here.\n   * If both of them are defined, id is used.\n   *\n   * @param {string|undefined} name name of data\n   * @param {number|undefined} id dataIndex of data\n   */\n  unSelect: function (name, id) {\n    var target = id != null ? this._targetList[id] : this._selectTargetMap.get(name); // var selectedMode = this.get('selectedMode');\n    // selectedMode !== 'single' && target && (target.selected = false);\n\n    target && (target.selected = false);\n  },\n\n  /**\n   * Either name or id should be passed as input here.\n   * If both of them are defined, id is used.\n   *\n   * @param {string|undefined} name name of data\n   * @param {number|undefined} id dataIndex of data\n   */\n  toggleSelected: function (name, id) {\n    var target = id != null ? this._targetList[id] : this._selectTargetMap.get(name);\n\n    if (target != null) {\n      this[target.selected ? 'unSelect' : 'select'](name, id);\n      return target.selected;\n    }\n  },\n\n  /**\n   * Either name or id should be passed as input here.\n   * If both of them are defined, id is used.\n   *\n   * @param {string|undefined} name name of data\n   * @param {number|undefined} id dataIndex of data\n   */\n  isSelected: function (name, id) {\n    var target = id != null ? this._targetList[id] : this._selectTargetMap.get(name);\n    return target && target.selected;\n  }\n};\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}