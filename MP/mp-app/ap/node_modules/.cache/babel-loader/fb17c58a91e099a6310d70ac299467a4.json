{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar formatUtil = require(\"../../util/format\");\n\nvar BaseAxisPointer = require(\"./BaseAxisPointer\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar viewHelper = require(\"./viewHelper\");\n\nvar matrix = require(\"zrender/lib/core/matrix\");\n\nvar AxisBuilder = require(\"../axis/AxisBuilder\");\n\nvar AxisView = require(\"../axis/AxisView\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar PolarAxisPointer = BaseAxisPointer.extend({\n  /**\n   * @override\n   */\n  makeElOption: function makeElOption(elOption, value, axisModel, axisPointerModel, api) {\n    var axis = axisModel.axis;\n\n    if (axis.dim === 'angle') {\n      this.animationThreshold = Math.PI / 18;\n    }\n\n    var polar = axis.polar;\n    var otherAxis = polar.getOtherAxis(axis);\n    var otherExtent = otherAxis.getExtent();\n    var coordValue;\n    coordValue = axis['dataTo' + formatUtil.capitalFirst(axis.dim)](value);\n    var axisPointerType = axisPointerModel.get('type');\n\n    if (axisPointerType && axisPointerType !== 'none') {\n      var elStyle = viewHelper.buildElStyle(axisPointerModel);\n      var pointerOption = pointerShapeBuilder[axisPointerType](axis, polar, coordValue, otherExtent, elStyle);\n      pointerOption.style = elStyle;\n      elOption.graphicKey = pointerOption.type;\n      elOption.pointer = pointerOption;\n    }\n\n    var labelMargin = axisPointerModel.get('label.margin');\n    var labelPos = getLabelPosition(value, axisModel, axisPointerModel, polar, labelMargin);\n    viewHelper.buildLabelElOption(elOption, axisModel, axisPointerModel, api, labelPos);\n  } // Do not support handle, utill any user requires it.\n\n});\n\nfunction getLabelPosition(value, axisModel, axisPointerModel, polar, labelMargin) {\n  var axis = axisModel.axis;\n  var coord = axis.dataToCoord(value);\n  var axisAngle = polar.getAngleAxis().getExtent()[0];\n  axisAngle = axisAngle / 180 * Math.PI;\n  var radiusExtent = polar.getRadiusAxis().getExtent();\n  var position;\n  var align;\n  var verticalAlign;\n\n  if (axis.dim === 'radius') {\n    var transform = matrix.create();\n    matrix.rotate(transform, transform, axisAngle);\n    matrix.translate(transform, transform, [polar.cx, polar.cy]);\n    position = graphic.applyTransform([coord, -labelMargin], transform);\n    var labelRotation = axisModel.getModel('axisLabel').get('rotate') || 0;\n    var labelLayout = AxisBuilder.innerTextLayout(axisAngle, labelRotation * Math.PI / 180, -1);\n    align = labelLayout.textAlign;\n    verticalAlign = labelLayout.textVerticalAlign;\n  } else {\n    // angle axis\n    var r = radiusExtent[1];\n    position = polar.coordToPoint([r + labelMargin, coord]);\n    var cx = polar.cx;\n    var cy = polar.cy;\n    align = Math.abs(position[0] - cx) / r < 0.3 ? 'center' : position[0] > cx ? 'left' : 'right';\n    verticalAlign = Math.abs(position[1] - cy) / r < 0.3 ? 'middle' : position[1] > cy ? 'top' : 'bottom';\n  }\n\n  return {\n    position: position,\n    align: align,\n    verticalAlign: verticalAlign\n  };\n}\n\nvar pointerShapeBuilder = {\n  line: function line(axis, polar, coordValue, otherExtent, elStyle) {\n    return axis.dim === 'angle' ? {\n      type: 'Line',\n      shape: viewHelper.makeLineShape(polar.coordToPoint([otherExtent[0], coordValue]), polar.coordToPoint([otherExtent[1], coordValue]))\n    } : {\n      type: 'Circle',\n      shape: {\n        cx: polar.cx,\n        cy: polar.cy,\n        r: coordValue\n      }\n    };\n  },\n  shadow: function shadow(axis, polar, coordValue, otherExtent, elStyle) {\n    var bandWidth = Math.max(1, axis.getBandWidth());\n    var radian = Math.PI / 180;\n    return axis.dim === 'angle' ? {\n      type: 'Sector',\n      shape: viewHelper.makeSectorShape(polar.cx, polar.cy, otherExtent[0], otherExtent[1], // In ECharts y is negative if angle is positive\n      (-coordValue - bandWidth / 2) * radian, (-coordValue + bandWidth / 2) * radian)\n    } : {\n      type: 'Sector',\n      shape: viewHelper.makeSectorShape(polar.cx, polar.cy, coordValue - bandWidth / 2, coordValue + bandWidth / 2, 0, Math.PI * 2)\n    };\n  }\n};\nAxisView.registerAxisPointerClass('PolarAxisPointer', PolarAxisPointer);\nvar _default = PolarAxisPointer;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/component/axisPointer/PolarAxisPointer.js"],"names":["formatUtil","require","BaseAxisPointer","graphic","viewHelper","matrix","AxisBuilder","AxisView","PolarAxisPointer","extend","makeElOption","elOption","value","axisModel","axisPointerModel","api","axis","dim","animationThreshold","Math","PI","polar","otherAxis","getOtherAxis","otherExtent","getExtent","coordValue","capitalFirst","axisPointerType","get","elStyle","buildElStyle","pointerOption","pointerShapeBuilder","style","graphicKey","type","pointer","labelMargin","labelPos","getLabelPosition","buildLabelElOption","coord","dataToCoord","axisAngle","getAngleAxis","radiusExtent","getRadiusAxis","position","align","verticalAlign","transform","create","rotate","translate","cx","cy","applyTransform","labelRotation","getModel","labelLayout","innerTextLayout","textAlign","textVerticalAlign","r","coordToPoint","abs","line","shape","makeLineShape","shadow","bandWidth","max","getBandWidth","radian","makeSectorShape","registerAxisPointerClass","_default","module","exports"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,mBAAD,CAAxB;;AAEA,IAAIC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA7B;;AAEA,IAAIE,OAAO,GAAGF,OAAO,CAAC,oBAAD,CAArB;;AAEA,IAAIG,UAAU,GAAGH,OAAO,CAAC,cAAD,CAAxB;;AAEA,IAAII,MAAM,GAAGJ,OAAO,CAAC,yBAAD,CAApB;;AAEA,IAAIK,WAAW,GAAGL,OAAO,CAAC,qBAAD,CAAzB;;AAEA,IAAIM,QAAQ,GAAGN,OAAO,CAAC,kBAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIO,gBAAgB,GAAGN,eAAe,CAACO,MAAhB,CAAuB;AAC5C;AACF;AACA;AACEC,EAAAA,YAAY,EAAE,sBAAUC,QAAV,EAAoBC,KAApB,EAA2BC,SAA3B,EAAsCC,gBAAtC,EAAwDC,GAAxD,EAA6D;AACzE,QAAIC,IAAI,GAAGH,SAAS,CAACG,IAArB;;AAEA,QAAIA,IAAI,CAACC,GAAL,KAAa,OAAjB,EAA0B;AACxB,WAAKC,kBAAL,GAA0BC,IAAI,CAACC,EAAL,GAAU,EAApC;AACD;;AAED,QAAIC,KAAK,GAAGL,IAAI,CAACK,KAAjB;AACA,QAAIC,SAAS,GAAGD,KAAK,CAACE,YAAN,CAAmBP,IAAnB,CAAhB;AACA,QAAIQ,WAAW,GAAGF,SAAS,CAACG,SAAV,EAAlB;AACA,QAAIC,UAAJ;AACAA,IAAAA,UAAU,GAAGV,IAAI,CAAC,WAAWhB,UAAU,CAAC2B,YAAX,CAAwBX,IAAI,CAACC,GAA7B,CAAZ,CAAJ,CAAmDL,KAAnD,CAAb;AACA,QAAIgB,eAAe,GAAGd,gBAAgB,CAACe,GAAjB,CAAqB,MAArB,CAAtB;;AAEA,QAAID,eAAe,IAAIA,eAAe,KAAK,MAA3C,EAAmD;AACjD,UAAIE,OAAO,GAAG1B,UAAU,CAAC2B,YAAX,CAAwBjB,gBAAxB,CAAd;AACA,UAAIkB,aAAa,GAAGC,mBAAmB,CAACL,eAAD,CAAnB,CAAqCZ,IAArC,EAA2CK,KAA3C,EAAkDK,UAAlD,EAA8DF,WAA9D,EAA2EM,OAA3E,CAApB;AACAE,MAAAA,aAAa,CAACE,KAAd,GAAsBJ,OAAtB;AACAnB,MAAAA,QAAQ,CAACwB,UAAT,GAAsBH,aAAa,CAACI,IAApC;AACAzB,MAAAA,QAAQ,CAAC0B,OAAT,GAAmBL,aAAnB;AACD;;AAED,QAAIM,WAAW,GAAGxB,gBAAgB,CAACe,GAAjB,CAAqB,cAArB,CAAlB;AACA,QAAIU,QAAQ,GAAGC,gBAAgB,CAAC5B,KAAD,EAAQC,SAAR,EAAmBC,gBAAnB,EAAqCO,KAArC,EAA4CiB,WAA5C,CAA/B;AACAlC,IAAAA,UAAU,CAACqC,kBAAX,CAA8B9B,QAA9B,EAAwCE,SAAxC,EAAmDC,gBAAnD,EAAqEC,GAArE,EAA0EwB,QAA1E;AACD,GA7B2C,CA6B1C;;AA7B0C,CAAvB,CAAvB;;AAiCA,SAASC,gBAAT,CAA0B5B,KAA1B,EAAiCC,SAAjC,EAA4CC,gBAA5C,EAA8DO,KAA9D,EAAqEiB,WAArE,EAAkF;AAChF,MAAItB,IAAI,GAAGH,SAAS,CAACG,IAArB;AACA,MAAI0B,KAAK,GAAG1B,IAAI,CAAC2B,WAAL,CAAiB/B,KAAjB,CAAZ;AACA,MAAIgC,SAAS,GAAGvB,KAAK,CAACwB,YAAN,GAAqBpB,SAArB,GAAiC,CAAjC,CAAhB;AACAmB,EAAAA,SAAS,GAAGA,SAAS,GAAG,GAAZ,GAAkBzB,IAAI,CAACC,EAAnC;AACA,MAAI0B,YAAY,GAAGzB,KAAK,CAAC0B,aAAN,GAAsBtB,SAAtB,EAAnB;AACA,MAAIuB,QAAJ;AACA,MAAIC,KAAJ;AACA,MAAIC,aAAJ;;AAEA,MAAIlC,IAAI,CAACC,GAAL,KAAa,QAAjB,EAA2B;AACzB,QAAIkC,SAAS,GAAG9C,MAAM,CAAC+C,MAAP,EAAhB;AACA/C,IAAAA,MAAM,CAACgD,MAAP,CAAcF,SAAd,EAAyBA,SAAzB,EAAoCP,SAApC;AACAvC,IAAAA,MAAM,CAACiD,SAAP,CAAiBH,SAAjB,EAA4BA,SAA5B,EAAuC,CAAC9B,KAAK,CAACkC,EAAP,EAAWlC,KAAK,CAACmC,EAAjB,CAAvC;AACAR,IAAAA,QAAQ,GAAG7C,OAAO,CAACsD,cAAR,CAAuB,CAACf,KAAD,EAAQ,CAACJ,WAAT,CAAvB,EAA8Ca,SAA9C,CAAX;AACA,QAAIO,aAAa,GAAG7C,SAAS,CAAC8C,QAAV,CAAmB,WAAnB,EAAgC9B,GAAhC,CAAoC,QAApC,KAAiD,CAArE;AACA,QAAI+B,WAAW,GAAGtD,WAAW,CAACuD,eAAZ,CAA4BjB,SAA5B,EAAuCc,aAAa,GAAGvC,IAAI,CAACC,EAArB,GAA0B,GAAjE,EAAsE,CAAC,CAAvE,CAAlB;AACA6B,IAAAA,KAAK,GAAGW,WAAW,CAACE,SAApB;AACAZ,IAAAA,aAAa,GAAGU,WAAW,CAACG,iBAA5B;AACD,GATD,MASO;AACL;AACA,QAAIC,CAAC,GAAGlB,YAAY,CAAC,CAAD,CAApB;AACAE,IAAAA,QAAQ,GAAG3B,KAAK,CAAC4C,YAAN,CAAmB,CAACD,CAAC,GAAG1B,WAAL,EAAkBI,KAAlB,CAAnB,CAAX;AACA,QAAIa,EAAE,GAAGlC,KAAK,CAACkC,EAAf;AACA,QAAIC,EAAE,GAAGnC,KAAK,CAACmC,EAAf;AACAP,IAAAA,KAAK,GAAG9B,IAAI,CAAC+C,GAAL,CAASlB,QAAQ,CAAC,CAAD,CAAR,GAAcO,EAAvB,IAA6BS,CAA7B,GAAiC,GAAjC,GAAuC,QAAvC,GAAkDhB,QAAQ,CAAC,CAAD,CAAR,GAAcO,EAAd,GAAmB,MAAnB,GAA4B,OAAtF;AACAL,IAAAA,aAAa,GAAG/B,IAAI,CAAC+C,GAAL,CAASlB,QAAQ,CAAC,CAAD,CAAR,GAAcQ,EAAvB,IAA6BQ,CAA7B,GAAiC,GAAjC,GAAuC,QAAvC,GAAkDhB,QAAQ,CAAC,CAAD,CAAR,GAAcQ,EAAd,GAAmB,KAAnB,GAA2B,QAA7F;AACD;;AAED,SAAO;AACLR,IAAAA,QAAQ,EAAEA,QADL;AAELC,IAAAA,KAAK,EAAEA,KAFF;AAGLC,IAAAA,aAAa,EAAEA;AAHV,GAAP;AAKD;;AAED,IAAIjB,mBAAmB,GAAG;AACxBkC,EAAAA,IAAI,EAAE,cAAUnD,IAAV,EAAgBK,KAAhB,EAAuBK,UAAvB,EAAmCF,WAAnC,EAAgDM,OAAhD,EAAyD;AAC7D,WAAOd,IAAI,CAACC,GAAL,KAAa,OAAb,GAAuB;AAC5BmB,MAAAA,IAAI,EAAE,MADsB;AAE5BgC,MAAAA,KAAK,EAAEhE,UAAU,CAACiE,aAAX,CAAyBhD,KAAK,CAAC4C,YAAN,CAAmB,CAACzC,WAAW,CAAC,CAAD,CAAZ,EAAiBE,UAAjB,CAAnB,CAAzB,EAA2EL,KAAK,CAAC4C,YAAN,CAAmB,CAACzC,WAAW,CAAC,CAAD,CAAZ,EAAiBE,UAAjB,CAAnB,CAA3E;AAFqB,KAAvB,GAGH;AACFU,MAAAA,IAAI,EAAE,QADJ;AAEFgC,MAAAA,KAAK,EAAE;AACLb,QAAAA,EAAE,EAAElC,KAAK,CAACkC,EADL;AAELC,QAAAA,EAAE,EAAEnC,KAAK,CAACmC,EAFL;AAGLQ,QAAAA,CAAC,EAAEtC;AAHE;AAFL,KAHJ;AAWD,GAbuB;AAcxB4C,EAAAA,MAAM,EAAE,gBAAUtD,IAAV,EAAgBK,KAAhB,EAAuBK,UAAvB,EAAmCF,WAAnC,EAAgDM,OAAhD,EAAyD;AAC/D,QAAIyC,SAAS,GAAGpD,IAAI,CAACqD,GAAL,CAAS,CAAT,EAAYxD,IAAI,CAACyD,YAAL,EAAZ,CAAhB;AACA,QAAIC,MAAM,GAAGvD,IAAI,CAACC,EAAL,GAAU,GAAvB;AACA,WAAOJ,IAAI,CAACC,GAAL,KAAa,OAAb,GAAuB;AAC5BmB,MAAAA,IAAI,EAAE,QADsB;AAE5BgC,MAAAA,KAAK,EAAEhE,UAAU,CAACuE,eAAX,CAA2BtD,KAAK,CAACkC,EAAjC,EAAqClC,KAAK,CAACmC,EAA3C,EAA+ChC,WAAW,CAAC,CAAD,CAA1D,EAA+DA,WAAW,CAAC,CAAD,CAA1E,EAA+E;AACtF,OAAC,CAACE,UAAD,GAAc6C,SAAS,GAAG,CAA3B,IAAgCG,MADzB,EACiC,CAAC,CAAChD,UAAD,GAAc6C,SAAS,GAAG,CAA3B,IAAgCG,MADjE;AAFqB,KAAvB,GAIH;AACFtC,MAAAA,IAAI,EAAE,QADJ;AAEFgC,MAAAA,KAAK,EAAEhE,UAAU,CAACuE,eAAX,CAA2BtD,KAAK,CAACkC,EAAjC,EAAqClC,KAAK,CAACmC,EAA3C,EAA+C9B,UAAU,GAAG6C,SAAS,GAAG,CAAxE,EAA2E7C,UAAU,GAAG6C,SAAS,GAAG,CAApG,EAAuG,CAAvG,EAA0GpD,IAAI,CAACC,EAAL,GAAU,CAApH;AAFL,KAJJ;AAQD;AAzBuB,CAA1B;AA2BAb,QAAQ,CAACqE,wBAAT,CAAkC,kBAAlC,EAAsDpE,gBAAtD;AACA,IAAIqE,QAAQ,GAAGrE,gBAAf;AACAsE,MAAM,CAACC,OAAP,GAAiBF,QAAjB","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar formatUtil = require(\"../../util/format\");\n\nvar BaseAxisPointer = require(\"./BaseAxisPointer\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar viewHelper = require(\"./viewHelper\");\n\nvar matrix = require(\"zrender/lib/core/matrix\");\n\nvar AxisBuilder = require(\"../axis/AxisBuilder\");\n\nvar AxisView = require(\"../axis/AxisView\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar PolarAxisPointer = BaseAxisPointer.extend({\n  /**\n   * @override\n   */\n  makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {\n    var axis = axisModel.axis;\n\n    if (axis.dim === 'angle') {\n      this.animationThreshold = Math.PI / 18;\n    }\n\n    var polar = axis.polar;\n    var otherAxis = polar.getOtherAxis(axis);\n    var otherExtent = otherAxis.getExtent();\n    var coordValue;\n    coordValue = axis['dataTo' + formatUtil.capitalFirst(axis.dim)](value);\n    var axisPointerType = axisPointerModel.get('type');\n\n    if (axisPointerType && axisPointerType !== 'none') {\n      var elStyle = viewHelper.buildElStyle(axisPointerModel);\n      var pointerOption = pointerShapeBuilder[axisPointerType](axis, polar, coordValue, otherExtent, elStyle);\n      pointerOption.style = elStyle;\n      elOption.graphicKey = pointerOption.type;\n      elOption.pointer = pointerOption;\n    }\n\n    var labelMargin = axisPointerModel.get('label.margin');\n    var labelPos = getLabelPosition(value, axisModel, axisPointerModel, polar, labelMargin);\n    viewHelper.buildLabelElOption(elOption, axisModel, axisPointerModel, api, labelPos);\n  } // Do not support handle, utill any user requires it.\n\n});\n\nfunction getLabelPosition(value, axisModel, axisPointerModel, polar, labelMargin) {\n  var axis = axisModel.axis;\n  var coord = axis.dataToCoord(value);\n  var axisAngle = polar.getAngleAxis().getExtent()[0];\n  axisAngle = axisAngle / 180 * Math.PI;\n  var radiusExtent = polar.getRadiusAxis().getExtent();\n  var position;\n  var align;\n  var verticalAlign;\n\n  if (axis.dim === 'radius') {\n    var transform = matrix.create();\n    matrix.rotate(transform, transform, axisAngle);\n    matrix.translate(transform, transform, [polar.cx, polar.cy]);\n    position = graphic.applyTransform([coord, -labelMargin], transform);\n    var labelRotation = axisModel.getModel('axisLabel').get('rotate') || 0;\n    var labelLayout = AxisBuilder.innerTextLayout(axisAngle, labelRotation * Math.PI / 180, -1);\n    align = labelLayout.textAlign;\n    verticalAlign = labelLayout.textVerticalAlign;\n  } else {\n    // angle axis\n    var r = radiusExtent[1];\n    position = polar.coordToPoint([r + labelMargin, coord]);\n    var cx = polar.cx;\n    var cy = polar.cy;\n    align = Math.abs(position[0] - cx) / r < 0.3 ? 'center' : position[0] > cx ? 'left' : 'right';\n    verticalAlign = Math.abs(position[1] - cy) / r < 0.3 ? 'middle' : position[1] > cy ? 'top' : 'bottom';\n  }\n\n  return {\n    position: position,\n    align: align,\n    verticalAlign: verticalAlign\n  };\n}\n\nvar pointerShapeBuilder = {\n  line: function (axis, polar, coordValue, otherExtent, elStyle) {\n    return axis.dim === 'angle' ? {\n      type: 'Line',\n      shape: viewHelper.makeLineShape(polar.coordToPoint([otherExtent[0], coordValue]), polar.coordToPoint([otherExtent[1], coordValue]))\n    } : {\n      type: 'Circle',\n      shape: {\n        cx: polar.cx,\n        cy: polar.cy,\n        r: coordValue\n      }\n    };\n  },\n  shadow: function (axis, polar, coordValue, otherExtent, elStyle) {\n    var bandWidth = Math.max(1, axis.getBandWidth());\n    var radian = Math.PI / 180;\n    return axis.dim === 'angle' ? {\n      type: 'Sector',\n      shape: viewHelper.makeSectorShape(polar.cx, polar.cy, otherExtent[0], otherExtent[1], // In ECharts y is negative if angle is positive\n      (-coordValue - bandWidth / 2) * radian, (-coordValue + bandWidth / 2) * radian)\n    } : {\n      type: 'Sector',\n      shape: viewHelper.makeSectorShape(polar.cx, polar.cy, coordValue - bandWidth / 2, coordValue + bandWidth / 2, 0, Math.PI * 2)\n    };\n  }\n};\nAxisView.registerAxisPointerClass('PolarAxisPointer', PolarAxisPointer);\nvar _default = PolarAxisPointer;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}