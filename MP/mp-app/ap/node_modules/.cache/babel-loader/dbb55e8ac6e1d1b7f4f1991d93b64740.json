{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar samplers = {\n  average: function average(frame) {\n    var sum = 0;\n    var count = 0;\n\n    for (var i = 0; i < frame.length; i++) {\n      if (!isNaN(frame[i])) {\n        sum += frame[i];\n        count++;\n      }\n    } // Return NaN if count is 0\n\n\n    return count === 0 ? NaN : sum / count;\n  },\n  sum: function sum(frame) {\n    var sum = 0;\n\n    for (var i = 0; i < frame.length; i++) {\n      // Ignore NaN\n      sum += frame[i] || 0;\n    }\n\n    return sum;\n  },\n  max: function max(frame) {\n    var max = -Infinity;\n\n    for (var i = 0; i < frame.length; i++) {\n      frame[i] > max && (max = frame[i]);\n    } // NaN will cause illegal axis extent.\n\n\n    return isFinite(max) ? max : NaN;\n  },\n  min: function min(frame) {\n    var min = Infinity;\n\n    for (var i = 0; i < frame.length; i++) {\n      frame[i] < min && (min = frame[i]);\n    } // NaN will cause illegal axis extent.\n\n\n    return isFinite(min) ? min : NaN;\n  },\n  // TODO\n  // Median\n  nearest: function nearest(frame) {\n    return frame[0];\n  }\n};\n\nvar indexSampler = function indexSampler(frame, value) {\n  return Math.round(frame.length / 2);\n};\n\nfunction _default(seriesType) {\n  return {\n    seriesType: seriesType,\n    modifyOutputEnd: true,\n    reset: function reset(seriesModel, ecModel, api) {\n      var data = seriesModel.getData();\n      var sampling = seriesModel.get('sampling');\n      var coordSys = seriesModel.coordinateSystem; // Only cartesian2d support down sampling\n\n      if (coordSys.type === 'cartesian2d' && sampling) {\n        var baseAxis = coordSys.getBaseAxis();\n        var valueAxis = coordSys.getOtherAxis(baseAxis);\n        var extent = baseAxis.getExtent(); // Coordinste system has been resized\n\n        var size = Math.abs(extent[1] - extent[0]);\n        var rate = Math.round(data.count() / size);\n\n        if (rate > 1) {\n          var sampler;\n\n          if (typeof sampling === 'string') {\n            sampler = samplers[sampling];\n          } else if (typeof sampling === 'function') {\n            sampler = sampling;\n          }\n\n          if (sampler) {\n            // Only support sample the first dim mapped from value axis.\n            seriesModel.setData(data.downSample(data.mapDimension(valueAxis.dim), 1 / rate, sampler, indexSampler));\n          }\n        }\n      }\n    }\n  };\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/processor/dataSample.js"],"names":["samplers","average","frame","sum","count","i","length","isNaN","NaN","max","Infinity","isFinite","min","nearest","indexSampler","value","Math","round","_default","seriesType","modifyOutputEnd","reset","seriesModel","ecModel","api","data","getData","sampling","get","coordSys","coordinateSystem","type","baseAxis","getBaseAxis","valueAxis","getOtherAxis","extent","getExtent","size","abs","rate","sampler","setData","downSample","mapDimension","dim","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar samplers = {\n  average: function (frame) {\n    var sum = 0;\n    var count = 0;\n\n    for (var i = 0; i < frame.length; i++) {\n      if (!isNaN(frame[i])) {\n        sum += frame[i];\n        count++;\n      }\n    } // Return NaN if count is 0\n\n\n    return count === 0 ? NaN : sum / count;\n  },\n  sum: function (frame) {\n    var sum = 0;\n\n    for (var i = 0; i < frame.length; i++) {\n      // Ignore NaN\n      sum += frame[i] || 0;\n    }\n\n    return sum;\n  },\n  max: function (frame) {\n    var max = -Infinity;\n\n    for (var i = 0; i < frame.length; i++) {\n      frame[i] > max && (max = frame[i]);\n    } // NaN will cause illegal axis extent.\n\n\n    return isFinite(max) ? max : NaN;\n  },\n  min: function (frame) {\n    var min = Infinity;\n\n    for (var i = 0; i < frame.length; i++) {\n      frame[i] < min && (min = frame[i]);\n    } // NaN will cause illegal axis extent.\n\n\n    return isFinite(min) ? min : NaN;\n  },\n  // TODO\n  // Median\n  nearest: function (frame) {\n    return frame[0];\n  }\n};\n\nvar indexSampler = function (frame, value) {\n  return Math.round(frame.length / 2);\n};\n\nfunction _default(seriesType) {\n  return {\n    seriesType: seriesType,\n    modifyOutputEnd: true,\n    reset: function (seriesModel, ecModel, api) {\n      var data = seriesModel.getData();\n      var sampling = seriesModel.get('sampling');\n      var coordSys = seriesModel.coordinateSystem; // Only cartesian2d support down sampling\n\n      if (coordSys.type === 'cartesian2d' && sampling) {\n        var baseAxis = coordSys.getBaseAxis();\n        var valueAxis = coordSys.getOtherAxis(baseAxis);\n        var extent = baseAxis.getExtent(); // Coordinste system has been resized\n\n        var size = Math.abs(extent[1] - extent[0]);\n        var rate = Math.round(data.count() / size);\n\n        if (rate > 1) {\n          var sampler;\n\n          if (typeof sampling === 'string') {\n            sampler = samplers[sampling];\n          } else if (typeof sampling === 'function') {\n            sampler = sampling;\n          }\n\n          if (sampler) {\n            // Only support sample the first dim mapped from value axis.\n            seriesModel.setData(data.downSample(data.mapDimension(valueAxis.dim), 1 / rate, sampler, indexSampler));\n          }\n        }\n      }\n    }\n  };\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}