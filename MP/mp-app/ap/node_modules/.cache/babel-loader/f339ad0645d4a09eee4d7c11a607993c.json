{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _config = require(\"../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar _util = require(\"zrender/lib/core/util\");\n\nvar createHashMap = _util.createHashMap;\nvar retrieve = _util.retrieve;\nvar each = _util.each;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Helper for model references.\n * There are many manners to refer axis/coordSys.\n */\n// TODO\n// merge relevant logic to this file?\n// check: \"modelHelper\" of tooltip and \"BrushTargetManager\".\n\n/**\n * @class\n * For example:\n * {\n *     coordSysName: 'cartesian2d',\n *     coordSysDims: ['x', 'y', ...],\n *     axisMap: HashMap({\n *         x: xAxisModel,\n *         y: yAxisModel\n *     }),\n *     categoryAxisMap: HashMap({\n *         x: xAxisModel,\n *         y: undefined\n *     }),\n *     // The index of the first category axis in `coordSysDims`.\n *     // `null/undefined` means no category axis exists.\n *     firstCategoryDimIndex: 1,\n *     // To replace user specified encode.\n * }\n */\n\nfunction CoordSysInfo(coordSysName) {\n  /**\n   * @type {string}\n   */\n  this.coordSysName = coordSysName;\n  /**\n   * @type {Array.<string>}\n   */\n\n  this.coordSysDims = [];\n  /**\n   * @type {module:zrender/core/util#HashMap}\n   */\n\n  this.axisMap = createHashMap();\n  /**\n   * @type {module:zrender/core/util#HashMap}\n   */\n\n  this.categoryAxisMap = createHashMap();\n  /**\n   * @type {number}\n   */\n\n  this.firstCategoryDimIndex = null;\n}\n/**\n * @return {module:model/referHelper#CoordSysInfo}\n */\n\n\nfunction getCoordSysInfoBySeries(seriesModel) {\n  var coordSysName = seriesModel.get('coordinateSystem');\n  var result = new CoordSysInfo(coordSysName);\n  var fetch = fetchers[coordSysName];\n\n  if (fetch) {\n    fetch(seriesModel, result, result.axisMap, result.categoryAxisMap);\n    return result;\n  }\n}\n\nvar fetchers = {\n  cartesian2d: function cartesian2d(seriesModel, result, axisMap, categoryAxisMap) {\n    var xAxisModel = seriesModel.getReferringComponents('xAxis')[0];\n    var yAxisModel = seriesModel.getReferringComponents('yAxis')[0];\n    result.coordSysDims = ['x', 'y'];\n    axisMap.set('x', xAxisModel);\n    axisMap.set('y', yAxisModel);\n\n    if (isCategory(xAxisModel)) {\n      categoryAxisMap.set('x', xAxisModel);\n      result.firstCategoryDimIndex = 0;\n    }\n\n    if (isCategory(yAxisModel)) {\n      categoryAxisMap.set('y', yAxisModel);\n      result.firstCategoryDimIndex == null & (result.firstCategoryDimIndex = 1);\n    }\n  },\n  singleAxis: function singleAxis(seriesModel, result, axisMap, categoryAxisMap) {\n    var singleAxisModel = seriesModel.getReferringComponents('singleAxis')[0];\n    result.coordSysDims = ['single'];\n    axisMap.set('single', singleAxisModel);\n\n    if (isCategory(singleAxisModel)) {\n      categoryAxisMap.set('single', singleAxisModel);\n      result.firstCategoryDimIndex = 0;\n    }\n  },\n  polar: function polar(seriesModel, result, axisMap, categoryAxisMap) {\n    var polarModel = seriesModel.getReferringComponents('polar')[0];\n    var radiusAxisModel = polarModel.findAxisModel('radiusAxis');\n    var angleAxisModel = polarModel.findAxisModel('angleAxis');\n    result.coordSysDims = ['radius', 'angle'];\n    axisMap.set('radius', radiusAxisModel);\n    axisMap.set('angle', angleAxisModel);\n\n    if (isCategory(radiusAxisModel)) {\n      categoryAxisMap.set('radius', radiusAxisModel);\n      result.firstCategoryDimIndex = 0;\n    }\n\n    if (isCategory(angleAxisModel)) {\n      categoryAxisMap.set('angle', angleAxisModel);\n      result.firstCategoryDimIndex == null && (result.firstCategoryDimIndex = 1);\n    }\n  },\n  geo: function geo(seriesModel, result, axisMap, categoryAxisMap) {\n    result.coordSysDims = ['lng', 'lat'];\n  },\n  parallel: function parallel(seriesModel, result, axisMap, categoryAxisMap) {\n    var ecModel = seriesModel.ecModel;\n    var parallelModel = ecModel.getComponent('parallel', seriesModel.get('parallelIndex'));\n    var coordSysDims = result.coordSysDims = parallelModel.dimensions.slice();\n    each(parallelModel.parallelAxisIndex, function (axisIndex, index) {\n      var axisModel = ecModel.getComponent('parallelAxis', axisIndex);\n      var axisDim = coordSysDims[index];\n      axisMap.set(axisDim, axisModel);\n\n      if (isCategory(axisModel) && result.firstCategoryDimIndex == null) {\n        categoryAxisMap.set(axisDim, axisModel);\n        result.firstCategoryDimIndex = index;\n      }\n    });\n  }\n};\n\nfunction isCategory(axisModel) {\n  return axisModel.get('type') === 'category';\n}\n\nexports.getCoordSysInfoBySeries = getCoordSysInfoBySeries;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/model/referHelper.js"],"names":["_config","require","__DEV__","_util","createHashMap","retrieve","each","CoordSysInfo","coordSysName","coordSysDims","axisMap","categoryAxisMap","firstCategoryDimIndex","getCoordSysInfoBySeries","seriesModel","get","result","fetch","fetchers","cartesian2d","xAxisModel","getReferringComponents","yAxisModel","set","isCategory","singleAxis","singleAxisModel","polar","polarModel","radiusAxisModel","findAxisModel","angleAxisModel","geo","parallel","ecModel","parallelModel","getComponent","dimensions","slice","parallelAxisIndex","axisIndex","index","axisModel","axisDim","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _config = require(\"../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar _util = require(\"zrender/lib/core/util\");\n\nvar createHashMap = _util.createHashMap;\nvar retrieve = _util.retrieve;\nvar each = _util.each;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Helper for model references.\n * There are many manners to refer axis/coordSys.\n */\n// TODO\n// merge relevant logic to this file?\n// check: \"modelHelper\" of tooltip and \"BrushTargetManager\".\n\n/**\n * @class\n * For example:\n * {\n *     coordSysName: 'cartesian2d',\n *     coordSysDims: ['x', 'y', ...],\n *     axisMap: HashMap({\n *         x: xAxisModel,\n *         y: yAxisModel\n *     }),\n *     categoryAxisMap: HashMap({\n *         x: xAxisModel,\n *         y: undefined\n *     }),\n *     // The index of the first category axis in `coordSysDims`.\n *     // `null/undefined` means no category axis exists.\n *     firstCategoryDimIndex: 1,\n *     // To replace user specified encode.\n * }\n */\nfunction CoordSysInfo(coordSysName) {\n  /**\n   * @type {string}\n   */\n  this.coordSysName = coordSysName;\n  /**\n   * @type {Array.<string>}\n   */\n\n  this.coordSysDims = [];\n  /**\n   * @type {module:zrender/core/util#HashMap}\n   */\n\n  this.axisMap = createHashMap();\n  /**\n   * @type {module:zrender/core/util#HashMap}\n   */\n\n  this.categoryAxisMap = createHashMap();\n  /**\n   * @type {number}\n   */\n\n  this.firstCategoryDimIndex = null;\n}\n/**\n * @return {module:model/referHelper#CoordSysInfo}\n */\n\n\nfunction getCoordSysInfoBySeries(seriesModel) {\n  var coordSysName = seriesModel.get('coordinateSystem');\n  var result = new CoordSysInfo(coordSysName);\n  var fetch = fetchers[coordSysName];\n\n  if (fetch) {\n    fetch(seriesModel, result, result.axisMap, result.categoryAxisMap);\n    return result;\n  }\n}\n\nvar fetchers = {\n  cartesian2d: function (seriesModel, result, axisMap, categoryAxisMap) {\n    var xAxisModel = seriesModel.getReferringComponents('xAxis')[0];\n    var yAxisModel = seriesModel.getReferringComponents('yAxis')[0];\n    result.coordSysDims = ['x', 'y'];\n    axisMap.set('x', xAxisModel);\n    axisMap.set('y', yAxisModel);\n\n    if (isCategory(xAxisModel)) {\n      categoryAxisMap.set('x', xAxisModel);\n      result.firstCategoryDimIndex = 0;\n    }\n\n    if (isCategory(yAxisModel)) {\n      categoryAxisMap.set('y', yAxisModel);\n      result.firstCategoryDimIndex == null & (result.firstCategoryDimIndex = 1);\n    }\n  },\n  singleAxis: function (seriesModel, result, axisMap, categoryAxisMap) {\n    var singleAxisModel = seriesModel.getReferringComponents('singleAxis')[0];\n    result.coordSysDims = ['single'];\n    axisMap.set('single', singleAxisModel);\n\n    if (isCategory(singleAxisModel)) {\n      categoryAxisMap.set('single', singleAxisModel);\n      result.firstCategoryDimIndex = 0;\n    }\n  },\n  polar: function (seriesModel, result, axisMap, categoryAxisMap) {\n    var polarModel = seriesModel.getReferringComponents('polar')[0];\n    var radiusAxisModel = polarModel.findAxisModel('radiusAxis');\n    var angleAxisModel = polarModel.findAxisModel('angleAxis');\n    result.coordSysDims = ['radius', 'angle'];\n    axisMap.set('radius', radiusAxisModel);\n    axisMap.set('angle', angleAxisModel);\n\n    if (isCategory(radiusAxisModel)) {\n      categoryAxisMap.set('radius', radiusAxisModel);\n      result.firstCategoryDimIndex = 0;\n    }\n\n    if (isCategory(angleAxisModel)) {\n      categoryAxisMap.set('angle', angleAxisModel);\n      result.firstCategoryDimIndex == null && (result.firstCategoryDimIndex = 1);\n    }\n  },\n  geo: function (seriesModel, result, axisMap, categoryAxisMap) {\n    result.coordSysDims = ['lng', 'lat'];\n  },\n  parallel: function (seriesModel, result, axisMap, categoryAxisMap) {\n    var ecModel = seriesModel.ecModel;\n    var parallelModel = ecModel.getComponent('parallel', seriesModel.get('parallelIndex'));\n    var coordSysDims = result.coordSysDims = parallelModel.dimensions.slice();\n    each(parallelModel.parallelAxisIndex, function (axisIndex, index) {\n      var axisModel = ecModel.getComponent('parallelAxis', axisIndex);\n      var axisDim = coordSysDims[index];\n      axisMap.set(axisDim, axisModel);\n\n      if (isCategory(axisModel) && result.firstCategoryDimIndex == null) {\n        categoryAxisMap.set(axisDim, axisModel);\n        result.firstCategoryDimIndex = index;\n      }\n    });\n  }\n};\n\nfunction isCategory(axisModel) {\n  return axisModel.get('type') === 'category';\n}\n\nexports.getCoordSysInfoBySeries = getCoordSysInfoBySeries;"]},"metadata":{},"sourceType":"script"}