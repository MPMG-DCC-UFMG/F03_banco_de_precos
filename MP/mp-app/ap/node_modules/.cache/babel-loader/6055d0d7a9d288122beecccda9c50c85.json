{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar numberUtil = require(\"../util/number\");\n\nvar formatUtil = require(\"../util/format\");\n\nvar Scale = require(\"./Scale\");\n\nvar helper = require(\"./helper\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Interval scale\n * @module echarts/scale/Interval\n */\n\n\nvar roundNumber = numberUtil.round;\n/**\n * @alias module:echarts/coord/scale/Interval\n * @constructor\n */\n\nvar IntervalScale = Scale.extend({\n  type: 'interval',\n  _interval: 0,\n  _intervalPrecision: 2,\n  setExtent: function setExtent(start, end) {\n    var thisExtent = this._extent; //start,end may be a Number like '25',so...\n\n    if (!isNaN(start)) {\n      thisExtent[0] = parseFloat(start);\n    }\n\n    if (!isNaN(end)) {\n      thisExtent[1] = parseFloat(end);\n    }\n  },\n  unionExtent: function unionExtent(other) {\n    var extent = this._extent;\n    other[0] < extent[0] && (extent[0] = other[0]);\n    other[1] > extent[1] && (extent[1] = other[1]); // unionExtent may called by it's sub classes\n\n    IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);\n  },\n\n  /**\n   * Get interval\n   */\n  getInterval: function getInterval() {\n    return this._interval;\n  },\n\n  /**\n   * Set interval\n   */\n  setInterval: function setInterval(interval) {\n    this._interval = interval; // Dropped auto calculated niceExtent and use user setted extent\n    // We assume user wan't to set both interval, min, max to get a better result\n\n    this._niceExtent = this._extent.slice();\n    this._intervalPrecision = helper.getIntervalPrecision(interval);\n  },\n\n  /**\n   * @param {boolean} [expandToNicedExtent=false] If expand the ticks to niced extent.\n   * @return {Array.<number>}\n   */\n  getTicks: function getTicks(expandToNicedExtent) {\n    var interval = this._interval;\n    var extent = this._extent;\n    var niceTickExtent = this._niceExtent;\n    var intervalPrecision = this._intervalPrecision;\n    var ticks = []; // If interval is 0, return [];\n\n    if (!interval) {\n      return ticks;\n    } // Consider this case: using dataZoom toolbox, zoom and zoom.\n\n\n    var safeLimit = 10000;\n\n    if (extent[0] < niceTickExtent[0]) {\n      if (expandToNicedExtent) {\n        ticks.push(roundNumber(niceTickExtent[0] - interval, intervalPrecision));\n      } else {\n        ticks.push(extent[0]);\n      }\n    }\n\n    var tick = niceTickExtent[0];\n\n    while (tick <= niceTickExtent[1]) {\n      ticks.push(tick); // Avoid rounding error\n\n      tick = roundNumber(tick + interval, intervalPrecision);\n\n      if (tick === ticks[ticks.length - 1]) {\n        // Consider out of safe float point, e.g.,\n        // -3711126.9907707 + 2e-10 === -3711126.9907707\n        break;\n      }\n\n      if (ticks.length > safeLimit) {\n        return [];\n      }\n    } // Consider this case: the last item of ticks is smaller\n    // than niceTickExtent[1] and niceTickExtent[1] === extent[1].\n\n\n    var lastNiceTick = ticks.length ? ticks[ticks.length - 1] : niceTickExtent[1];\n\n    if (extent[1] > lastNiceTick) {\n      if (expandToNicedExtent) {\n        ticks.push(roundNumber(lastNiceTick + interval, intervalPrecision));\n      } else {\n        ticks.push(extent[1]);\n      }\n    }\n\n    return ticks;\n  },\n\n  /**\n   * @param {number} [splitNumber=5]\n   * @return {Array.<Array.<number>>}\n   */\n  getMinorTicks: function getMinorTicks(splitNumber) {\n    var ticks = this.getTicks(true);\n    var minorTicks = [];\n    var extent = this.getExtent();\n\n    for (var i = 1; i < ticks.length; i++) {\n      var nextTick = ticks[i];\n      var prevTick = ticks[i - 1];\n      var count = 0;\n      var minorTicksGroup = [];\n      var interval = nextTick - prevTick;\n      var minorInterval = interval / splitNumber;\n\n      while (count < splitNumber - 1) {\n        var minorTick = numberUtil.round(prevTick + (count + 1) * minorInterval); // For the first and last interval. The count may be less than splitNumber.\n\n        if (minorTick > extent[0] && minorTick < extent[1]) {\n          minorTicksGroup.push(minorTick);\n        }\n\n        count++;\n      }\n\n      minorTicks.push(minorTicksGroup);\n    }\n\n    return minorTicks;\n  },\n\n  /**\n   * @param {number} data\n   * @param {Object} [opt]\n   * @param {number|string} [opt.precision] If 'auto', use nice presision.\n   * @param {boolean} [opt.pad] returns 1.50 but not 1.5 if precision is 2.\n   * @return {string}\n   */\n  getLabel: function getLabel(data, opt) {\n    if (data == null) {\n      return '';\n    }\n\n    var precision = opt && opt.precision;\n\n    if (precision == null) {\n      precision = numberUtil.getPrecisionSafe(data) || 0;\n    } else if (precision === 'auto') {\n      // Should be more precise then tick.\n      precision = this._intervalPrecision;\n    } // (1) If `precision` is set, 12.005 should be display as '12.00500'.\n    // (2) Use roundNumber (toFixed) to avoid scientific notation like '3.5e-7'.\n\n\n    data = roundNumber(data, precision, true);\n    return formatUtil.addCommas(data);\n  },\n\n  /**\n   * Update interval and extent of intervals for nice ticks\n   *\n   * @param {number} [splitNumber = 5] Desired number of ticks\n   * @param {number} [minInterval]\n   * @param {number} [maxInterval]\n   */\n  niceTicks: function niceTicks(splitNumber, minInterval, maxInterval) {\n    splitNumber = splitNumber || 5;\n    var extent = this._extent;\n    var span = extent[1] - extent[0];\n\n    if (!isFinite(span)) {\n      return;\n    } // User may set axis min 0 and data are all negative\n    // FIXME If it needs to reverse ?\n\n\n    if (span < 0) {\n      span = -span;\n      extent.reverse();\n    }\n\n    var result = helper.intervalScaleNiceTicks(extent, splitNumber, minInterval, maxInterval);\n    this._intervalPrecision = result.intervalPrecision;\n    this._interval = result.interval;\n    this._niceExtent = result.niceTickExtent;\n  },\n\n  /**\n   * Nice extent.\n   * @param {Object} opt\n   * @param {number} [opt.splitNumber = 5] Given approx tick number\n   * @param {boolean} [opt.fixMin=false]\n   * @param {boolean} [opt.fixMax=false]\n   * @param {boolean} [opt.minInterval]\n   * @param {boolean} [opt.maxInterval]\n   */\n  niceExtent: function niceExtent(opt) {\n    var extent = this._extent; // If extent start and end are same, expand them\n\n    if (extent[0] === extent[1]) {\n      if (extent[0] !== 0) {\n        // Expand extent\n        var expandSize = extent[0]; // In the fowllowing case\n        //      Axis has been fixed max 100\n        //      Plus data are all 100 and axis extent are [100, 100].\n        // Extend to the both side will cause expanded max is larger than fixed max.\n        // So only expand to the smaller side.\n\n        if (!opt.fixMax) {\n          extent[1] += expandSize / 2;\n          extent[0] -= expandSize / 2;\n        } else {\n          extent[0] -= expandSize / 2;\n        }\n      } else {\n        extent[1] = 1;\n      }\n    }\n\n    var span = extent[1] - extent[0]; // If there are no data and extent are [Infinity, -Infinity]\n\n    if (!isFinite(span)) {\n      extent[0] = 0;\n      extent[1] = 1;\n    }\n\n    this.niceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval); // var extent = this._extent;\n\n    var interval = this._interval;\n\n    if (!opt.fixMin) {\n      extent[0] = roundNumber(Math.floor(extent[0] / interval) * interval);\n    }\n\n    if (!opt.fixMax) {\n      extent[1] = roundNumber(Math.ceil(extent[1] / interval) * interval);\n    }\n  }\n});\n/**\n * @return {module:echarts/scale/Time}\n */\n\nIntervalScale.create = function () {\n  return new IntervalScale();\n};\n\nvar _default = IntervalScale;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/scale/Interval.js"],"names":["numberUtil","require","formatUtil","Scale","helper","roundNumber","round","IntervalScale","extend","type","_interval","_intervalPrecision","setExtent","start","end","thisExtent","_extent","isNaN","parseFloat","unionExtent","other","extent","prototype","call","getInterval","setInterval","interval","_niceExtent","slice","getIntervalPrecision","getTicks","expandToNicedExtent","niceTickExtent","intervalPrecision","ticks","safeLimit","push","tick","length","lastNiceTick","getMinorTicks","splitNumber","minorTicks","getExtent","i","nextTick","prevTick","count","minorTicksGroup","minorInterval","minorTick","getLabel","data","opt","precision","getPrecisionSafe","addCommas","niceTicks","minInterval","maxInterval","span","isFinite","reverse","result","intervalScaleNiceTicks","niceExtent","expandSize","fixMax","fixMin","Math","floor","ceil","create","_default","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar numberUtil = require(\"../util/number\");\n\nvar formatUtil = require(\"../util/format\");\n\nvar Scale = require(\"./Scale\");\n\nvar helper = require(\"./helper\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Interval scale\n * @module echarts/scale/Interval\n */\nvar roundNumber = numberUtil.round;\n/**\n * @alias module:echarts/coord/scale/Interval\n * @constructor\n */\n\nvar IntervalScale = Scale.extend({\n  type: 'interval',\n  _interval: 0,\n  _intervalPrecision: 2,\n  setExtent: function (start, end) {\n    var thisExtent = this._extent; //start,end may be a Number like '25',so...\n\n    if (!isNaN(start)) {\n      thisExtent[0] = parseFloat(start);\n    }\n\n    if (!isNaN(end)) {\n      thisExtent[1] = parseFloat(end);\n    }\n  },\n  unionExtent: function (other) {\n    var extent = this._extent;\n    other[0] < extent[0] && (extent[0] = other[0]);\n    other[1] > extent[1] && (extent[1] = other[1]); // unionExtent may called by it's sub classes\n\n    IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);\n  },\n\n  /**\n   * Get interval\n   */\n  getInterval: function () {\n    return this._interval;\n  },\n\n  /**\n   * Set interval\n   */\n  setInterval: function (interval) {\n    this._interval = interval; // Dropped auto calculated niceExtent and use user setted extent\n    // We assume user wan't to set both interval, min, max to get a better result\n\n    this._niceExtent = this._extent.slice();\n    this._intervalPrecision = helper.getIntervalPrecision(interval);\n  },\n\n  /**\n   * @param {boolean} [expandToNicedExtent=false] If expand the ticks to niced extent.\n   * @return {Array.<number>}\n   */\n  getTicks: function (expandToNicedExtent) {\n    var interval = this._interval;\n    var extent = this._extent;\n    var niceTickExtent = this._niceExtent;\n    var intervalPrecision = this._intervalPrecision;\n    var ticks = []; // If interval is 0, return [];\n\n    if (!interval) {\n      return ticks;\n    } // Consider this case: using dataZoom toolbox, zoom and zoom.\n\n\n    var safeLimit = 10000;\n\n    if (extent[0] < niceTickExtent[0]) {\n      if (expandToNicedExtent) {\n        ticks.push(roundNumber(niceTickExtent[0] - interval, intervalPrecision));\n      } else {\n        ticks.push(extent[0]);\n      }\n    }\n\n    var tick = niceTickExtent[0];\n\n    while (tick <= niceTickExtent[1]) {\n      ticks.push(tick); // Avoid rounding error\n\n      tick = roundNumber(tick + interval, intervalPrecision);\n\n      if (tick === ticks[ticks.length - 1]) {\n        // Consider out of safe float point, e.g.,\n        // -3711126.9907707 + 2e-10 === -3711126.9907707\n        break;\n      }\n\n      if (ticks.length > safeLimit) {\n        return [];\n      }\n    } // Consider this case: the last item of ticks is smaller\n    // than niceTickExtent[1] and niceTickExtent[1] === extent[1].\n\n\n    var lastNiceTick = ticks.length ? ticks[ticks.length - 1] : niceTickExtent[1];\n\n    if (extent[1] > lastNiceTick) {\n      if (expandToNicedExtent) {\n        ticks.push(roundNumber(lastNiceTick + interval, intervalPrecision));\n      } else {\n        ticks.push(extent[1]);\n      }\n    }\n\n    return ticks;\n  },\n\n  /**\n   * @param {number} [splitNumber=5]\n   * @return {Array.<Array.<number>>}\n   */\n  getMinorTicks: function (splitNumber) {\n    var ticks = this.getTicks(true);\n    var minorTicks = [];\n    var extent = this.getExtent();\n\n    for (var i = 1; i < ticks.length; i++) {\n      var nextTick = ticks[i];\n      var prevTick = ticks[i - 1];\n      var count = 0;\n      var minorTicksGroup = [];\n      var interval = nextTick - prevTick;\n      var minorInterval = interval / splitNumber;\n\n      while (count < splitNumber - 1) {\n        var minorTick = numberUtil.round(prevTick + (count + 1) * minorInterval); // For the first and last interval. The count may be less than splitNumber.\n\n        if (minorTick > extent[0] && minorTick < extent[1]) {\n          minorTicksGroup.push(minorTick);\n        }\n\n        count++;\n      }\n\n      minorTicks.push(minorTicksGroup);\n    }\n\n    return minorTicks;\n  },\n\n  /**\n   * @param {number} data\n   * @param {Object} [opt]\n   * @param {number|string} [opt.precision] If 'auto', use nice presision.\n   * @param {boolean} [opt.pad] returns 1.50 but not 1.5 if precision is 2.\n   * @return {string}\n   */\n  getLabel: function (data, opt) {\n    if (data == null) {\n      return '';\n    }\n\n    var precision = opt && opt.precision;\n\n    if (precision == null) {\n      precision = numberUtil.getPrecisionSafe(data) || 0;\n    } else if (precision === 'auto') {\n      // Should be more precise then tick.\n      precision = this._intervalPrecision;\n    } // (1) If `precision` is set, 12.005 should be display as '12.00500'.\n    // (2) Use roundNumber (toFixed) to avoid scientific notation like '3.5e-7'.\n\n\n    data = roundNumber(data, precision, true);\n    return formatUtil.addCommas(data);\n  },\n\n  /**\n   * Update interval and extent of intervals for nice ticks\n   *\n   * @param {number} [splitNumber = 5] Desired number of ticks\n   * @param {number} [minInterval]\n   * @param {number} [maxInterval]\n   */\n  niceTicks: function (splitNumber, minInterval, maxInterval) {\n    splitNumber = splitNumber || 5;\n    var extent = this._extent;\n    var span = extent[1] - extent[0];\n\n    if (!isFinite(span)) {\n      return;\n    } // User may set axis min 0 and data are all negative\n    // FIXME If it needs to reverse ?\n\n\n    if (span < 0) {\n      span = -span;\n      extent.reverse();\n    }\n\n    var result = helper.intervalScaleNiceTicks(extent, splitNumber, minInterval, maxInterval);\n    this._intervalPrecision = result.intervalPrecision;\n    this._interval = result.interval;\n    this._niceExtent = result.niceTickExtent;\n  },\n\n  /**\n   * Nice extent.\n   * @param {Object} opt\n   * @param {number} [opt.splitNumber = 5] Given approx tick number\n   * @param {boolean} [opt.fixMin=false]\n   * @param {boolean} [opt.fixMax=false]\n   * @param {boolean} [opt.minInterval]\n   * @param {boolean} [opt.maxInterval]\n   */\n  niceExtent: function (opt) {\n    var extent = this._extent; // If extent start and end are same, expand them\n\n    if (extent[0] === extent[1]) {\n      if (extent[0] !== 0) {\n        // Expand extent\n        var expandSize = extent[0]; // In the fowllowing case\n        //      Axis has been fixed max 100\n        //      Plus data are all 100 and axis extent are [100, 100].\n        // Extend to the both side will cause expanded max is larger than fixed max.\n        // So only expand to the smaller side.\n\n        if (!opt.fixMax) {\n          extent[1] += expandSize / 2;\n          extent[0] -= expandSize / 2;\n        } else {\n          extent[0] -= expandSize / 2;\n        }\n      } else {\n        extent[1] = 1;\n      }\n    }\n\n    var span = extent[1] - extent[0]; // If there are no data and extent are [Infinity, -Infinity]\n\n    if (!isFinite(span)) {\n      extent[0] = 0;\n      extent[1] = 1;\n    }\n\n    this.niceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval); // var extent = this._extent;\n\n    var interval = this._interval;\n\n    if (!opt.fixMin) {\n      extent[0] = roundNumber(Math.floor(extent[0] / interval) * interval);\n    }\n\n    if (!opt.fixMax) {\n      extent[1] = roundNumber(Math.ceil(extent[1] / interval) * interval);\n    }\n  }\n});\n/**\n * @return {module:echarts/scale/Time}\n */\n\nIntervalScale.create = function () {\n  return new IntervalScale();\n};\n\nvar _default = IntervalScale;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}