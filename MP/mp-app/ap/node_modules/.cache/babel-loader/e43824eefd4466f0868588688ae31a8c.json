{"ast":null,"code":"import _objectSpread from \"/home/johnatan/MP/mp-app/ap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/johnatan/MP/mp-app/ap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/johnatan/MP/mp-app/ap/src/app/views/Drag&Drop/SimpleHorizontalList.jsx\";\n\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'; // fake data generator\n\nvar getItems = function getItems(count) {\n  return Array.from({\n    length: count\n  }, function (v, k) {\n    return k;\n  }).map(function (k) {\n    return {\n      id: \"item-\".concat(k),\n      content: \"item \".concat(k)\n    };\n  });\n}; // a little function to help us with reordering the result\n\n\nvar reorder = function reorder(list, startIndex, endIndex) {\n  var result = Array.from(list);\n\n  var _result$splice = result.splice(startIndex, 1),\n      _result$splice2 = _slicedToArray(_result$splice, 1),\n      removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nvar grid = 8;\n\nvar getItemStyle = function getItemStyle(isDragging, draggableStyle) {\n  return _objectSpread({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid * 2,\n    margin: \"0 \".concat(grid, \"px 0 0\"),\n    boxShadow: 'var(--elevation-z4)',\n    borderRadius: '4px',\n    // change background colour if dragging\n    background: isDragging ? 'var(--primary)' : 'var(--bg-paper)'\n  }, draggableStyle);\n};\n\nvar getListStyle = function getListStyle(isDraggingOver) {\n  return {\n    borderRadius: '4px',\n    background: isDraggingOver ? 'rgba(0,0,0, .1)' : 'var(--bg-default)',\n    display: 'flex',\n    padding: grid,\n    overflow: 'auto'\n  };\n};\n\nvar SimpleHorizontalList = function SimpleHorizontalList() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      item = _useState2[0],\n      setItem = _useState2[1];\n\n  useEffect(function () {\n    setItem(getItems(6));\n  }, []);\n\n  var onDragEnd = function onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    var tempItems = reorder(item, result.source.index, result.destination.index);\n    setItem(tempItems);\n  }; // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n\n\n  return /*#__PURE__*/React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Droppable, {\n    droppableId: \"droppable\",\n    direction: \"horizontal\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, function (provided, snapshot) {\n    return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n      ref: provided.innerRef,\n      style: getListStyle(snapshot.isDraggingOver)\n    }, provided.droppableProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }\n    }), item.map(function (item, index) {\n      return /*#__PURE__*/React.createElement(Draggable, {\n        key: item.id,\n        draggableId: item.id,\n        index: index,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 29\n        }\n      }, function (provided, snapshot) {\n        return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n          ref: provided.innerRef\n        }, provided.draggableProps, provided.dragHandleProps, {\n          style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 37\n          }\n        }), item.content);\n      });\n    }), provided.placeholder);\n  }));\n};\n\nexport default SimpleHorizontalList;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/src/app/views/Drag&Drop/SimpleHorizontalList.jsx"],"names":["React","useState","useEffect","DragDropContext","Droppable","Draggable","getItems","count","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","splice","removed","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","boxShadow","borderRadius","background","getListStyle","isDraggingOver","display","overflow","SimpleHorizontalList","item","setItem","onDragEnd","destination","tempItems","source","index","provided","snapshot","innerRef","droppableProps","draggableProps","dragHandleProps","style","placeholder"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\n\n// fake data generator\nconst getItems = (count) =>\n    Array.from({ length: count }, (v, k) => k).map((k) => ({\n        id: `item-${k}`,\n        content: `item ${k}`,\n    }))\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list)\n    const [removed] = result.splice(startIndex, 1)\n    result.splice(endIndex, 0, removed)\n\n    return result\n}\n\nconst grid = 8\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid * 2,\n    margin: `0 ${grid}px 0 0`,\n    boxShadow: 'var(--elevation-z4)',\n    borderRadius: '4px',\n    // change background colour if dragging\n    background: isDragging ? 'var(--primary)' : 'var(--bg-paper)',\n\n    // styles we need to apply on draggables\n    ...draggableStyle,\n})\n\nconst getListStyle = (isDraggingOver) => ({\n    borderRadius: '4px',\n    background: isDraggingOver ? 'rgba(0,0,0, .1)' : 'var(--bg-default)',\n    display: 'flex',\n    padding: grid,\n    overflow: 'auto',\n})\n\nconst SimpleHorizontalList = () => {\n    const [item, setItem] = useState([])\n\n    useEffect(() => {\n        setItem(getItems(6))\n    }, [])\n\n    const onDragEnd = (result) => {\n        // dropped outside the list\n        if (!result.destination) {\n            return\n        }\n\n        const tempItems = reorder(\n            item,\n            result.source.index,\n            result.destination.index\n        )\n        setItem(tempItems)\n    }\n\n    // Normally you would want to split things out into separate components.\n    // But in this example everything is just done in one place for simplicity\n    return (\n        <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n                {(provided, snapshot) => (\n                    <div\n                        ref={provided.innerRef}\n                        style={getListStyle(snapshot.isDraggingOver)}\n                        {...provided.droppableProps}\n                    >\n                        {item.map((item, index) => (\n                            <Draggable\n                                key={item.id}\n                                draggableId={item.id}\n                                index={index}\n                            >\n                                {(provided, snapshot) => (\n                                    <div\n                                        ref={provided.innerRef}\n                                        {...provided.draggableProps}\n                                        {...provided.dragHandleProps}\n                                        style={getItemStyle(\n                                            snapshot.isDragging,\n                                            provided.draggableProps.style\n                                        )}\n                                    >\n                                        {item.content}\n                                    </div>\n                                )}\n                            </Draggable>\n                        ))}\n                        {provided.placeholder}\n                    </div>\n                )}\n            </Droppable>\n        </DragDropContext>\n    )\n}\n\nexport default SimpleHorizontalList\n"]},"metadata":{},"sourceType":"module"}