{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar createRenderPlanner = require(\"../helper/createRenderPlanner\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar positiveBorderColorQuery = ['itemStyle', 'borderColor'];\nvar negativeBorderColorQuery = ['itemStyle', 'borderColor0'];\nvar positiveColorQuery = ['itemStyle', 'color'];\nvar negativeColorQuery = ['itemStyle', 'color0'];\nvar _default = {\n  seriesType: 'candlestick',\n  plan: createRenderPlanner(),\n  // For legend.\n  performRawSeries: true,\n  reset: function reset(seriesModel, ecModel) {\n    var data = seriesModel.getData();\n    data.setVisual({\n      legendSymbol: 'roundRect',\n      colorP: getColor(1, seriesModel),\n      colorN: getColor(-1, seriesModel),\n      borderColorP: getBorderColor(1, seriesModel),\n      borderColorN: getBorderColor(-1, seriesModel)\n    }); // Only visible series has each data be visual encoded\n\n    if (ecModel.isSeriesFiltered(seriesModel)) {\n      return;\n    }\n\n    var isLargeRender = seriesModel.pipelineContext.large;\n    return !isLargeRender && {\n      progress: progress\n    };\n\n    function progress(params, data) {\n      var dataIndex;\n\n      while ((dataIndex = params.next()) != null) {\n        var itemModel = data.getItemModel(dataIndex);\n        var sign = data.getItemLayout(dataIndex).sign;\n        data.setItemVisual(dataIndex, {\n          color: getColor(sign, itemModel),\n          borderColor: getBorderColor(sign, itemModel)\n        });\n      }\n    }\n\n    function getColor(sign, model) {\n      return model.get(sign > 0 ? positiveColorQuery : negativeColorQuery);\n    }\n\n    function getBorderColor(sign, model) {\n      return model.get(sign > 0 ? positiveBorderColorQuery : negativeBorderColorQuery);\n    }\n  }\n};\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/chart/candlestick/candlestickVisual.js"],"names":["createRenderPlanner","require","positiveBorderColorQuery","negativeBorderColorQuery","positiveColorQuery","negativeColorQuery","_default","seriesType","plan","performRawSeries","reset","seriesModel","ecModel","data","getData","setVisual","legendSymbol","colorP","getColor","colorN","borderColorP","getBorderColor","borderColorN","isSeriesFiltered","isLargeRender","pipelineContext","large","progress","params","dataIndex","next","itemModel","getItemModel","sign","getItemLayout","setItemVisual","color","borderColor","model","get","module","exports"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,mBAAmB,GAAGC,OAAO,CAAC,+BAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,wBAAwB,GAAG,CAAC,WAAD,EAAc,aAAd,CAA/B;AACA,IAAIC,wBAAwB,GAAG,CAAC,WAAD,EAAc,cAAd,CAA/B;AACA,IAAIC,kBAAkB,GAAG,CAAC,WAAD,EAAc,OAAd,CAAzB;AACA,IAAIC,kBAAkB,GAAG,CAAC,WAAD,EAAc,QAAd,CAAzB;AACA,IAAIC,QAAQ,GAAG;AACbC,EAAAA,UAAU,EAAE,aADC;AAEbC,EAAAA,IAAI,EAAER,mBAAmB,EAFZ;AAGb;AACAS,EAAAA,gBAAgB,EAAE,IAJL;AAKbC,EAAAA,KAAK,EAAE,eAAUC,WAAV,EAAuBC,OAAvB,EAAgC;AACrC,QAAIC,IAAI,GAAGF,WAAW,CAACG,OAAZ,EAAX;AACAD,IAAAA,IAAI,CAACE,SAAL,CAAe;AACbC,MAAAA,YAAY,EAAE,WADD;AAEbC,MAAAA,MAAM,EAAEC,QAAQ,CAAC,CAAD,EAAIP,WAAJ,CAFH;AAGbQ,MAAAA,MAAM,EAAED,QAAQ,CAAC,CAAC,CAAF,EAAKP,WAAL,CAHH;AAIbS,MAAAA,YAAY,EAAEC,cAAc,CAAC,CAAD,EAAIV,WAAJ,CAJf;AAKbW,MAAAA,YAAY,EAAED,cAAc,CAAC,CAAC,CAAF,EAAKV,WAAL;AALf,KAAf,EAFqC,CAQjC;;AAEJ,QAAIC,OAAO,CAACW,gBAAR,CAAyBZ,WAAzB,CAAJ,EAA2C;AACzC;AACD;;AAED,QAAIa,aAAa,GAAGb,WAAW,CAACc,eAAZ,CAA4BC,KAAhD;AACA,WAAO,CAACF,aAAD,IAAkB;AACvBG,MAAAA,QAAQ,EAAEA;AADa,KAAzB;;AAIA,aAASA,QAAT,CAAkBC,MAAlB,EAA0Bf,IAA1B,EAAgC;AAC9B,UAAIgB,SAAJ;;AAEA,aAAO,CAACA,SAAS,GAAGD,MAAM,CAACE,IAAP,EAAb,KAA+B,IAAtC,EAA4C;AAC1C,YAAIC,SAAS,GAAGlB,IAAI,CAACmB,YAAL,CAAkBH,SAAlB,CAAhB;AACA,YAAII,IAAI,GAAGpB,IAAI,CAACqB,aAAL,CAAmBL,SAAnB,EAA8BI,IAAzC;AACApB,QAAAA,IAAI,CAACsB,aAAL,CAAmBN,SAAnB,EAA8B;AAC5BO,UAAAA,KAAK,EAAElB,QAAQ,CAACe,IAAD,EAAOF,SAAP,CADa;AAE5BM,UAAAA,WAAW,EAAEhB,cAAc,CAACY,IAAD,EAAOF,SAAP;AAFC,SAA9B;AAID;AACF;;AAED,aAASb,QAAT,CAAkBe,IAAlB,EAAwBK,KAAxB,EAA+B;AAC7B,aAAOA,KAAK,CAACC,GAAN,CAAUN,IAAI,GAAG,CAAP,GAAW7B,kBAAX,GAAgCC,kBAA1C,CAAP;AACD;;AAED,aAASgB,cAAT,CAAwBY,IAAxB,EAA8BK,KAA9B,EAAqC;AACnC,aAAOA,KAAK,CAACC,GAAN,CAAUN,IAAI,GAAG,CAAP,GAAW/B,wBAAX,GAAsCC,wBAAhD,CAAP;AACD;AACF;AA5CY,CAAf;AA8CAqC,MAAM,CAACC,OAAP,GAAiBnC,QAAjB","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar createRenderPlanner = require(\"../helper/createRenderPlanner\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar positiveBorderColorQuery = ['itemStyle', 'borderColor'];\nvar negativeBorderColorQuery = ['itemStyle', 'borderColor0'];\nvar positiveColorQuery = ['itemStyle', 'color'];\nvar negativeColorQuery = ['itemStyle', 'color0'];\nvar _default = {\n  seriesType: 'candlestick',\n  plan: createRenderPlanner(),\n  // For legend.\n  performRawSeries: true,\n  reset: function (seriesModel, ecModel) {\n    var data = seriesModel.getData();\n    data.setVisual({\n      legendSymbol: 'roundRect',\n      colorP: getColor(1, seriesModel),\n      colorN: getColor(-1, seriesModel),\n      borderColorP: getBorderColor(1, seriesModel),\n      borderColorN: getBorderColor(-1, seriesModel)\n    }); // Only visible series has each data be visual encoded\n\n    if (ecModel.isSeriesFiltered(seriesModel)) {\n      return;\n    }\n\n    var isLargeRender = seriesModel.pipelineContext.large;\n    return !isLargeRender && {\n      progress: progress\n    };\n\n    function progress(params, data) {\n      var dataIndex;\n\n      while ((dataIndex = params.next()) != null) {\n        var itemModel = data.getItemModel(dataIndex);\n        var sign = data.getItemLayout(dataIndex).sign;\n        data.setItemVisual(dataIndex, {\n          color: getColor(sign, itemModel),\n          borderColor: getBorderColor(sign, itemModel)\n        });\n      }\n    }\n\n    function getColor(sign, model) {\n      return model.get(sign > 0 ? positiveColorQuery : negativeColorQuery);\n    }\n\n    function getBorderColor(sign, model) {\n      return model.get(sign > 0 ? positiveBorderColorQuery : negativeBorderColorQuery);\n    }\n  }\n};\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}