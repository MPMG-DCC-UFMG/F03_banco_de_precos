{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar SymbolClz = require(\"../helper/Symbol\");\n\nvar _layoutHelper = require(\"./layoutHelper\");\n\nvar radialCoordinate = _layoutHelper.radialCoordinate;\n\nvar echarts = require(\"../../echarts\");\n\nvar bbox = require(\"zrender/lib/core/bbox\");\n\nvar View = require(\"../../coord/View\");\n\nvar roamHelper = require(\"../../component/helper/roamHelper\");\n\nvar RoamController = require(\"../../component/helper/RoamController\");\n\nvar _cursorHelper = require(\"../../component/helper/cursorHelper\");\n\nvar onIrrelevantElement = _cursorHelper.onIrrelevantElement;\n\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar _number = require(\"../../util/number\");\n\nvar parsePercent = _number.parsePercent;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar TreeShape = graphic.extendShape({\n  shape: {\n    parentPoint: [],\n    childPoints: [],\n    orient: '',\n    forkPosition: ''\n  },\n  style: {\n    stroke: '#000',\n    fill: null\n  },\n  buildPath: function buildPath(ctx, shape) {\n    var childPoints = shape.childPoints;\n    var childLen = childPoints.length;\n    var parentPoint = shape.parentPoint;\n    var firstChildPos = childPoints[0];\n    var lastChildPos = childPoints[childLen - 1];\n\n    if (childLen === 1) {\n      ctx.moveTo(parentPoint[0], parentPoint[1]);\n      ctx.lineTo(firstChildPos[0], firstChildPos[1]);\n      return;\n    }\n\n    var orient = shape.orient;\n    var forkDim = orient === 'TB' || orient === 'BT' ? 0 : 1;\n    var otherDim = 1 - forkDim;\n    var forkPosition = parsePercent(shape.forkPosition, 1);\n    var tmpPoint = [];\n    tmpPoint[forkDim] = parentPoint[forkDim];\n    tmpPoint[otherDim] = parentPoint[otherDim] + (lastChildPos[otherDim] - parentPoint[otherDim]) * forkPosition;\n    ctx.moveTo(parentPoint[0], parentPoint[1]);\n    ctx.lineTo(tmpPoint[0], tmpPoint[1]);\n    ctx.moveTo(firstChildPos[0], firstChildPos[1]);\n    tmpPoint[forkDim] = firstChildPos[forkDim];\n    ctx.lineTo(tmpPoint[0], tmpPoint[1]);\n    tmpPoint[forkDim] = lastChildPos[forkDim];\n    ctx.lineTo(tmpPoint[0], tmpPoint[1]);\n    ctx.lineTo(lastChildPos[0], lastChildPos[1]);\n\n    for (var i = 1; i < childLen - 1; i++) {\n      var point = childPoints[i];\n      ctx.moveTo(point[0], point[1]);\n      tmpPoint[forkDim] = point[forkDim];\n      ctx.lineTo(tmpPoint[0], tmpPoint[1]);\n    }\n  }\n});\n\nvar _default = echarts.extendChartView({\n  type: 'tree',\n\n  /**\n   * Init the chart\n   * @override\n   * @param  {module:echarts/model/Global} ecModel\n   * @param  {module:echarts/ExtensionAPI} api\n   */\n  init: function init(ecModel, api) {\n    /**\n     * @private\n     * @type {module:echarts/data/Tree}\n     */\n    this._oldTree;\n    /**\n     * @private\n     * @type {module:zrender/container/Group}\n     */\n\n    this._mainGroup = new graphic.Group();\n    /**\n     * @private\n     * @type {module:echarts/componet/helper/RoamController}\n     */\n\n    this._controller = new RoamController(api.getZr());\n    this._controllerHost = {\n      target: this.group\n    };\n    this.group.add(this._mainGroup);\n  },\n  render: function render(seriesModel, ecModel, api, payload) {\n    var data = seriesModel.getData();\n    var layoutInfo = seriesModel.layoutInfo;\n    var group = this._mainGroup;\n    var layout = seriesModel.get('layout');\n\n    if (layout === 'radial') {\n      group.attr('position', [layoutInfo.x + layoutInfo.width / 2, layoutInfo.y + layoutInfo.height / 2]);\n    } else {\n      group.attr('position', [layoutInfo.x, layoutInfo.y]);\n    }\n\n    this._updateViewCoordSys(seriesModel, layoutInfo, layout);\n\n    this._updateController(seriesModel, ecModel, api);\n\n    var oldData = this._data;\n    var seriesScope = {\n      expandAndCollapse: seriesModel.get('expandAndCollapse'),\n      layout: layout,\n      edgeShape: seriesModel.get('edgeShape'),\n      edgeForkPosition: seriesModel.get('edgeForkPosition'),\n      orient: seriesModel.getOrient(),\n      curvature: seriesModel.get('lineStyle.curveness'),\n      symbolRotate: seriesModel.get('symbolRotate'),\n      symbolOffset: seriesModel.get('symbolOffset'),\n      hoverAnimation: seriesModel.get('hoverAnimation'),\n      useNameLabel: true,\n      fadeIn: true\n    };\n    data.diff(oldData).add(function (newIdx) {\n      if (symbolNeedsDraw(data, newIdx)) {\n        // Create node and edge\n        updateNode(data, newIdx, null, group, seriesModel, seriesScope);\n      }\n    }).update(function (newIdx, oldIdx) {\n      var symbolEl = oldData.getItemGraphicEl(oldIdx);\n\n      if (!symbolNeedsDraw(data, newIdx)) {\n        symbolEl && removeNode(oldData, oldIdx, symbolEl, group, seriesModel, seriesScope);\n        return;\n      } // Update node and edge\n\n\n      updateNode(data, newIdx, symbolEl, group, seriesModel, seriesScope);\n    }).remove(function (oldIdx) {\n      var symbolEl = oldData.getItemGraphicEl(oldIdx); // When remove a collapsed node of subtree, since the collapsed\n      // node haven't been initialized with a symbol element,\n      // you can't found it's symbol element through index.\n      // so if we want to remove the symbol element we should insure\n      // that the symbol element is not null.\n\n      if (symbolEl) {\n        removeNode(oldData, oldIdx, symbolEl, group, seriesModel, seriesScope);\n      }\n    }).execute();\n    this._nodeScaleRatio = seriesModel.get('nodeScaleRatio');\n\n    this._updateNodeAndLinkScale(seriesModel);\n\n    if (seriesScope.expandAndCollapse === true) {\n      data.eachItemGraphicEl(function (el, dataIndex) {\n        el.off('click').on('click', function () {\n          api.dispatchAction({\n            type: 'treeExpandAndCollapse',\n            seriesId: seriesModel.id,\n            dataIndex: dataIndex\n          });\n        });\n      });\n    }\n\n    this._data = data;\n  },\n  _updateViewCoordSys: function _updateViewCoordSys(seriesModel) {\n    var data = seriesModel.getData();\n    var points = [];\n    data.each(function (idx) {\n      var layout = data.getItemLayout(idx);\n\n      if (layout && !isNaN(layout.x) && !isNaN(layout.y)) {\n        points.push([+layout.x, +layout.y]);\n      }\n    });\n    var min = [];\n    var max = [];\n    bbox.fromPoints(points, min, max); // If don't Store min max when collapse the root node after roam,\n    // the root node will disappear.\n\n    var oldMin = this._min;\n    var oldMax = this._max; // If width or height is 0\n\n    if (max[0] - min[0] === 0) {\n      min[0] = oldMin ? oldMin[0] : min[0] - 1;\n      max[0] = oldMax ? oldMax[0] : max[0] + 1;\n    }\n\n    if (max[1] - min[1] === 0) {\n      min[1] = oldMin ? oldMin[1] : min[1] - 1;\n      max[1] = oldMax ? oldMax[1] : max[1] + 1;\n    }\n\n    var viewCoordSys = seriesModel.coordinateSystem = new View();\n    viewCoordSys.zoomLimit = seriesModel.get('scaleLimit');\n    viewCoordSys.setBoundingRect(min[0], min[1], max[0] - min[0], max[1] - min[1]);\n    viewCoordSys.setCenter(seriesModel.get('center'));\n    viewCoordSys.setZoom(seriesModel.get('zoom')); // Here we use viewCoordSys just for computing the 'position' and 'scale' of the group\n\n    this.group.attr({\n      position: viewCoordSys.position,\n      scale: viewCoordSys.scale\n    });\n    this._viewCoordSys = viewCoordSys;\n    this._min = min;\n    this._max = max;\n  },\n  _updateController: function _updateController(seriesModel, ecModel, api) {\n    var controller = this._controller;\n    var controllerHost = this._controllerHost;\n    var group = this.group;\n    controller.setPointerChecker(function (e, x, y) {\n      var rect = group.getBoundingRect();\n      rect.applyTransform(group.transform);\n      return rect.contain(x, y) && !onIrrelevantElement(e, api, seriesModel);\n    });\n    controller.enable(seriesModel.get('roam'));\n    controllerHost.zoomLimit = seriesModel.get('scaleLimit');\n    controllerHost.zoom = seriesModel.coordinateSystem.getZoom();\n    controller.off('pan').off('zoom').on('pan', function (e) {\n      roamHelper.updateViewOnPan(controllerHost, e.dx, e.dy);\n      api.dispatchAction({\n        seriesId: seriesModel.id,\n        type: 'treeRoam',\n        dx: e.dx,\n        dy: e.dy\n      });\n    }, this).on('zoom', function (e) {\n      roamHelper.updateViewOnZoom(controllerHost, e.scale, e.originX, e.originY);\n      api.dispatchAction({\n        seriesId: seriesModel.id,\n        type: 'treeRoam',\n        zoom: e.scale,\n        originX: e.originX,\n        originY: e.originY\n      });\n\n      this._updateNodeAndLinkScale(seriesModel);\n    }, this);\n  },\n  _updateNodeAndLinkScale: function _updateNodeAndLinkScale(seriesModel) {\n    var data = seriesModel.getData();\n\n    var nodeScale = this._getNodeGlobalScale(seriesModel);\n\n    var invScale = [nodeScale, nodeScale];\n    data.eachItemGraphicEl(function (el, idx) {\n      el.attr('scale', invScale);\n    });\n  },\n  _getNodeGlobalScale: function _getNodeGlobalScale(seriesModel) {\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys.type !== 'view') {\n      return 1;\n    }\n\n    var nodeScaleRatio = this._nodeScaleRatio;\n    var groupScale = coordSys.scale;\n    var groupZoom = groupScale && groupScale[0] || 1; // Scale node when zoom changes\n\n    var roamZoom = coordSys.getZoom();\n    var nodeScale = (roamZoom - 1) * nodeScaleRatio + 1;\n    return nodeScale / groupZoom;\n  },\n  dispose: function dispose() {\n    this._controller && this._controller.dispose();\n    this._controllerHost = {};\n  },\n  remove: function remove() {\n    this._mainGroup.removeAll();\n\n    this._data = null;\n  }\n});\n\nfunction symbolNeedsDraw(data, dataIndex) {\n  var layout = data.getItemLayout(dataIndex);\n  return layout && !isNaN(layout.x) && !isNaN(layout.y) && data.getItemVisual(dataIndex, 'symbol') !== 'none';\n}\n\nfunction getTreeNodeStyle(node, itemModel, seriesScope) {\n  seriesScope.itemModel = itemModel;\n  seriesScope.itemStyle = itemModel.getModel('itemStyle').getItemStyle();\n  seriesScope.hoverItemStyle = itemModel.getModel('emphasis.itemStyle').getItemStyle();\n  seriesScope.lineStyle = itemModel.getModel('lineStyle').getLineStyle();\n  seriesScope.labelModel = itemModel.getModel('label');\n  seriesScope.hoverLabelModel = itemModel.getModel('emphasis.label');\n\n  if (node.isExpand === false && node.children.length !== 0) {\n    seriesScope.symbolInnerColor = seriesScope.itemStyle.fill;\n  } else {\n    seriesScope.symbolInnerColor = '#fff';\n  }\n\n  return seriesScope;\n}\n\nfunction updateNode(data, dataIndex, symbolEl, group, seriesModel, seriesScope) {\n  var isInit = !symbolEl;\n  var node = data.tree.getNodeByDataIndex(dataIndex);\n  var itemModel = node.getModel();\n  var seriesScope = getTreeNodeStyle(node, itemModel, seriesScope);\n  var virtualRoot = data.tree.root;\n  var source = node.parentNode === virtualRoot ? node : node.parentNode || node;\n  var sourceSymbolEl = data.getItemGraphicEl(source.dataIndex);\n  var sourceLayout = source.getLayout();\n  var sourceOldLayout = sourceSymbolEl ? {\n    x: sourceSymbolEl.position[0],\n    y: sourceSymbolEl.position[1],\n    rawX: sourceSymbolEl.__radialOldRawX,\n    rawY: sourceSymbolEl.__radialOldRawY\n  } : sourceLayout;\n  var targetLayout = node.getLayout();\n\n  if (isInit) {\n    symbolEl = new SymbolClz(data, dataIndex, seriesScope);\n    symbolEl.attr('position', [sourceOldLayout.x, sourceOldLayout.y]);\n  } else {\n    symbolEl.updateData(data, dataIndex, seriesScope);\n  }\n\n  symbolEl.__radialOldRawX = symbolEl.__radialRawX;\n  symbolEl.__radialOldRawY = symbolEl.__radialRawY;\n  symbolEl.__radialRawX = targetLayout.rawX;\n  symbolEl.__radialRawY = targetLayout.rawY;\n  group.add(symbolEl);\n  data.setItemGraphicEl(dataIndex, symbolEl);\n  graphic.updateProps(symbolEl, {\n    position: [targetLayout.x, targetLayout.y]\n  }, seriesModel);\n  var symbolPath = symbolEl.getSymbolPath();\n\n  if (seriesScope.layout === 'radial') {\n    var realRoot = virtualRoot.children[0];\n    var rootLayout = realRoot.getLayout();\n    var length = realRoot.children.length;\n    var rad;\n    var isLeft;\n\n    if (targetLayout.x === rootLayout.x && node.isExpand === true) {\n      var center = {};\n      center.x = (realRoot.children[0].getLayout().x + realRoot.children[length - 1].getLayout().x) / 2;\n      center.y = (realRoot.children[0].getLayout().y + realRoot.children[length - 1].getLayout().y) / 2;\n      rad = Math.atan2(center.y - rootLayout.y, center.x - rootLayout.x);\n\n      if (rad < 0) {\n        rad = Math.PI * 2 + rad;\n      }\n\n      isLeft = center.x < rootLayout.x;\n\n      if (isLeft) {\n        rad = rad - Math.PI;\n      }\n    } else {\n      rad = Math.atan2(targetLayout.y - rootLayout.y, targetLayout.x - rootLayout.x);\n\n      if (rad < 0) {\n        rad = Math.PI * 2 + rad;\n      }\n\n      if (node.children.length === 0 || node.children.length !== 0 && node.isExpand === false) {\n        isLeft = targetLayout.x < rootLayout.x;\n\n        if (isLeft) {\n          rad = rad - Math.PI;\n        }\n      } else {\n        isLeft = targetLayout.x > rootLayout.x;\n\n        if (!isLeft) {\n          rad = rad - Math.PI;\n        }\n      }\n    }\n\n    var textPosition = isLeft ? 'left' : 'right';\n    var rotate = seriesScope.labelModel.get('rotate');\n    var labelRotateRadian = rotate * (Math.PI / 180);\n    symbolPath.setStyle({\n      textPosition: seriesScope.labelModel.get('position') || textPosition,\n      textRotation: rotate == null ? -rad : labelRotateRadian,\n      textOrigin: 'center',\n      verticalAlign: 'middle'\n    });\n  }\n\n  drawEdge(seriesModel, node, virtualRoot, symbolEl, sourceOldLayout, sourceLayout, targetLayout, group, seriesScope);\n}\n\nfunction drawEdge(seriesModel, node, virtualRoot, symbolEl, sourceOldLayout, sourceLayout, targetLayout, group, seriesScope) {\n  var edgeShape = seriesScope.edgeShape;\n  var edge = symbolEl.__edge;\n\n  if (edgeShape === 'curve') {\n    if (node.parentNode && node.parentNode !== virtualRoot) {\n      if (!edge) {\n        edge = symbolEl.__edge = new graphic.BezierCurve({\n          shape: getEdgeShape(seriesScope, sourceOldLayout, sourceOldLayout),\n          style: zrUtil.defaults({\n            opacity: 0,\n            strokeNoScale: true\n          }, seriesScope.lineStyle)\n        });\n      }\n\n      graphic.updateProps(edge, {\n        shape: getEdgeShape(seriesScope, sourceLayout, targetLayout),\n        style: zrUtil.defaults({\n          opacity: 1\n        }, seriesScope.lineStyle)\n      }, seriesModel);\n    }\n  } else if (edgeShape === 'polyline') {\n    if (seriesScope.layout === 'orthogonal') {\n      if (node !== virtualRoot && node.children && node.children.length !== 0 && node.isExpand === true) {\n        var children = node.children;\n        var childPoints = [];\n\n        for (var i = 0; i < children.length; i++) {\n          var childLayout = children[i].getLayout();\n          childPoints.push([childLayout.x, childLayout.y]);\n        }\n\n        if (!edge) {\n          edge = symbolEl.__edge = new TreeShape({\n            shape: {\n              parentPoint: [targetLayout.x, targetLayout.y],\n              childPoints: [[targetLayout.x, targetLayout.y]],\n              orient: seriesScope.orient,\n              forkPosition: seriesScope.edgeForkPosition\n            },\n            style: zrUtil.defaults({\n              opacity: 0,\n              strokeNoScale: true\n            }, seriesScope.lineStyle)\n          });\n        }\n\n        graphic.updateProps(edge, {\n          shape: {\n            parentPoint: [targetLayout.x, targetLayout.y],\n            childPoints: childPoints\n          },\n          style: zrUtil.defaults({\n            opacity: 1\n          }, seriesScope.lineStyle)\n        }, seriesModel);\n      }\n    } else {}\n  }\n\n  group.add(edge);\n}\n\nfunction removeNode(data, dataIndex, symbolEl, group, seriesModel, seriesScope) {\n  var node = data.tree.getNodeByDataIndex(dataIndex);\n  var virtualRoot = data.tree.root;\n  var itemModel = node.getModel();\n  var seriesScope = getTreeNodeStyle(node, itemModel, seriesScope);\n  var source = node.parentNode === virtualRoot ? node : node.parentNode || node;\n  var edgeShape = seriesScope.edgeShape;\n  var sourceLayout;\n\n  while (sourceLayout = source.getLayout(), sourceLayout == null) {\n    source = source.parentNode === virtualRoot ? source : source.parentNode || source;\n  }\n\n  graphic.updateProps(symbolEl, {\n    position: [sourceLayout.x + 1, sourceLayout.y + 1]\n  }, seriesModel, function () {\n    group.remove(symbolEl);\n    data.setItemGraphicEl(dataIndex, null);\n  });\n  symbolEl.fadeOut(null, {\n    keepLabel: true\n  });\n  var sourceSymbolEl = data.getItemGraphicEl(source.dataIndex);\n  var sourceEdge = sourceSymbolEl.__edge; // 1. when expand the sub tree, delete the children node should delete the edge of\n  // the source at the same time. because the polyline edge shape is only owned by the source.\n  // 2.when the node is the only children of the source, delete the node should delete the edge of\n  // the source at the same time. the same reason as above.\n\n  var edge = symbolEl.__edge || (source.isExpand === false || source.children.length === 1 ? sourceEdge : undefined);\n  var edgeShape = seriesScope.edgeShape;\n\n  if (edge) {\n    if (edgeShape === 'curve') {\n      graphic.updateProps(edge, {\n        shape: getEdgeShape(seriesScope, sourceLayout, sourceLayout),\n        style: {\n          opacity: 0\n        }\n      }, seriesModel, function () {\n        group.remove(edge);\n      });\n    } else if (edgeShape === 'polyline' && seriesScope.layout === 'orthogonal') {\n      graphic.updateProps(edge, {\n        shape: {\n          parentPoint: [sourceLayout.x, sourceLayout.y],\n          childPoints: [[sourceLayout.x, sourceLayout.y]]\n        },\n        style: {\n          opacity: 0\n        }\n      }, seriesModel, function () {\n        group.remove(edge);\n      });\n    }\n  }\n}\n\nfunction getEdgeShape(seriesScope, sourceLayout, targetLayout) {\n  var cpx1;\n  var cpy1;\n  var cpx2;\n  var cpy2;\n  var orient = seriesScope.orient;\n  var x1;\n  var x2;\n  var y1;\n  var y2;\n\n  if (seriesScope.layout === 'radial') {\n    x1 = sourceLayout.rawX;\n    y1 = sourceLayout.rawY;\n    x2 = targetLayout.rawX;\n    y2 = targetLayout.rawY;\n    var radialCoor1 = radialCoordinate(x1, y1);\n    var radialCoor2 = radialCoordinate(x1, y1 + (y2 - y1) * seriesScope.curvature);\n    var radialCoor3 = radialCoordinate(x2, y2 + (y1 - y2) * seriesScope.curvature);\n    var radialCoor4 = radialCoordinate(x2, y2);\n    return {\n      x1: radialCoor1.x,\n      y1: radialCoor1.y,\n      x2: radialCoor4.x,\n      y2: radialCoor4.y,\n      cpx1: radialCoor2.x,\n      cpy1: radialCoor2.y,\n      cpx2: radialCoor3.x,\n      cpy2: radialCoor3.y\n    };\n  } else {\n    x1 = sourceLayout.x;\n    y1 = sourceLayout.y;\n    x2 = targetLayout.x;\n    y2 = targetLayout.y;\n\n    if (orient === 'LR' || orient === 'RL') {\n      cpx1 = x1 + (x2 - x1) * seriesScope.curvature;\n      cpy1 = y1;\n      cpx2 = x2 + (x1 - x2) * seriesScope.curvature;\n      cpy2 = y2;\n    }\n\n    if (orient === 'TB' || orient === 'BT') {\n      cpx1 = x1;\n      cpy1 = y1 + (y2 - y1) * seriesScope.curvature;\n      cpx2 = x2;\n      cpy2 = y2 + (y1 - y2) * seriesScope.curvature;\n    }\n  }\n\n  return {\n    x1: x1,\n    y1: y1,\n    x2: x2,\n    y2: y2,\n    cpx1: cpx1,\n    cpy1: cpy1,\n    cpx2: cpx2,\n    cpy2: cpy2\n  };\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/chart/tree/TreeView.js"],"names":["zrUtil","require","graphic","SymbolClz","_layoutHelper","radialCoordinate","echarts","bbox","View","roamHelper","RoamController","_cursorHelper","onIrrelevantElement","_config","__DEV__","_number","parsePercent","TreeShape","extendShape","shape","parentPoint","childPoints","orient","forkPosition","style","stroke","fill","buildPath","ctx","childLen","length","firstChildPos","lastChildPos","moveTo","lineTo","forkDim","otherDim","tmpPoint","i","point","_default","extendChartView","type","init","ecModel","api","_oldTree","_mainGroup","Group","_controller","getZr","_controllerHost","target","group","add","render","seriesModel","payload","data","getData","layoutInfo","layout","get","attr","x","width","y","height","_updateViewCoordSys","_updateController","oldData","_data","seriesScope","expandAndCollapse","edgeShape","edgeForkPosition","getOrient","curvature","symbolRotate","symbolOffset","hoverAnimation","useNameLabel","fadeIn","diff","newIdx","symbolNeedsDraw","updateNode","update","oldIdx","symbolEl","getItemGraphicEl","removeNode","remove","execute","_nodeScaleRatio","_updateNodeAndLinkScale","eachItemGraphicEl","el","dataIndex","off","on","dispatchAction","seriesId","id","points","each","idx","getItemLayout","isNaN","push","min","max","fromPoints","oldMin","_min","oldMax","_max","viewCoordSys","coordinateSystem","zoomLimit","setBoundingRect","setCenter","setZoom","position","scale","_viewCoordSys","controller","controllerHost","setPointerChecker","e","rect","getBoundingRect","applyTransform","transform","contain","enable","zoom","getZoom","updateViewOnPan","dx","dy","updateViewOnZoom","originX","originY","nodeScale","_getNodeGlobalScale","invScale","coordSys","nodeScaleRatio","groupScale","groupZoom","roamZoom","dispose","removeAll","getItemVisual","getTreeNodeStyle","node","itemModel","itemStyle","getModel","getItemStyle","hoverItemStyle","lineStyle","getLineStyle","labelModel","hoverLabelModel","isExpand","children","symbolInnerColor","isInit","tree","getNodeByDataIndex","virtualRoot","root","source","parentNode","sourceSymbolEl","sourceLayout","getLayout","sourceOldLayout","rawX","__radialOldRawX","rawY","__radialOldRawY","targetLayout","updateData","__radialRawX","__radialRawY","setItemGraphicEl","updateProps","symbolPath","getSymbolPath","realRoot","rootLayout","rad","isLeft","center","Math","atan2","PI","textPosition","rotate","labelRotateRadian","setStyle","textRotation","textOrigin","verticalAlign","drawEdge","edge","__edge","BezierCurve","getEdgeShape","defaults","opacity","strokeNoScale","childLayout","fadeOut","keepLabel","sourceEdge","undefined","cpx1","cpy1","cpx2","cpy2","x1","x2","y1","y2","radialCoor1","radialCoor2","radialCoor3","radialCoor4","module","exports"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,uBAAD,CAApB;;AAEA,IAAIC,OAAO,GAAGD,OAAO,CAAC,oBAAD,CAArB;;AAEA,IAAIE,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAvB;;AAEA,IAAIG,aAAa,GAAGH,OAAO,CAAC,gBAAD,CAA3B;;AAEA,IAAII,gBAAgB,GAAGD,aAAa,CAACC,gBAArC;;AAEA,IAAIC,OAAO,GAAGL,OAAO,CAAC,eAAD,CAArB;;AAEA,IAAIM,IAAI,GAAGN,OAAO,CAAC,uBAAD,CAAlB;;AAEA,IAAIO,IAAI,GAAGP,OAAO,CAAC,kBAAD,CAAlB;;AAEA,IAAIQ,UAAU,GAAGR,OAAO,CAAC,mCAAD,CAAxB;;AAEA,IAAIS,cAAc,GAAGT,OAAO,CAAC,uCAAD,CAA5B;;AAEA,IAAIU,aAAa,GAAGV,OAAO,CAAC,qCAAD,CAA3B;;AAEA,IAAIW,mBAAmB,GAAGD,aAAa,CAACC,mBAAxC;;AAEA,IAAIC,OAAO,GAAGZ,OAAO,CAAC,cAAD,CAArB;;AAEA,IAAIa,OAAO,GAAGD,OAAO,CAACC,OAAtB;;AAEA,IAAIC,OAAO,GAAGd,OAAO,CAAC,mBAAD,CAArB;;AAEA,IAAIe,YAAY,GAAGD,OAAO,CAACC,YAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,SAAS,GAAGf,OAAO,CAACgB,WAAR,CAAoB;AAClCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,WAAW,EAAE,EADR;AAELC,IAAAA,WAAW,EAAE,EAFR;AAGLC,IAAAA,MAAM,EAAE,EAHH;AAILC,IAAAA,YAAY,EAAE;AAJT,GAD2B;AAOlCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAE,MADH;AAELC,IAAAA,IAAI,EAAE;AAFD,GAP2B;AAWlCC,EAAAA,SAAS,EAAE,mBAAUC,GAAV,EAAeT,KAAf,EAAsB;AAC/B,QAAIE,WAAW,GAAGF,KAAK,CAACE,WAAxB;AACA,QAAIQ,QAAQ,GAAGR,WAAW,CAACS,MAA3B;AACA,QAAIV,WAAW,GAAGD,KAAK,CAACC,WAAxB;AACA,QAAIW,aAAa,GAAGV,WAAW,CAAC,CAAD,CAA/B;AACA,QAAIW,YAAY,GAAGX,WAAW,CAACQ,QAAQ,GAAG,CAAZ,CAA9B;;AAEA,QAAIA,QAAQ,KAAK,CAAjB,EAAoB;AAClBD,MAAAA,GAAG,CAACK,MAAJ,CAAWb,WAAW,CAAC,CAAD,CAAtB,EAA2BA,WAAW,CAAC,CAAD,CAAtC;AACAQ,MAAAA,GAAG,CAACM,MAAJ,CAAWH,aAAa,CAAC,CAAD,CAAxB,EAA6BA,aAAa,CAAC,CAAD,CAA1C;AACA;AACD;;AAED,QAAIT,MAAM,GAAGH,KAAK,CAACG,MAAnB;AACA,QAAIa,OAAO,GAAGb,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,IAA9B,GAAqC,CAArC,GAAyC,CAAvD;AACA,QAAIc,QAAQ,GAAG,IAAID,OAAnB;AACA,QAAIZ,YAAY,GAAGP,YAAY,CAACG,KAAK,CAACI,YAAP,EAAqB,CAArB,CAA/B;AACA,QAAIc,QAAQ,GAAG,EAAf;AACAA,IAAAA,QAAQ,CAACF,OAAD,CAAR,GAAoBf,WAAW,CAACe,OAAD,CAA/B;AACAE,IAAAA,QAAQ,CAACD,QAAD,CAAR,GAAqBhB,WAAW,CAACgB,QAAD,CAAX,GAAwB,CAACJ,YAAY,CAACI,QAAD,CAAZ,GAAyBhB,WAAW,CAACgB,QAAD,CAArC,IAAmDb,YAAhG;AACAK,IAAAA,GAAG,CAACK,MAAJ,CAAWb,WAAW,CAAC,CAAD,CAAtB,EAA2BA,WAAW,CAAC,CAAD,CAAtC;AACAQ,IAAAA,GAAG,CAACM,MAAJ,CAAWG,QAAQ,CAAC,CAAD,CAAnB,EAAwBA,QAAQ,CAAC,CAAD,CAAhC;AACAT,IAAAA,GAAG,CAACK,MAAJ,CAAWF,aAAa,CAAC,CAAD,CAAxB,EAA6BA,aAAa,CAAC,CAAD,CAA1C;AACAM,IAAAA,QAAQ,CAACF,OAAD,CAAR,GAAoBJ,aAAa,CAACI,OAAD,CAAjC;AACAP,IAAAA,GAAG,CAACM,MAAJ,CAAWG,QAAQ,CAAC,CAAD,CAAnB,EAAwBA,QAAQ,CAAC,CAAD,CAAhC;AACAA,IAAAA,QAAQ,CAACF,OAAD,CAAR,GAAoBH,YAAY,CAACG,OAAD,CAAhC;AACAP,IAAAA,GAAG,CAACM,MAAJ,CAAWG,QAAQ,CAAC,CAAD,CAAnB,EAAwBA,QAAQ,CAAC,CAAD,CAAhC;AACAT,IAAAA,GAAG,CAACM,MAAJ,CAAWF,YAAY,CAAC,CAAD,CAAvB,EAA4BA,YAAY,CAAC,CAAD,CAAxC;;AAEA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,QAAQ,GAAG,CAA/B,EAAkCS,CAAC,EAAnC,EAAuC;AACrC,UAAIC,KAAK,GAAGlB,WAAW,CAACiB,CAAD,CAAvB;AACAV,MAAAA,GAAG,CAACK,MAAJ,CAAWM,KAAK,CAAC,CAAD,CAAhB,EAAqBA,KAAK,CAAC,CAAD,CAA1B;AACAF,MAAAA,QAAQ,CAACF,OAAD,CAAR,GAAoBI,KAAK,CAACJ,OAAD,CAAzB;AACAP,MAAAA,GAAG,CAACM,MAAJ,CAAWG,QAAQ,CAAC,CAAD,CAAnB,EAAwBA,QAAQ,CAAC,CAAD,CAAhC;AACD;AACF;AA9CiC,CAApB,CAAhB;;AAiDA,IAAIG,QAAQ,GAAGlC,OAAO,CAACmC,eAAR,CAAwB;AACrCC,EAAAA,IAAI,EAAE,MAD+B;;AAGrC;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,IAAI,EAAE,cAAUC,OAAV,EAAmBC,GAAnB,EAAwB;AAC5B;AACJ;AACA;AACA;AACI,SAAKC,QAAL;AACA;AACJ;AACA;AACA;;AAEI,SAAKC,UAAL,GAAkB,IAAI7C,OAAO,CAAC8C,KAAZ,EAAlB;AACA;AACJ;AACA;AACA;;AAEI,SAAKC,WAAL,GAAmB,IAAIvC,cAAJ,CAAmBmC,GAAG,CAACK,KAAJ,EAAnB,CAAnB;AACA,SAAKC,eAAL,GAAuB;AACrBC,MAAAA,MAAM,EAAE,KAAKC;AADQ,KAAvB;AAGA,SAAKA,KAAL,CAAWC,GAAX,CAAe,KAAKP,UAApB;AACD,GA/BoC;AAgCrCQ,EAAAA,MAAM,EAAE,gBAAUC,WAAV,EAAuBZ,OAAvB,EAAgCC,GAAhC,EAAqCY,OAArC,EAA8C;AACpD,QAAIC,IAAI,GAAGF,WAAW,CAACG,OAAZ,EAAX;AACA,QAAIC,UAAU,GAAGJ,WAAW,CAACI,UAA7B;AACA,QAAIP,KAAK,GAAG,KAAKN,UAAjB;AACA,QAAIc,MAAM,GAAGL,WAAW,CAACM,GAAZ,CAAgB,QAAhB,CAAb;;AAEA,QAAID,MAAM,KAAK,QAAf,EAAyB;AACvBR,MAAAA,KAAK,CAACU,IAAN,CAAW,UAAX,EAAuB,CAACH,UAAU,CAACI,CAAX,GAAeJ,UAAU,CAACK,KAAX,GAAmB,CAAnC,EAAsCL,UAAU,CAACM,CAAX,GAAeN,UAAU,CAACO,MAAX,GAAoB,CAAzE,CAAvB;AACD,KAFD,MAEO;AACLd,MAAAA,KAAK,CAACU,IAAN,CAAW,UAAX,EAAuB,CAACH,UAAU,CAACI,CAAZ,EAAeJ,UAAU,CAACM,CAA1B,CAAvB;AACD;;AAED,SAAKE,mBAAL,CAAyBZ,WAAzB,EAAsCI,UAAtC,EAAkDC,MAAlD;;AAEA,SAAKQ,iBAAL,CAAuBb,WAAvB,EAAoCZ,OAApC,EAA6CC,GAA7C;;AAEA,QAAIyB,OAAO,GAAG,KAAKC,KAAnB;AACA,QAAIC,WAAW,GAAG;AAChBC,MAAAA,iBAAiB,EAAEjB,WAAW,CAACM,GAAZ,CAAgB,mBAAhB,CADH;AAEhBD,MAAAA,MAAM,EAAEA,MAFQ;AAGhBa,MAAAA,SAAS,EAAElB,WAAW,CAACM,GAAZ,CAAgB,WAAhB,CAHK;AAIhBa,MAAAA,gBAAgB,EAAEnB,WAAW,CAACM,GAAZ,CAAgB,kBAAhB,CAJF;AAKhBxC,MAAAA,MAAM,EAAEkC,WAAW,CAACoB,SAAZ,EALQ;AAMhBC,MAAAA,SAAS,EAAErB,WAAW,CAACM,GAAZ,CAAgB,qBAAhB,CANK;AAOhBgB,MAAAA,YAAY,EAAEtB,WAAW,CAACM,GAAZ,CAAgB,cAAhB,CAPE;AAQhBiB,MAAAA,YAAY,EAAEvB,WAAW,CAACM,GAAZ,CAAgB,cAAhB,CARE;AAShBkB,MAAAA,cAAc,EAAExB,WAAW,CAACM,GAAZ,CAAgB,gBAAhB,CATA;AAUhBmB,MAAAA,YAAY,EAAE,IAVE;AAWhBC,MAAAA,MAAM,EAAE;AAXQ,KAAlB;AAaAxB,IAAAA,IAAI,CAACyB,IAAL,CAAUb,OAAV,EAAmBhB,GAAnB,CAAuB,UAAU8B,MAAV,EAAkB;AACvC,UAAIC,eAAe,CAAC3B,IAAD,EAAO0B,MAAP,CAAnB,EAAmC;AACjC;AACAE,QAAAA,UAAU,CAAC5B,IAAD,EAAO0B,MAAP,EAAe,IAAf,EAAqB/B,KAArB,EAA4BG,WAA5B,EAAyCgB,WAAzC,CAAV;AACD;AACF,KALD,EAKGe,MALH,CAKU,UAAUH,MAAV,EAAkBI,MAAlB,EAA0B;AAClC,UAAIC,QAAQ,GAAGnB,OAAO,CAACoB,gBAAR,CAAyBF,MAAzB,CAAf;;AAEA,UAAI,CAACH,eAAe,CAAC3B,IAAD,EAAO0B,MAAP,CAApB,EAAoC;AAClCK,QAAAA,QAAQ,IAAIE,UAAU,CAACrB,OAAD,EAAUkB,MAAV,EAAkBC,QAAlB,EAA4BpC,KAA5B,EAAmCG,WAAnC,EAAgDgB,WAAhD,CAAtB;AACA;AACD,OANiC,CAMhC;;;AAGFc,MAAAA,UAAU,CAAC5B,IAAD,EAAO0B,MAAP,EAAeK,QAAf,EAAyBpC,KAAzB,EAAgCG,WAAhC,EAA6CgB,WAA7C,CAAV;AACD,KAfD,EAeGoB,MAfH,CAeU,UAAUJ,MAAV,EAAkB;AAC1B,UAAIC,QAAQ,GAAGnB,OAAO,CAACoB,gBAAR,CAAyBF,MAAzB,CAAf,CAD0B,CACuB;AACjD;AACA;AACA;AACA;;AAEA,UAAIC,QAAJ,EAAc;AACZE,QAAAA,UAAU,CAACrB,OAAD,EAAUkB,MAAV,EAAkBC,QAAlB,EAA4BpC,KAA5B,EAAmCG,WAAnC,EAAgDgB,WAAhD,CAAV;AACD;AACF,KAzBD,EAyBGqB,OAzBH;AA0BA,SAAKC,eAAL,GAAuBtC,WAAW,CAACM,GAAZ,CAAgB,gBAAhB,CAAvB;;AAEA,SAAKiC,uBAAL,CAA6BvC,WAA7B;;AAEA,QAAIgB,WAAW,CAACC,iBAAZ,KAAkC,IAAtC,EAA4C;AAC1Cf,MAAAA,IAAI,CAACsC,iBAAL,CAAuB,UAAUC,EAAV,EAAcC,SAAd,EAAyB;AAC9CD,QAAAA,EAAE,CAACE,GAAH,CAAO,OAAP,EAAgBC,EAAhB,CAAmB,OAAnB,EAA4B,YAAY;AACtCvD,UAAAA,GAAG,CAACwD,cAAJ,CAAmB;AACjB3D,YAAAA,IAAI,EAAE,uBADW;AAEjB4D,YAAAA,QAAQ,EAAE9C,WAAW,CAAC+C,EAFL;AAGjBL,YAAAA,SAAS,EAAEA;AAHM,WAAnB;AAKD,SAND;AAOD,OARD;AASD;;AAED,SAAK3B,KAAL,GAAab,IAAb;AACD,GAzGoC;AA0GrCU,EAAAA,mBAAmB,EAAE,6BAAUZ,WAAV,EAAuB;AAC1C,QAAIE,IAAI,GAAGF,WAAW,CAACG,OAAZ,EAAX;AACA,QAAI6C,MAAM,GAAG,EAAb;AACA9C,IAAAA,IAAI,CAAC+C,IAAL,CAAU,UAAUC,GAAV,EAAe;AACvB,UAAI7C,MAAM,GAAGH,IAAI,CAACiD,aAAL,CAAmBD,GAAnB,CAAb;;AAEA,UAAI7C,MAAM,IAAI,CAAC+C,KAAK,CAAC/C,MAAM,CAACG,CAAR,CAAhB,IAA8B,CAAC4C,KAAK,CAAC/C,MAAM,CAACK,CAAR,CAAxC,EAAoD;AAClDsC,QAAAA,MAAM,CAACK,IAAP,CAAY,CAAC,CAAChD,MAAM,CAACG,CAAT,EAAY,CAACH,MAAM,CAACK,CAApB,CAAZ;AACD;AACF,KAND;AAOA,QAAI4C,GAAG,GAAG,EAAV;AACA,QAAIC,GAAG,GAAG,EAAV;AACAxG,IAAAA,IAAI,CAACyG,UAAL,CAAgBR,MAAhB,EAAwBM,GAAxB,EAA6BC,GAA7B,EAZ0C,CAYP;AACnC;;AAEA,QAAIE,MAAM,GAAG,KAAKC,IAAlB;AACA,QAAIC,MAAM,GAAG,KAAKC,IAAlB,CAhB0C,CAgBlB;;AAExB,QAAIL,GAAG,CAAC,CAAD,CAAH,GAASD,GAAG,CAAC,CAAD,CAAZ,KAAoB,CAAxB,EAA2B;AACzBA,MAAAA,GAAG,CAAC,CAAD,CAAH,GAASG,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAT,GAAeH,GAAG,CAAC,CAAD,CAAH,GAAS,CAAvC;AACAC,MAAAA,GAAG,CAAC,CAAD,CAAH,GAASI,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAT,GAAeJ,GAAG,CAAC,CAAD,CAAH,GAAS,CAAvC;AACD;;AAED,QAAIA,GAAG,CAAC,CAAD,CAAH,GAASD,GAAG,CAAC,CAAD,CAAZ,KAAoB,CAAxB,EAA2B;AACzBA,MAAAA,GAAG,CAAC,CAAD,CAAH,GAASG,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAT,GAAeH,GAAG,CAAC,CAAD,CAAH,GAAS,CAAvC;AACAC,MAAAA,GAAG,CAAC,CAAD,CAAH,GAASI,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAT,GAAeJ,GAAG,CAAC,CAAD,CAAH,GAAS,CAAvC;AACD;;AAED,QAAIM,YAAY,GAAG7D,WAAW,CAAC8D,gBAAZ,GAA+B,IAAI9G,IAAJ,EAAlD;AACA6G,IAAAA,YAAY,CAACE,SAAb,GAAyB/D,WAAW,CAACM,GAAZ,CAAgB,YAAhB,CAAzB;AACAuD,IAAAA,YAAY,CAACG,eAAb,CAA6BV,GAAG,CAAC,CAAD,CAAhC,EAAqCA,GAAG,CAAC,CAAD,CAAxC,EAA6CC,GAAG,CAAC,CAAD,CAAH,GAASD,GAAG,CAAC,CAAD,CAAzD,EAA8DC,GAAG,CAAC,CAAD,CAAH,GAASD,GAAG,CAAC,CAAD,CAA1E;AACAO,IAAAA,YAAY,CAACI,SAAb,CAAuBjE,WAAW,CAACM,GAAZ,CAAgB,QAAhB,CAAvB;AACAuD,IAAAA,YAAY,CAACK,OAAb,CAAqBlE,WAAW,CAACM,GAAZ,CAAgB,MAAhB,CAArB,EAhC0C,CAgCK;;AAE/C,SAAKT,KAAL,CAAWU,IAAX,CAAgB;AACd4D,MAAAA,QAAQ,EAAEN,YAAY,CAACM,QADT;AAEdC,MAAAA,KAAK,EAAEP,YAAY,CAACO;AAFN,KAAhB;AAIA,SAAKC,aAAL,GAAqBR,YAArB;AACA,SAAKH,IAAL,GAAYJ,GAAZ;AACA,SAAKM,IAAL,GAAYL,GAAZ;AACD,GAnJoC;AAoJrC1C,EAAAA,iBAAiB,EAAE,2BAAUb,WAAV,EAAuBZ,OAAvB,EAAgCC,GAAhC,EAAqC;AACtD,QAAIiF,UAAU,GAAG,KAAK7E,WAAtB;AACA,QAAI8E,cAAc,GAAG,KAAK5E,eAA1B;AACA,QAAIE,KAAK,GAAG,KAAKA,KAAjB;AACAyE,IAAAA,UAAU,CAACE,iBAAX,CAA6B,UAAUC,CAAV,EAAajE,CAAb,EAAgBE,CAAhB,EAAmB;AAC9C,UAAIgE,IAAI,GAAG7E,KAAK,CAAC8E,eAAN,EAAX;AACAD,MAAAA,IAAI,CAACE,cAAL,CAAoB/E,KAAK,CAACgF,SAA1B;AACA,aAAOH,IAAI,CAACI,OAAL,CAAatE,CAAb,EAAgBE,CAAhB,KAAsB,CAACtD,mBAAmB,CAACqH,CAAD,EAAIpF,GAAJ,EAASW,WAAT,CAAjD;AACD,KAJD;AAKAsE,IAAAA,UAAU,CAACS,MAAX,CAAkB/E,WAAW,CAACM,GAAZ,CAAgB,MAAhB,CAAlB;AACAiE,IAAAA,cAAc,CAACR,SAAf,GAA2B/D,WAAW,CAACM,GAAZ,CAAgB,YAAhB,CAA3B;AACAiE,IAAAA,cAAc,CAACS,IAAf,GAAsBhF,WAAW,CAAC8D,gBAAZ,CAA6BmB,OAA7B,EAAtB;AACAX,IAAAA,UAAU,CAAC3B,GAAX,CAAe,KAAf,EAAsBA,GAAtB,CAA0B,MAA1B,EAAkCC,EAAlC,CAAqC,KAArC,EAA4C,UAAU6B,CAAV,EAAa;AACvDxH,MAAAA,UAAU,CAACiI,eAAX,CAA2BX,cAA3B,EAA2CE,CAAC,CAACU,EAA7C,EAAiDV,CAAC,CAACW,EAAnD;AACA/F,MAAAA,GAAG,CAACwD,cAAJ,CAAmB;AACjBC,QAAAA,QAAQ,EAAE9C,WAAW,CAAC+C,EADL;AAEjB7D,QAAAA,IAAI,EAAE,UAFW;AAGjBiG,QAAAA,EAAE,EAAEV,CAAC,CAACU,EAHW;AAIjBC,QAAAA,EAAE,EAAEX,CAAC,CAACW;AAJW,OAAnB;AAMD,KARD,EAQG,IARH,EAQSxC,EART,CAQY,MARZ,EAQoB,UAAU6B,CAAV,EAAa;AAC/BxH,MAAAA,UAAU,CAACoI,gBAAX,CAA4Bd,cAA5B,EAA4CE,CAAC,CAACL,KAA9C,EAAqDK,CAAC,CAACa,OAAvD,EAAgEb,CAAC,CAACc,OAAlE;AACAlG,MAAAA,GAAG,CAACwD,cAAJ,CAAmB;AACjBC,QAAAA,QAAQ,EAAE9C,WAAW,CAAC+C,EADL;AAEjB7D,QAAAA,IAAI,EAAE,UAFW;AAGjB8F,QAAAA,IAAI,EAAEP,CAAC,CAACL,KAHS;AAIjBkB,QAAAA,OAAO,EAAEb,CAAC,CAACa,OAJM;AAKjBC,QAAAA,OAAO,EAAEd,CAAC,CAACc;AALM,OAAnB;;AAQA,WAAKhD,uBAAL,CAA6BvC,WAA7B;AACD,KAnBD,EAmBG,IAnBH;AAoBD,GApLoC;AAqLrCuC,EAAAA,uBAAuB,EAAE,iCAAUvC,WAAV,EAAuB;AAC9C,QAAIE,IAAI,GAAGF,WAAW,CAACG,OAAZ,EAAX;;AAEA,QAAIqF,SAAS,GAAG,KAAKC,mBAAL,CAAyBzF,WAAzB,CAAhB;;AAEA,QAAI0F,QAAQ,GAAG,CAACF,SAAD,EAAYA,SAAZ,CAAf;AACAtF,IAAAA,IAAI,CAACsC,iBAAL,CAAuB,UAAUC,EAAV,EAAcS,GAAd,EAAmB;AACxCT,MAAAA,EAAE,CAAClC,IAAH,CAAQ,OAAR,EAAiBmF,QAAjB;AACD,KAFD;AAGD,GA9LoC;AA+LrCD,EAAAA,mBAAmB,EAAE,6BAAUzF,WAAV,EAAuB;AAC1C,QAAI2F,QAAQ,GAAG3F,WAAW,CAAC8D,gBAA3B;;AAEA,QAAI6B,QAAQ,CAACzG,IAAT,KAAkB,MAAtB,EAA8B;AAC5B,aAAO,CAAP;AACD;;AAED,QAAI0G,cAAc,GAAG,KAAKtD,eAA1B;AACA,QAAIuD,UAAU,GAAGF,QAAQ,CAACvB,KAA1B;AACA,QAAI0B,SAAS,GAAGD,UAAU,IAAIA,UAAU,CAAC,CAAD,CAAxB,IAA+B,CAA/C,CAT0C,CASQ;;AAElD,QAAIE,QAAQ,GAAGJ,QAAQ,CAACV,OAAT,EAAf;AACA,QAAIO,SAAS,GAAG,CAACO,QAAQ,GAAG,CAAZ,IAAiBH,cAAjB,GAAkC,CAAlD;AACA,WAAOJ,SAAS,GAAGM,SAAnB;AACD,GA7MoC;AA8MrCE,EAAAA,OAAO,EAAE,mBAAY;AACnB,SAAKvG,WAAL,IAAoB,KAAKA,WAAL,CAAiBuG,OAAjB,EAApB;AACA,SAAKrG,eAAL,GAAuB,EAAvB;AACD,GAjNoC;AAkNrCyC,EAAAA,MAAM,EAAE,kBAAY;AAClB,SAAK7C,UAAL,CAAgB0G,SAAhB;;AAEA,SAAKlF,KAAL,GAAa,IAAb;AACD;AAtNoC,CAAxB,CAAf;;AAyNA,SAASc,eAAT,CAAyB3B,IAAzB,EAA+BwC,SAA/B,EAA0C;AACxC,MAAIrC,MAAM,GAAGH,IAAI,CAACiD,aAAL,CAAmBT,SAAnB,CAAb;AACA,SAAOrC,MAAM,IAAI,CAAC+C,KAAK,CAAC/C,MAAM,CAACG,CAAR,CAAhB,IAA8B,CAAC4C,KAAK,CAAC/C,MAAM,CAACK,CAAR,CAApC,IAAkDR,IAAI,CAACgG,aAAL,CAAmBxD,SAAnB,EAA8B,QAA9B,MAA4C,MAArG;AACD;;AAED,SAASyD,gBAAT,CAA0BC,IAA1B,EAAgCC,SAAhC,EAA2CrF,WAA3C,EAAwD;AACtDA,EAAAA,WAAW,CAACqF,SAAZ,GAAwBA,SAAxB;AACArF,EAAAA,WAAW,CAACsF,SAAZ,GAAwBD,SAAS,CAACE,QAAV,CAAmB,WAAnB,EAAgCC,YAAhC,EAAxB;AACAxF,EAAAA,WAAW,CAACyF,cAAZ,GAA6BJ,SAAS,CAACE,QAAV,CAAmB,oBAAnB,EAAyCC,YAAzC,EAA7B;AACAxF,EAAAA,WAAW,CAAC0F,SAAZ,GAAwBL,SAAS,CAACE,QAAV,CAAmB,WAAnB,EAAgCI,YAAhC,EAAxB;AACA3F,EAAAA,WAAW,CAAC4F,UAAZ,GAAyBP,SAAS,CAACE,QAAV,CAAmB,OAAnB,CAAzB;AACAvF,EAAAA,WAAW,CAAC6F,eAAZ,GAA8BR,SAAS,CAACE,QAAV,CAAmB,gBAAnB,CAA9B;;AAEA,MAAIH,IAAI,CAACU,QAAL,KAAkB,KAAlB,IAA2BV,IAAI,CAACW,QAAL,CAAczI,MAAd,KAAyB,CAAxD,EAA2D;AACzD0C,IAAAA,WAAW,CAACgG,gBAAZ,GAA+BhG,WAAW,CAACsF,SAAZ,CAAsBpI,IAArD;AACD,GAFD,MAEO;AACL8C,IAAAA,WAAW,CAACgG,gBAAZ,GAA+B,MAA/B;AACD;;AAED,SAAOhG,WAAP;AACD;;AAED,SAASc,UAAT,CAAoB5B,IAApB,EAA0BwC,SAA1B,EAAqCT,QAArC,EAA+CpC,KAA/C,EAAsDG,WAAtD,EAAmEgB,WAAnE,EAAgF;AAC9E,MAAIiG,MAAM,GAAG,CAAChF,QAAd;AACA,MAAImE,IAAI,GAAGlG,IAAI,CAACgH,IAAL,CAAUC,kBAAV,CAA6BzE,SAA7B,CAAX;AACA,MAAI2D,SAAS,GAAGD,IAAI,CAACG,QAAL,EAAhB;AACA,MAAIvF,WAAW,GAAGmF,gBAAgB,CAACC,IAAD,EAAOC,SAAP,EAAkBrF,WAAlB,CAAlC;AACA,MAAIoG,WAAW,GAAGlH,IAAI,CAACgH,IAAL,CAAUG,IAA5B;AACA,MAAIC,MAAM,GAAGlB,IAAI,CAACmB,UAAL,KAAoBH,WAApB,GAAkChB,IAAlC,GAAyCA,IAAI,CAACmB,UAAL,IAAmBnB,IAAzE;AACA,MAAIoB,cAAc,GAAGtH,IAAI,CAACgC,gBAAL,CAAsBoF,MAAM,CAAC5E,SAA7B,CAArB;AACA,MAAI+E,YAAY,GAAGH,MAAM,CAACI,SAAP,EAAnB;AACA,MAAIC,eAAe,GAAGH,cAAc,GAAG;AACrChH,IAAAA,CAAC,EAAEgH,cAAc,CAACrD,QAAf,CAAwB,CAAxB,CADkC;AAErCzD,IAAAA,CAAC,EAAE8G,cAAc,CAACrD,QAAf,CAAwB,CAAxB,CAFkC;AAGrCyD,IAAAA,IAAI,EAAEJ,cAAc,CAACK,eAHgB;AAIrCC,IAAAA,IAAI,EAAEN,cAAc,CAACO;AAJgB,GAAH,GAKhCN,YALJ;AAMA,MAAIO,YAAY,GAAG5B,IAAI,CAACsB,SAAL,EAAnB;;AAEA,MAAIT,MAAJ,EAAY;AACVhF,IAAAA,QAAQ,GAAG,IAAItF,SAAJ,CAAcuD,IAAd,EAAoBwC,SAApB,EAA+B1B,WAA/B,CAAX;AACAiB,IAAAA,QAAQ,CAAC1B,IAAT,CAAc,UAAd,EAA0B,CAACoH,eAAe,CAACnH,CAAjB,EAAoBmH,eAAe,CAACjH,CAApC,CAA1B;AACD,GAHD,MAGO;AACLuB,IAAAA,QAAQ,CAACgG,UAAT,CAAoB/H,IAApB,EAA0BwC,SAA1B,EAAqC1B,WAArC;AACD;;AAEDiB,EAAAA,QAAQ,CAAC4F,eAAT,GAA2B5F,QAAQ,CAACiG,YAApC;AACAjG,EAAAA,QAAQ,CAAC8F,eAAT,GAA2B9F,QAAQ,CAACkG,YAApC;AACAlG,EAAAA,QAAQ,CAACiG,YAAT,GAAwBF,YAAY,CAACJ,IAArC;AACA3F,EAAAA,QAAQ,CAACkG,YAAT,GAAwBH,YAAY,CAACF,IAArC;AACAjI,EAAAA,KAAK,CAACC,GAAN,CAAUmC,QAAV;AACA/B,EAAAA,IAAI,CAACkI,gBAAL,CAAsB1F,SAAtB,EAAiCT,QAAjC;AACAvF,EAAAA,OAAO,CAAC2L,WAAR,CAAoBpG,QAApB,EAA8B;AAC5BkC,IAAAA,QAAQ,EAAE,CAAC6D,YAAY,CAACxH,CAAd,EAAiBwH,YAAY,CAACtH,CAA9B;AADkB,GAA9B,EAEGV,WAFH;AAGA,MAAIsI,UAAU,GAAGrG,QAAQ,CAACsG,aAAT,EAAjB;;AAEA,MAAIvH,WAAW,CAACX,MAAZ,KAAuB,QAA3B,EAAqC;AACnC,QAAImI,QAAQ,GAAGpB,WAAW,CAACL,QAAZ,CAAqB,CAArB,CAAf;AACA,QAAI0B,UAAU,GAAGD,QAAQ,CAACd,SAAT,EAAjB;AACA,QAAIpJ,MAAM,GAAGkK,QAAQ,CAACzB,QAAT,CAAkBzI,MAA/B;AACA,QAAIoK,GAAJ;AACA,QAAIC,MAAJ;;AAEA,QAAIX,YAAY,CAACxH,CAAb,KAAmBiI,UAAU,CAACjI,CAA9B,IAAmC4F,IAAI,CAACU,QAAL,KAAkB,IAAzD,EAA+D;AAC7D,UAAI8B,MAAM,GAAG,EAAb;AACAA,MAAAA,MAAM,CAACpI,CAAP,GAAW,CAACgI,QAAQ,CAACzB,QAAT,CAAkB,CAAlB,EAAqBW,SAArB,GAAiClH,CAAjC,GAAqCgI,QAAQ,CAACzB,QAAT,CAAkBzI,MAAM,GAAG,CAA3B,EAA8BoJ,SAA9B,GAA0ClH,CAAhF,IAAqF,CAAhG;AACAoI,MAAAA,MAAM,CAAClI,CAAP,GAAW,CAAC8H,QAAQ,CAACzB,QAAT,CAAkB,CAAlB,EAAqBW,SAArB,GAAiChH,CAAjC,GAAqC8H,QAAQ,CAACzB,QAAT,CAAkBzI,MAAM,GAAG,CAA3B,EAA8BoJ,SAA9B,GAA0ChH,CAAhF,IAAqF,CAAhG;AACAgI,MAAAA,GAAG,GAAGG,IAAI,CAACC,KAAL,CAAWF,MAAM,CAAClI,CAAP,GAAW+H,UAAU,CAAC/H,CAAjC,EAAoCkI,MAAM,CAACpI,CAAP,GAAWiI,UAAU,CAACjI,CAA1D,CAAN;;AAEA,UAAIkI,GAAG,GAAG,CAAV,EAAa;AACXA,QAAAA,GAAG,GAAGG,IAAI,CAACE,EAAL,GAAU,CAAV,GAAcL,GAApB;AACD;;AAEDC,MAAAA,MAAM,GAAGC,MAAM,CAACpI,CAAP,GAAWiI,UAAU,CAACjI,CAA/B;;AAEA,UAAImI,MAAJ,EAAY;AACVD,QAAAA,GAAG,GAAGA,GAAG,GAAGG,IAAI,CAACE,EAAjB;AACD;AACF,KAfD,MAeO;AACLL,MAAAA,GAAG,GAAGG,IAAI,CAACC,KAAL,CAAWd,YAAY,CAACtH,CAAb,GAAiB+H,UAAU,CAAC/H,CAAvC,EAA0CsH,YAAY,CAACxH,CAAb,GAAiBiI,UAAU,CAACjI,CAAtE,CAAN;;AAEA,UAAIkI,GAAG,GAAG,CAAV,EAAa;AACXA,QAAAA,GAAG,GAAGG,IAAI,CAACE,EAAL,GAAU,CAAV,GAAcL,GAApB;AACD;;AAED,UAAItC,IAAI,CAACW,QAAL,CAAczI,MAAd,KAAyB,CAAzB,IAA8B8H,IAAI,CAACW,QAAL,CAAczI,MAAd,KAAyB,CAAzB,IAA8B8H,IAAI,CAACU,QAAL,KAAkB,KAAlF,EAAyF;AACvF6B,QAAAA,MAAM,GAAGX,YAAY,CAACxH,CAAb,GAAiBiI,UAAU,CAACjI,CAArC;;AAEA,YAAImI,MAAJ,EAAY;AACVD,UAAAA,GAAG,GAAGA,GAAG,GAAGG,IAAI,CAACE,EAAjB;AACD;AACF,OAND,MAMO;AACLJ,QAAAA,MAAM,GAAGX,YAAY,CAACxH,CAAb,GAAiBiI,UAAU,CAACjI,CAArC;;AAEA,YAAI,CAACmI,MAAL,EAAa;AACXD,UAAAA,GAAG,GAAGA,GAAG,GAAGG,IAAI,CAACE,EAAjB;AACD;AACF;AACF;;AAED,QAAIC,YAAY,GAAGL,MAAM,GAAG,MAAH,GAAY,OAArC;AACA,QAAIM,MAAM,GAAGjI,WAAW,CAAC4F,UAAZ,CAAuBtG,GAAvB,CAA2B,QAA3B,CAAb;AACA,QAAI4I,iBAAiB,GAAGD,MAAM,IAAIJ,IAAI,CAACE,EAAL,GAAU,GAAd,CAA9B;AACAT,IAAAA,UAAU,CAACa,QAAX,CAAoB;AAClBH,MAAAA,YAAY,EAAEhI,WAAW,CAAC4F,UAAZ,CAAuBtG,GAAvB,CAA2B,UAA3B,KAA0C0I,YADtC;AAElBI,MAAAA,YAAY,EAAEH,MAAM,IAAI,IAAV,GAAiB,CAACP,GAAlB,GAAwBQ,iBAFpB;AAGlBG,MAAAA,UAAU,EAAE,QAHM;AAIlBC,MAAAA,aAAa,EAAE;AAJG,KAApB;AAMD;;AAEDC,EAAAA,QAAQ,CAACvJ,WAAD,EAAcoG,IAAd,EAAoBgB,WAApB,EAAiCnF,QAAjC,EAA2C0F,eAA3C,EAA4DF,YAA5D,EAA0EO,YAA1E,EAAwFnI,KAAxF,EAA+FmB,WAA/F,CAAR;AACD;;AAED,SAASuI,QAAT,CAAkBvJ,WAAlB,EAA+BoG,IAA/B,EAAqCgB,WAArC,EAAkDnF,QAAlD,EAA4D0F,eAA5D,EAA6EF,YAA7E,EAA2FO,YAA3F,EAAyGnI,KAAzG,EAAgHmB,WAAhH,EAA6H;AAC3H,MAAIE,SAAS,GAAGF,WAAW,CAACE,SAA5B;AACA,MAAIsI,IAAI,GAAGvH,QAAQ,CAACwH,MAApB;;AAEA,MAAIvI,SAAS,KAAK,OAAlB,EAA2B;AACzB,QAAIkF,IAAI,CAACmB,UAAL,IAAmBnB,IAAI,CAACmB,UAAL,KAAoBH,WAA3C,EAAwD;AACtD,UAAI,CAACoC,IAAL,EAAW;AACTA,QAAAA,IAAI,GAAGvH,QAAQ,CAACwH,MAAT,GAAkB,IAAI/M,OAAO,CAACgN,WAAZ,CAAwB;AAC/C/L,UAAAA,KAAK,EAAEgM,YAAY,CAAC3I,WAAD,EAAc2G,eAAd,EAA+BA,eAA/B,CAD4B;AAE/C3J,UAAAA,KAAK,EAAExB,MAAM,CAACoN,QAAP,CAAgB;AACrBC,YAAAA,OAAO,EAAE,CADY;AAErBC,YAAAA,aAAa,EAAE;AAFM,WAAhB,EAGJ9I,WAAW,CAAC0F,SAHR;AAFwC,SAAxB,CAAzB;AAOD;;AAEDhK,MAAAA,OAAO,CAAC2L,WAAR,CAAoBmB,IAApB,EAA0B;AACxB7L,QAAAA,KAAK,EAAEgM,YAAY,CAAC3I,WAAD,EAAcyG,YAAd,EAA4BO,YAA5B,CADK;AAExBhK,QAAAA,KAAK,EAAExB,MAAM,CAACoN,QAAP,CAAgB;AACrBC,UAAAA,OAAO,EAAE;AADY,SAAhB,EAEJ7I,WAAW,CAAC0F,SAFR;AAFiB,OAA1B,EAKG1G,WALH;AAMD;AACF,GAnBD,MAmBO,IAAIkB,SAAS,KAAK,UAAlB,EAA8B;AACnC,QAAIF,WAAW,CAACX,MAAZ,KAAuB,YAA3B,EAAyC;AACvC,UAAI+F,IAAI,KAAKgB,WAAT,IAAwBhB,IAAI,CAACW,QAA7B,IAAyCX,IAAI,CAACW,QAAL,CAAczI,MAAd,KAAyB,CAAlE,IAAuE8H,IAAI,CAACU,QAAL,KAAkB,IAA7F,EAAmG;AACjG,YAAIC,QAAQ,GAAGX,IAAI,CAACW,QAApB;AACA,YAAIlJ,WAAW,GAAG,EAAlB;;AAEA,aAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiI,QAAQ,CAACzI,MAA7B,EAAqCQ,CAAC,EAAtC,EAA0C;AACxC,cAAIiL,WAAW,GAAGhD,QAAQ,CAACjI,CAAD,CAAR,CAAY4I,SAAZ,EAAlB;AACA7J,UAAAA,WAAW,CAACwF,IAAZ,CAAiB,CAAC0G,WAAW,CAACvJ,CAAb,EAAgBuJ,WAAW,CAACrJ,CAA5B,CAAjB;AACD;;AAED,YAAI,CAAC8I,IAAL,EAAW;AACTA,UAAAA,IAAI,GAAGvH,QAAQ,CAACwH,MAAT,GAAkB,IAAIhM,SAAJ,CAAc;AACrCE,YAAAA,KAAK,EAAE;AACLC,cAAAA,WAAW,EAAE,CAACoK,YAAY,CAACxH,CAAd,EAAiBwH,YAAY,CAACtH,CAA9B,CADR;AAEL7C,cAAAA,WAAW,EAAE,CAAC,CAACmK,YAAY,CAACxH,CAAd,EAAiBwH,YAAY,CAACtH,CAA9B,CAAD,CAFR;AAGL5C,cAAAA,MAAM,EAAEkD,WAAW,CAAClD,MAHf;AAILC,cAAAA,YAAY,EAAEiD,WAAW,CAACG;AAJrB,aAD8B;AAOrCnD,YAAAA,KAAK,EAAExB,MAAM,CAACoN,QAAP,CAAgB;AACrBC,cAAAA,OAAO,EAAE,CADY;AAErBC,cAAAA,aAAa,EAAE;AAFM,aAAhB,EAGJ9I,WAAW,CAAC0F,SAHR;AAP8B,WAAd,CAAzB;AAYD;;AAEDhK,QAAAA,OAAO,CAAC2L,WAAR,CAAoBmB,IAApB,EAA0B;AACxB7L,UAAAA,KAAK,EAAE;AACLC,YAAAA,WAAW,EAAE,CAACoK,YAAY,CAACxH,CAAd,EAAiBwH,YAAY,CAACtH,CAA9B,CADR;AAEL7C,YAAAA,WAAW,EAAEA;AAFR,WADiB;AAKxBG,UAAAA,KAAK,EAAExB,MAAM,CAACoN,QAAP,CAAgB;AACrBC,YAAAA,OAAO,EAAE;AADY,WAAhB,EAEJ7I,WAAW,CAAC0F,SAFR;AALiB,SAA1B,EAQG1G,WARH;AASD;AACF,KAnCD,MAmCO,CAAE;AACV;;AAEDH,EAAAA,KAAK,CAACC,GAAN,CAAU0J,IAAV;AACD;;AAED,SAASrH,UAAT,CAAoBjC,IAApB,EAA0BwC,SAA1B,EAAqCT,QAArC,EAA+CpC,KAA/C,EAAsDG,WAAtD,EAAmEgB,WAAnE,EAAgF;AAC9E,MAAIoF,IAAI,GAAGlG,IAAI,CAACgH,IAAL,CAAUC,kBAAV,CAA6BzE,SAA7B,CAAX;AACA,MAAI0E,WAAW,GAAGlH,IAAI,CAACgH,IAAL,CAAUG,IAA5B;AACA,MAAIhB,SAAS,GAAGD,IAAI,CAACG,QAAL,EAAhB;AACA,MAAIvF,WAAW,GAAGmF,gBAAgB,CAACC,IAAD,EAAOC,SAAP,EAAkBrF,WAAlB,CAAlC;AACA,MAAIsG,MAAM,GAAGlB,IAAI,CAACmB,UAAL,KAAoBH,WAApB,GAAkChB,IAAlC,GAAyCA,IAAI,CAACmB,UAAL,IAAmBnB,IAAzE;AACA,MAAIlF,SAAS,GAAGF,WAAW,CAACE,SAA5B;AACA,MAAIuG,YAAJ;;AAEA,SAAOA,YAAY,GAAGH,MAAM,CAACI,SAAP,EAAf,EAAmCD,YAAY,IAAI,IAA1D,EAAgE;AAC9DH,IAAAA,MAAM,GAAGA,MAAM,CAACC,UAAP,KAAsBH,WAAtB,GAAoCE,MAApC,GAA6CA,MAAM,CAACC,UAAP,IAAqBD,MAA3E;AACD;;AAED5K,EAAAA,OAAO,CAAC2L,WAAR,CAAoBpG,QAApB,EAA8B;AAC5BkC,IAAAA,QAAQ,EAAE,CAACsD,YAAY,CAACjH,CAAb,GAAiB,CAAlB,EAAqBiH,YAAY,CAAC/G,CAAb,GAAiB,CAAtC;AADkB,GAA9B,EAEGV,WAFH,EAEgB,YAAY;AAC1BH,IAAAA,KAAK,CAACuC,MAAN,CAAaH,QAAb;AACA/B,IAAAA,IAAI,CAACkI,gBAAL,CAAsB1F,SAAtB,EAAiC,IAAjC;AACD,GALD;AAMAT,EAAAA,QAAQ,CAAC+H,OAAT,CAAiB,IAAjB,EAAuB;AACrBC,IAAAA,SAAS,EAAE;AADU,GAAvB;AAGA,MAAIzC,cAAc,GAAGtH,IAAI,CAACgC,gBAAL,CAAsBoF,MAAM,CAAC5E,SAA7B,CAArB;AACA,MAAIwH,UAAU,GAAG1C,cAAc,CAACiC,MAAhC,CAvB8E,CAuBtC;AACxC;AACA;AACA;;AAEA,MAAID,IAAI,GAAGvH,QAAQ,CAACwH,MAAT,KAAoBnC,MAAM,CAACR,QAAP,KAAoB,KAApB,IAA6BQ,MAAM,CAACP,QAAP,CAAgBzI,MAAhB,KAA2B,CAAxD,GAA4D4L,UAA5D,GAAyEC,SAA7F,CAAX;AACA,MAAIjJ,SAAS,GAAGF,WAAW,CAACE,SAA5B;;AAEA,MAAIsI,IAAJ,EAAU;AACR,QAAItI,SAAS,KAAK,OAAlB,EAA2B;AACzBxE,MAAAA,OAAO,CAAC2L,WAAR,CAAoBmB,IAApB,EAA0B;AACxB7L,QAAAA,KAAK,EAAEgM,YAAY,CAAC3I,WAAD,EAAcyG,YAAd,EAA4BA,YAA5B,CADK;AAExBzJ,QAAAA,KAAK,EAAE;AACL6L,UAAAA,OAAO,EAAE;AADJ;AAFiB,OAA1B,EAKG7J,WALH,EAKgB,YAAY;AAC1BH,QAAAA,KAAK,CAACuC,MAAN,CAAaoH,IAAb;AACD,OAPD;AAQD,KATD,MASO,IAAItI,SAAS,KAAK,UAAd,IAA4BF,WAAW,CAACX,MAAZ,KAAuB,YAAvD,EAAqE;AAC1E3D,MAAAA,OAAO,CAAC2L,WAAR,CAAoBmB,IAApB,EAA0B;AACxB7L,QAAAA,KAAK,EAAE;AACLC,UAAAA,WAAW,EAAE,CAAC6J,YAAY,CAACjH,CAAd,EAAiBiH,YAAY,CAAC/G,CAA9B,CADR;AAEL7C,UAAAA,WAAW,EAAE,CAAC,CAAC4J,YAAY,CAACjH,CAAd,EAAiBiH,YAAY,CAAC/G,CAA9B,CAAD;AAFR,SADiB;AAKxB1C,QAAAA,KAAK,EAAE;AACL6L,UAAAA,OAAO,EAAE;AADJ;AALiB,OAA1B,EAQG7J,WARH,EAQgB,YAAY;AAC1BH,QAAAA,KAAK,CAACuC,MAAN,CAAaoH,IAAb;AACD,OAVD;AAWD;AACF;AACF;;AAED,SAASG,YAAT,CAAsB3I,WAAtB,EAAmCyG,YAAnC,EAAiDO,YAAjD,EAA+D;AAC7D,MAAIoC,IAAJ;AACA,MAAIC,IAAJ;AACA,MAAIC,IAAJ;AACA,MAAIC,IAAJ;AACA,MAAIzM,MAAM,GAAGkD,WAAW,CAAClD,MAAzB;AACA,MAAI0M,EAAJ;AACA,MAAIC,EAAJ;AACA,MAAIC,EAAJ;AACA,MAAIC,EAAJ;;AAEA,MAAI3J,WAAW,CAACX,MAAZ,KAAuB,QAA3B,EAAqC;AACnCmK,IAAAA,EAAE,GAAG/C,YAAY,CAACG,IAAlB;AACA8C,IAAAA,EAAE,GAAGjD,YAAY,CAACK,IAAlB;AACA2C,IAAAA,EAAE,GAAGzC,YAAY,CAACJ,IAAlB;AACA+C,IAAAA,EAAE,GAAG3C,YAAY,CAACF,IAAlB;AACA,QAAI8C,WAAW,GAAG/N,gBAAgB,CAAC2N,EAAD,EAAKE,EAAL,CAAlC;AACA,QAAIG,WAAW,GAAGhO,gBAAgB,CAAC2N,EAAD,EAAKE,EAAE,GAAG,CAACC,EAAE,GAAGD,EAAN,IAAY1J,WAAW,CAACK,SAAlC,CAAlC;AACA,QAAIyJ,WAAW,GAAGjO,gBAAgB,CAAC4N,EAAD,EAAKE,EAAE,GAAG,CAACD,EAAE,GAAGC,EAAN,IAAY3J,WAAW,CAACK,SAAlC,CAAlC;AACA,QAAI0J,WAAW,GAAGlO,gBAAgB,CAAC4N,EAAD,EAAKE,EAAL,CAAlC;AACA,WAAO;AACLH,MAAAA,EAAE,EAAEI,WAAW,CAACpK,CADX;AAELkK,MAAAA,EAAE,EAAEE,WAAW,CAAClK,CAFX;AAGL+J,MAAAA,EAAE,EAAEM,WAAW,CAACvK,CAHX;AAILmK,MAAAA,EAAE,EAAEI,WAAW,CAACrK,CAJX;AAKL0J,MAAAA,IAAI,EAAES,WAAW,CAACrK,CALb;AAML6J,MAAAA,IAAI,EAAEQ,WAAW,CAACnK,CANb;AAOL4J,MAAAA,IAAI,EAAEQ,WAAW,CAACtK,CAPb;AAQL+J,MAAAA,IAAI,EAAEO,WAAW,CAACpK;AARb,KAAP;AAUD,GAnBD,MAmBO;AACL8J,IAAAA,EAAE,GAAG/C,YAAY,CAACjH,CAAlB;AACAkK,IAAAA,EAAE,GAAGjD,YAAY,CAAC/G,CAAlB;AACA+J,IAAAA,EAAE,GAAGzC,YAAY,CAACxH,CAAlB;AACAmK,IAAAA,EAAE,GAAG3C,YAAY,CAACtH,CAAlB;;AAEA,QAAI5C,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,IAAlC,EAAwC;AACtCsM,MAAAA,IAAI,GAAGI,EAAE,GAAG,CAACC,EAAE,GAAGD,EAAN,IAAYxJ,WAAW,CAACK,SAApC;AACAgJ,MAAAA,IAAI,GAAGK,EAAP;AACAJ,MAAAA,IAAI,GAAGG,EAAE,GAAG,CAACD,EAAE,GAAGC,EAAN,IAAYzJ,WAAW,CAACK,SAApC;AACAkJ,MAAAA,IAAI,GAAGI,EAAP;AACD;;AAED,QAAI7M,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,IAAlC,EAAwC;AACtCsM,MAAAA,IAAI,GAAGI,EAAP;AACAH,MAAAA,IAAI,GAAGK,EAAE,GAAG,CAACC,EAAE,GAAGD,EAAN,IAAY1J,WAAW,CAACK,SAApC;AACAiJ,MAAAA,IAAI,GAAGG,EAAP;AACAF,MAAAA,IAAI,GAAGI,EAAE,GAAG,CAACD,EAAE,GAAGC,EAAN,IAAY3J,WAAW,CAACK,SAApC;AACD;AACF;;AAED,SAAO;AACLmJ,IAAAA,EAAE,EAAEA,EADC;AAELE,IAAAA,EAAE,EAAEA,EAFC;AAGLD,IAAAA,EAAE,EAAEA,EAHC;AAILE,IAAAA,EAAE,EAAEA,EAJC;AAKLP,IAAAA,IAAI,EAAEA,IALD;AAMLC,IAAAA,IAAI,EAAEA,IAND;AAOLC,IAAAA,IAAI,EAAEA,IAPD;AAQLC,IAAAA,IAAI,EAAEA;AARD,GAAP;AAUD;;AAEDS,MAAM,CAACC,OAAP,GAAiBjM,QAAjB","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar SymbolClz = require(\"../helper/Symbol\");\n\nvar _layoutHelper = require(\"./layoutHelper\");\n\nvar radialCoordinate = _layoutHelper.radialCoordinate;\n\nvar echarts = require(\"../../echarts\");\n\nvar bbox = require(\"zrender/lib/core/bbox\");\n\nvar View = require(\"../../coord/View\");\n\nvar roamHelper = require(\"../../component/helper/roamHelper\");\n\nvar RoamController = require(\"../../component/helper/RoamController\");\n\nvar _cursorHelper = require(\"../../component/helper/cursorHelper\");\n\nvar onIrrelevantElement = _cursorHelper.onIrrelevantElement;\n\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar _number = require(\"../../util/number\");\n\nvar parsePercent = _number.parsePercent;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar TreeShape = graphic.extendShape({\n  shape: {\n    parentPoint: [],\n    childPoints: [],\n    orient: '',\n    forkPosition: ''\n  },\n  style: {\n    stroke: '#000',\n    fill: null\n  },\n  buildPath: function (ctx, shape) {\n    var childPoints = shape.childPoints;\n    var childLen = childPoints.length;\n    var parentPoint = shape.parentPoint;\n    var firstChildPos = childPoints[0];\n    var lastChildPos = childPoints[childLen - 1];\n\n    if (childLen === 1) {\n      ctx.moveTo(parentPoint[0], parentPoint[1]);\n      ctx.lineTo(firstChildPos[0], firstChildPos[1]);\n      return;\n    }\n\n    var orient = shape.orient;\n    var forkDim = orient === 'TB' || orient === 'BT' ? 0 : 1;\n    var otherDim = 1 - forkDim;\n    var forkPosition = parsePercent(shape.forkPosition, 1);\n    var tmpPoint = [];\n    tmpPoint[forkDim] = parentPoint[forkDim];\n    tmpPoint[otherDim] = parentPoint[otherDim] + (lastChildPos[otherDim] - parentPoint[otherDim]) * forkPosition;\n    ctx.moveTo(parentPoint[0], parentPoint[1]);\n    ctx.lineTo(tmpPoint[0], tmpPoint[1]);\n    ctx.moveTo(firstChildPos[0], firstChildPos[1]);\n    tmpPoint[forkDim] = firstChildPos[forkDim];\n    ctx.lineTo(tmpPoint[0], tmpPoint[1]);\n    tmpPoint[forkDim] = lastChildPos[forkDim];\n    ctx.lineTo(tmpPoint[0], tmpPoint[1]);\n    ctx.lineTo(lastChildPos[0], lastChildPos[1]);\n\n    for (var i = 1; i < childLen - 1; i++) {\n      var point = childPoints[i];\n      ctx.moveTo(point[0], point[1]);\n      tmpPoint[forkDim] = point[forkDim];\n      ctx.lineTo(tmpPoint[0], tmpPoint[1]);\n    }\n  }\n});\n\nvar _default = echarts.extendChartView({\n  type: 'tree',\n\n  /**\n   * Init the chart\n   * @override\n   * @param  {module:echarts/model/Global} ecModel\n   * @param  {module:echarts/ExtensionAPI} api\n   */\n  init: function (ecModel, api) {\n    /**\n     * @private\n     * @type {module:echarts/data/Tree}\n     */\n    this._oldTree;\n    /**\n     * @private\n     * @type {module:zrender/container/Group}\n     */\n\n    this._mainGroup = new graphic.Group();\n    /**\n     * @private\n     * @type {module:echarts/componet/helper/RoamController}\n     */\n\n    this._controller = new RoamController(api.getZr());\n    this._controllerHost = {\n      target: this.group\n    };\n    this.group.add(this._mainGroup);\n  },\n  render: function (seriesModel, ecModel, api, payload) {\n    var data = seriesModel.getData();\n    var layoutInfo = seriesModel.layoutInfo;\n    var group = this._mainGroup;\n    var layout = seriesModel.get('layout');\n\n    if (layout === 'radial') {\n      group.attr('position', [layoutInfo.x + layoutInfo.width / 2, layoutInfo.y + layoutInfo.height / 2]);\n    } else {\n      group.attr('position', [layoutInfo.x, layoutInfo.y]);\n    }\n\n    this._updateViewCoordSys(seriesModel, layoutInfo, layout);\n\n    this._updateController(seriesModel, ecModel, api);\n\n    var oldData = this._data;\n    var seriesScope = {\n      expandAndCollapse: seriesModel.get('expandAndCollapse'),\n      layout: layout,\n      edgeShape: seriesModel.get('edgeShape'),\n      edgeForkPosition: seriesModel.get('edgeForkPosition'),\n      orient: seriesModel.getOrient(),\n      curvature: seriesModel.get('lineStyle.curveness'),\n      symbolRotate: seriesModel.get('symbolRotate'),\n      symbolOffset: seriesModel.get('symbolOffset'),\n      hoverAnimation: seriesModel.get('hoverAnimation'),\n      useNameLabel: true,\n      fadeIn: true\n    };\n    data.diff(oldData).add(function (newIdx) {\n      if (symbolNeedsDraw(data, newIdx)) {\n        // Create node and edge\n        updateNode(data, newIdx, null, group, seriesModel, seriesScope);\n      }\n    }).update(function (newIdx, oldIdx) {\n      var symbolEl = oldData.getItemGraphicEl(oldIdx);\n\n      if (!symbolNeedsDraw(data, newIdx)) {\n        symbolEl && removeNode(oldData, oldIdx, symbolEl, group, seriesModel, seriesScope);\n        return;\n      } // Update node and edge\n\n\n      updateNode(data, newIdx, symbolEl, group, seriesModel, seriesScope);\n    }).remove(function (oldIdx) {\n      var symbolEl = oldData.getItemGraphicEl(oldIdx); // When remove a collapsed node of subtree, since the collapsed\n      // node haven't been initialized with a symbol element,\n      // you can't found it's symbol element through index.\n      // so if we want to remove the symbol element we should insure\n      // that the symbol element is not null.\n\n      if (symbolEl) {\n        removeNode(oldData, oldIdx, symbolEl, group, seriesModel, seriesScope);\n      }\n    }).execute();\n    this._nodeScaleRatio = seriesModel.get('nodeScaleRatio');\n\n    this._updateNodeAndLinkScale(seriesModel);\n\n    if (seriesScope.expandAndCollapse === true) {\n      data.eachItemGraphicEl(function (el, dataIndex) {\n        el.off('click').on('click', function () {\n          api.dispatchAction({\n            type: 'treeExpandAndCollapse',\n            seriesId: seriesModel.id,\n            dataIndex: dataIndex\n          });\n        });\n      });\n    }\n\n    this._data = data;\n  },\n  _updateViewCoordSys: function (seriesModel) {\n    var data = seriesModel.getData();\n    var points = [];\n    data.each(function (idx) {\n      var layout = data.getItemLayout(idx);\n\n      if (layout && !isNaN(layout.x) && !isNaN(layout.y)) {\n        points.push([+layout.x, +layout.y]);\n      }\n    });\n    var min = [];\n    var max = [];\n    bbox.fromPoints(points, min, max); // If don't Store min max when collapse the root node after roam,\n    // the root node will disappear.\n\n    var oldMin = this._min;\n    var oldMax = this._max; // If width or height is 0\n\n    if (max[0] - min[0] === 0) {\n      min[0] = oldMin ? oldMin[0] : min[0] - 1;\n      max[0] = oldMax ? oldMax[0] : max[0] + 1;\n    }\n\n    if (max[1] - min[1] === 0) {\n      min[1] = oldMin ? oldMin[1] : min[1] - 1;\n      max[1] = oldMax ? oldMax[1] : max[1] + 1;\n    }\n\n    var viewCoordSys = seriesModel.coordinateSystem = new View();\n    viewCoordSys.zoomLimit = seriesModel.get('scaleLimit');\n    viewCoordSys.setBoundingRect(min[0], min[1], max[0] - min[0], max[1] - min[1]);\n    viewCoordSys.setCenter(seriesModel.get('center'));\n    viewCoordSys.setZoom(seriesModel.get('zoom')); // Here we use viewCoordSys just for computing the 'position' and 'scale' of the group\n\n    this.group.attr({\n      position: viewCoordSys.position,\n      scale: viewCoordSys.scale\n    });\n    this._viewCoordSys = viewCoordSys;\n    this._min = min;\n    this._max = max;\n  },\n  _updateController: function (seriesModel, ecModel, api) {\n    var controller = this._controller;\n    var controllerHost = this._controllerHost;\n    var group = this.group;\n    controller.setPointerChecker(function (e, x, y) {\n      var rect = group.getBoundingRect();\n      rect.applyTransform(group.transform);\n      return rect.contain(x, y) && !onIrrelevantElement(e, api, seriesModel);\n    });\n    controller.enable(seriesModel.get('roam'));\n    controllerHost.zoomLimit = seriesModel.get('scaleLimit');\n    controllerHost.zoom = seriesModel.coordinateSystem.getZoom();\n    controller.off('pan').off('zoom').on('pan', function (e) {\n      roamHelper.updateViewOnPan(controllerHost, e.dx, e.dy);\n      api.dispatchAction({\n        seriesId: seriesModel.id,\n        type: 'treeRoam',\n        dx: e.dx,\n        dy: e.dy\n      });\n    }, this).on('zoom', function (e) {\n      roamHelper.updateViewOnZoom(controllerHost, e.scale, e.originX, e.originY);\n      api.dispatchAction({\n        seriesId: seriesModel.id,\n        type: 'treeRoam',\n        zoom: e.scale,\n        originX: e.originX,\n        originY: e.originY\n      });\n\n      this._updateNodeAndLinkScale(seriesModel);\n    }, this);\n  },\n  _updateNodeAndLinkScale: function (seriesModel) {\n    var data = seriesModel.getData();\n\n    var nodeScale = this._getNodeGlobalScale(seriesModel);\n\n    var invScale = [nodeScale, nodeScale];\n    data.eachItemGraphicEl(function (el, idx) {\n      el.attr('scale', invScale);\n    });\n  },\n  _getNodeGlobalScale: function (seriesModel) {\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys.type !== 'view') {\n      return 1;\n    }\n\n    var nodeScaleRatio = this._nodeScaleRatio;\n    var groupScale = coordSys.scale;\n    var groupZoom = groupScale && groupScale[0] || 1; // Scale node when zoom changes\n\n    var roamZoom = coordSys.getZoom();\n    var nodeScale = (roamZoom - 1) * nodeScaleRatio + 1;\n    return nodeScale / groupZoom;\n  },\n  dispose: function () {\n    this._controller && this._controller.dispose();\n    this._controllerHost = {};\n  },\n  remove: function () {\n    this._mainGroup.removeAll();\n\n    this._data = null;\n  }\n});\n\nfunction symbolNeedsDraw(data, dataIndex) {\n  var layout = data.getItemLayout(dataIndex);\n  return layout && !isNaN(layout.x) && !isNaN(layout.y) && data.getItemVisual(dataIndex, 'symbol') !== 'none';\n}\n\nfunction getTreeNodeStyle(node, itemModel, seriesScope) {\n  seriesScope.itemModel = itemModel;\n  seriesScope.itemStyle = itemModel.getModel('itemStyle').getItemStyle();\n  seriesScope.hoverItemStyle = itemModel.getModel('emphasis.itemStyle').getItemStyle();\n  seriesScope.lineStyle = itemModel.getModel('lineStyle').getLineStyle();\n  seriesScope.labelModel = itemModel.getModel('label');\n  seriesScope.hoverLabelModel = itemModel.getModel('emphasis.label');\n\n  if (node.isExpand === false && node.children.length !== 0) {\n    seriesScope.symbolInnerColor = seriesScope.itemStyle.fill;\n  } else {\n    seriesScope.symbolInnerColor = '#fff';\n  }\n\n  return seriesScope;\n}\n\nfunction updateNode(data, dataIndex, symbolEl, group, seriesModel, seriesScope) {\n  var isInit = !symbolEl;\n  var node = data.tree.getNodeByDataIndex(dataIndex);\n  var itemModel = node.getModel();\n  var seriesScope = getTreeNodeStyle(node, itemModel, seriesScope);\n  var virtualRoot = data.tree.root;\n  var source = node.parentNode === virtualRoot ? node : node.parentNode || node;\n  var sourceSymbolEl = data.getItemGraphicEl(source.dataIndex);\n  var sourceLayout = source.getLayout();\n  var sourceOldLayout = sourceSymbolEl ? {\n    x: sourceSymbolEl.position[0],\n    y: sourceSymbolEl.position[1],\n    rawX: sourceSymbolEl.__radialOldRawX,\n    rawY: sourceSymbolEl.__radialOldRawY\n  } : sourceLayout;\n  var targetLayout = node.getLayout();\n\n  if (isInit) {\n    symbolEl = new SymbolClz(data, dataIndex, seriesScope);\n    symbolEl.attr('position', [sourceOldLayout.x, sourceOldLayout.y]);\n  } else {\n    symbolEl.updateData(data, dataIndex, seriesScope);\n  }\n\n  symbolEl.__radialOldRawX = symbolEl.__radialRawX;\n  symbolEl.__radialOldRawY = symbolEl.__radialRawY;\n  symbolEl.__radialRawX = targetLayout.rawX;\n  symbolEl.__radialRawY = targetLayout.rawY;\n  group.add(symbolEl);\n  data.setItemGraphicEl(dataIndex, symbolEl);\n  graphic.updateProps(symbolEl, {\n    position: [targetLayout.x, targetLayout.y]\n  }, seriesModel);\n  var symbolPath = symbolEl.getSymbolPath();\n\n  if (seriesScope.layout === 'radial') {\n    var realRoot = virtualRoot.children[0];\n    var rootLayout = realRoot.getLayout();\n    var length = realRoot.children.length;\n    var rad;\n    var isLeft;\n\n    if (targetLayout.x === rootLayout.x && node.isExpand === true) {\n      var center = {};\n      center.x = (realRoot.children[0].getLayout().x + realRoot.children[length - 1].getLayout().x) / 2;\n      center.y = (realRoot.children[0].getLayout().y + realRoot.children[length - 1].getLayout().y) / 2;\n      rad = Math.atan2(center.y - rootLayout.y, center.x - rootLayout.x);\n\n      if (rad < 0) {\n        rad = Math.PI * 2 + rad;\n      }\n\n      isLeft = center.x < rootLayout.x;\n\n      if (isLeft) {\n        rad = rad - Math.PI;\n      }\n    } else {\n      rad = Math.atan2(targetLayout.y - rootLayout.y, targetLayout.x - rootLayout.x);\n\n      if (rad < 0) {\n        rad = Math.PI * 2 + rad;\n      }\n\n      if (node.children.length === 0 || node.children.length !== 0 && node.isExpand === false) {\n        isLeft = targetLayout.x < rootLayout.x;\n\n        if (isLeft) {\n          rad = rad - Math.PI;\n        }\n      } else {\n        isLeft = targetLayout.x > rootLayout.x;\n\n        if (!isLeft) {\n          rad = rad - Math.PI;\n        }\n      }\n    }\n\n    var textPosition = isLeft ? 'left' : 'right';\n    var rotate = seriesScope.labelModel.get('rotate');\n    var labelRotateRadian = rotate * (Math.PI / 180);\n    symbolPath.setStyle({\n      textPosition: seriesScope.labelModel.get('position') || textPosition,\n      textRotation: rotate == null ? -rad : labelRotateRadian,\n      textOrigin: 'center',\n      verticalAlign: 'middle'\n    });\n  }\n\n  drawEdge(seriesModel, node, virtualRoot, symbolEl, sourceOldLayout, sourceLayout, targetLayout, group, seriesScope);\n}\n\nfunction drawEdge(seriesModel, node, virtualRoot, symbolEl, sourceOldLayout, sourceLayout, targetLayout, group, seriesScope) {\n  var edgeShape = seriesScope.edgeShape;\n  var edge = symbolEl.__edge;\n\n  if (edgeShape === 'curve') {\n    if (node.parentNode && node.parentNode !== virtualRoot) {\n      if (!edge) {\n        edge = symbolEl.__edge = new graphic.BezierCurve({\n          shape: getEdgeShape(seriesScope, sourceOldLayout, sourceOldLayout),\n          style: zrUtil.defaults({\n            opacity: 0,\n            strokeNoScale: true\n          }, seriesScope.lineStyle)\n        });\n      }\n\n      graphic.updateProps(edge, {\n        shape: getEdgeShape(seriesScope, sourceLayout, targetLayout),\n        style: zrUtil.defaults({\n          opacity: 1\n        }, seriesScope.lineStyle)\n      }, seriesModel);\n    }\n  } else if (edgeShape === 'polyline') {\n    if (seriesScope.layout === 'orthogonal') {\n      if (node !== virtualRoot && node.children && node.children.length !== 0 && node.isExpand === true) {\n        var children = node.children;\n        var childPoints = [];\n\n        for (var i = 0; i < children.length; i++) {\n          var childLayout = children[i].getLayout();\n          childPoints.push([childLayout.x, childLayout.y]);\n        }\n\n        if (!edge) {\n          edge = symbolEl.__edge = new TreeShape({\n            shape: {\n              parentPoint: [targetLayout.x, targetLayout.y],\n              childPoints: [[targetLayout.x, targetLayout.y]],\n              orient: seriesScope.orient,\n              forkPosition: seriesScope.edgeForkPosition\n            },\n            style: zrUtil.defaults({\n              opacity: 0,\n              strokeNoScale: true\n            }, seriesScope.lineStyle)\n          });\n        }\n\n        graphic.updateProps(edge, {\n          shape: {\n            parentPoint: [targetLayout.x, targetLayout.y],\n            childPoints: childPoints\n          },\n          style: zrUtil.defaults({\n            opacity: 1\n          }, seriesScope.lineStyle)\n        }, seriesModel);\n      }\n    } else {}\n  }\n\n  group.add(edge);\n}\n\nfunction removeNode(data, dataIndex, symbolEl, group, seriesModel, seriesScope) {\n  var node = data.tree.getNodeByDataIndex(dataIndex);\n  var virtualRoot = data.tree.root;\n  var itemModel = node.getModel();\n  var seriesScope = getTreeNodeStyle(node, itemModel, seriesScope);\n  var source = node.parentNode === virtualRoot ? node : node.parentNode || node;\n  var edgeShape = seriesScope.edgeShape;\n  var sourceLayout;\n\n  while (sourceLayout = source.getLayout(), sourceLayout == null) {\n    source = source.parentNode === virtualRoot ? source : source.parentNode || source;\n  }\n\n  graphic.updateProps(symbolEl, {\n    position: [sourceLayout.x + 1, sourceLayout.y + 1]\n  }, seriesModel, function () {\n    group.remove(symbolEl);\n    data.setItemGraphicEl(dataIndex, null);\n  });\n  symbolEl.fadeOut(null, {\n    keepLabel: true\n  });\n  var sourceSymbolEl = data.getItemGraphicEl(source.dataIndex);\n  var sourceEdge = sourceSymbolEl.__edge; // 1. when expand the sub tree, delete the children node should delete the edge of\n  // the source at the same time. because the polyline edge shape is only owned by the source.\n  // 2.when the node is the only children of the source, delete the node should delete the edge of\n  // the source at the same time. the same reason as above.\n\n  var edge = symbolEl.__edge || (source.isExpand === false || source.children.length === 1 ? sourceEdge : undefined);\n  var edgeShape = seriesScope.edgeShape;\n\n  if (edge) {\n    if (edgeShape === 'curve') {\n      graphic.updateProps(edge, {\n        shape: getEdgeShape(seriesScope, sourceLayout, sourceLayout),\n        style: {\n          opacity: 0\n        }\n      }, seriesModel, function () {\n        group.remove(edge);\n      });\n    } else if (edgeShape === 'polyline' && seriesScope.layout === 'orthogonal') {\n      graphic.updateProps(edge, {\n        shape: {\n          parentPoint: [sourceLayout.x, sourceLayout.y],\n          childPoints: [[sourceLayout.x, sourceLayout.y]]\n        },\n        style: {\n          opacity: 0\n        }\n      }, seriesModel, function () {\n        group.remove(edge);\n      });\n    }\n  }\n}\n\nfunction getEdgeShape(seriesScope, sourceLayout, targetLayout) {\n  var cpx1;\n  var cpy1;\n  var cpx2;\n  var cpy2;\n  var orient = seriesScope.orient;\n  var x1;\n  var x2;\n  var y1;\n  var y2;\n\n  if (seriesScope.layout === 'radial') {\n    x1 = sourceLayout.rawX;\n    y1 = sourceLayout.rawY;\n    x2 = targetLayout.rawX;\n    y2 = targetLayout.rawY;\n    var radialCoor1 = radialCoordinate(x1, y1);\n    var radialCoor2 = radialCoordinate(x1, y1 + (y2 - y1) * seriesScope.curvature);\n    var radialCoor3 = radialCoordinate(x2, y2 + (y1 - y2) * seriesScope.curvature);\n    var radialCoor4 = radialCoordinate(x2, y2);\n    return {\n      x1: radialCoor1.x,\n      y1: radialCoor1.y,\n      x2: radialCoor4.x,\n      y2: radialCoor4.y,\n      cpx1: radialCoor2.x,\n      cpy1: radialCoor2.y,\n      cpx2: radialCoor3.x,\n      cpy2: radialCoor3.y\n    };\n  } else {\n    x1 = sourceLayout.x;\n    y1 = sourceLayout.y;\n    x2 = targetLayout.x;\n    y2 = targetLayout.y;\n\n    if (orient === 'LR' || orient === 'RL') {\n      cpx1 = x1 + (x2 - x1) * seriesScope.curvature;\n      cpy1 = y1;\n      cpx2 = x2 + (x1 - x2) * seriesScope.curvature;\n      cpy2 = y2;\n    }\n\n    if (orient === 'TB' || orient === 'BT') {\n      cpx1 = x1;\n      cpy1 = y1 + (y2 - y1) * seriesScope.curvature;\n      cpx2 = x2;\n      cpy2 = y2 + (y1 - y2) * seriesScope.curvature;\n    }\n  }\n\n  return {\n    x1: x1,\n    y1: y1,\n    x2: x2,\n    y2: y2,\n    cpx1: cpx1,\n    cpy1: cpy1,\n    cpx2: cpx2,\n    cpy2: cpy2\n  };\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}