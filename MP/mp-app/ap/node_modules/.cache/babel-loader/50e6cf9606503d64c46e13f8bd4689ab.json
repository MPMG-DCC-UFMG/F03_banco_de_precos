{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar graphic = require(\"../../util/graphic\");\n\nvar layout = require(\"../../util/layout\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _treeHelper = require(\"../helper/treeHelper\");\n\nvar wrapTreePathInfo = _treeHelper.wrapTreePathInfo;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar TEXT_PADDING = 8;\nvar ITEM_GAP = 8;\nvar ARRAY_LENGTH = 5;\n\nfunction Breadcrumb(containerGroup) {\n  /**\n   * @private\n   * @type {module:zrender/container/Group}\n   */\n  this.group = new graphic.Group();\n  containerGroup.add(this.group);\n}\n\nBreadcrumb.prototype = {\n  constructor: Breadcrumb,\n  render: function render(seriesModel, api, targetNode, onSelect) {\n    var model = seriesModel.getModel('breadcrumb');\n    var thisGroup = this.group;\n    thisGroup.removeAll();\n\n    if (!model.get('show') || !targetNode) {\n      return;\n    }\n\n    var normalStyleModel = model.getModel('itemStyle'); // var emphasisStyleModel = model.getModel('emphasis.itemStyle');\n\n    var textStyleModel = normalStyleModel.getModel('textStyle');\n    var layoutParam = {\n      pos: {\n        left: model.get('left'),\n        right: model.get('right'),\n        top: model.get('top'),\n        bottom: model.get('bottom')\n      },\n      box: {\n        width: api.getWidth(),\n        height: api.getHeight()\n      },\n      emptyItemWidth: model.get('emptyItemWidth'),\n      totalWidth: 0,\n      renderList: []\n    };\n\n    this._prepare(targetNode, layoutParam, textStyleModel);\n\n    this._renderContent(seriesModel, layoutParam, normalStyleModel, textStyleModel, onSelect);\n\n    layout.positionElement(thisGroup, layoutParam.pos, layoutParam.box);\n  },\n\n  /**\n   * Prepare render list and total width\n   * @private\n   */\n  _prepare: function _prepare(targetNode, layoutParam, textStyleModel) {\n    for (var node = targetNode; node; node = node.parentNode) {\n      var text = node.getModel().get('name');\n      var textRect = textStyleModel.getTextRect(text);\n      var itemWidth = Math.max(textRect.width + TEXT_PADDING * 2, layoutParam.emptyItemWidth);\n      layoutParam.totalWidth += itemWidth + ITEM_GAP;\n      layoutParam.renderList.push({\n        node: node,\n        text: text,\n        width: itemWidth\n      });\n    }\n  },\n\n  /**\n   * @private\n   */\n  _renderContent: function _renderContent(seriesModel, layoutParam, normalStyleModel, textStyleModel, onSelect) {\n    // Start rendering.\n    var lastX = 0;\n    var emptyItemWidth = layoutParam.emptyItemWidth;\n    var height = seriesModel.get('breadcrumb.height');\n    var availableSize = layout.getAvailableSize(layoutParam.pos, layoutParam.box);\n    var totalWidth = layoutParam.totalWidth;\n    var renderList = layoutParam.renderList;\n\n    for (var i = renderList.length - 1; i >= 0; i--) {\n      var item = renderList[i];\n      var itemNode = item.node;\n      var itemWidth = item.width;\n      var text = item.text; // Hdie text and shorten width if necessary.\n\n      if (totalWidth > availableSize.width) {\n        totalWidth -= itemWidth - emptyItemWidth;\n        itemWidth = emptyItemWidth;\n        text = null;\n      }\n\n      var el = new graphic.Polygon({\n        shape: {\n          points: makeItemPoints(lastX, 0, itemWidth, height, i === renderList.length - 1, i === 0)\n        },\n        style: zrUtil.defaults(normalStyleModel.getItemStyle(), {\n          lineJoin: 'bevel',\n          text: text,\n          textFill: textStyleModel.getTextColor(),\n          textFont: textStyleModel.getFont()\n        }),\n        z: 10,\n        onclick: zrUtil.curry(onSelect, itemNode)\n      });\n      this.group.add(el);\n      packEventData(el, seriesModel, itemNode);\n      lastX += itemWidth + ITEM_GAP;\n    }\n  },\n\n  /**\n   * @override\n   */\n  remove: function remove() {\n    this.group.removeAll();\n  }\n};\n\nfunction makeItemPoints(x, y, itemWidth, itemHeight, head, tail) {\n  var points = [[head ? x : x - ARRAY_LENGTH, y], [x + itemWidth, y], [x + itemWidth, y + itemHeight], [head ? x : x - ARRAY_LENGTH, y + itemHeight]];\n  !tail && points.splice(2, 0, [x + itemWidth + ARRAY_LENGTH, y + itemHeight / 2]);\n  !head && points.push([x, y + itemHeight / 2]);\n  return points;\n} // Package custom mouse event.\n\n\nfunction packEventData(el, seriesModel, itemNode) {\n  el.eventData = {\n    componentType: 'series',\n    componentSubType: 'treemap',\n    componentIndex: seriesModel.componentIndex,\n    seriesIndex: seriesModel.componentIndex,\n    seriesName: seriesModel.name,\n    seriesType: 'treemap',\n    selfType: 'breadcrumb',\n    // Distinguish with click event on treemap node.\n    nodeData: {\n      dataIndex: itemNode && itemNode.dataIndex,\n      name: itemNode && itemNode.name\n    },\n    treePathInfo: itemNode && wrapTreePathInfo(itemNode, seriesModel)\n  };\n}\n\nvar _default = Breadcrumb;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/chart/treemap/Breadcrumb.js"],"names":["graphic","require","layout","zrUtil","_treeHelper","wrapTreePathInfo","TEXT_PADDING","ITEM_GAP","ARRAY_LENGTH","Breadcrumb","containerGroup","group","Group","add","prototype","constructor","render","seriesModel","api","targetNode","onSelect","model","getModel","thisGroup","removeAll","get","normalStyleModel","textStyleModel","layoutParam","pos","left","right","top","bottom","box","width","getWidth","height","getHeight","emptyItemWidth","totalWidth","renderList","_prepare","_renderContent","positionElement","node","parentNode","text","textRect","getTextRect","itemWidth","Math","max","push","lastX","availableSize","getAvailableSize","i","length","item","itemNode","el","Polygon","shape","points","makeItemPoints","style","defaults","getItemStyle","lineJoin","textFill","getTextColor","textFont","getFont","z","onclick","curry","packEventData","remove","x","y","itemHeight","head","tail","splice","eventData","componentType","componentSubType","componentIndex","seriesIndex","seriesName","name","seriesType","selfType","nodeData","dataIndex","treePathInfo","_default","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar graphic = require(\"../../util/graphic\");\n\nvar layout = require(\"../../util/layout\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _treeHelper = require(\"../helper/treeHelper\");\n\nvar wrapTreePathInfo = _treeHelper.wrapTreePathInfo;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar TEXT_PADDING = 8;\nvar ITEM_GAP = 8;\nvar ARRAY_LENGTH = 5;\n\nfunction Breadcrumb(containerGroup) {\n  /**\n   * @private\n   * @type {module:zrender/container/Group}\n   */\n  this.group = new graphic.Group();\n  containerGroup.add(this.group);\n}\n\nBreadcrumb.prototype = {\n  constructor: Breadcrumb,\n  render: function (seriesModel, api, targetNode, onSelect) {\n    var model = seriesModel.getModel('breadcrumb');\n    var thisGroup = this.group;\n    thisGroup.removeAll();\n\n    if (!model.get('show') || !targetNode) {\n      return;\n    }\n\n    var normalStyleModel = model.getModel('itemStyle'); // var emphasisStyleModel = model.getModel('emphasis.itemStyle');\n\n    var textStyleModel = normalStyleModel.getModel('textStyle');\n    var layoutParam = {\n      pos: {\n        left: model.get('left'),\n        right: model.get('right'),\n        top: model.get('top'),\n        bottom: model.get('bottom')\n      },\n      box: {\n        width: api.getWidth(),\n        height: api.getHeight()\n      },\n      emptyItemWidth: model.get('emptyItemWidth'),\n      totalWidth: 0,\n      renderList: []\n    };\n\n    this._prepare(targetNode, layoutParam, textStyleModel);\n\n    this._renderContent(seriesModel, layoutParam, normalStyleModel, textStyleModel, onSelect);\n\n    layout.positionElement(thisGroup, layoutParam.pos, layoutParam.box);\n  },\n\n  /**\n   * Prepare render list and total width\n   * @private\n   */\n  _prepare: function (targetNode, layoutParam, textStyleModel) {\n    for (var node = targetNode; node; node = node.parentNode) {\n      var text = node.getModel().get('name');\n      var textRect = textStyleModel.getTextRect(text);\n      var itemWidth = Math.max(textRect.width + TEXT_PADDING * 2, layoutParam.emptyItemWidth);\n      layoutParam.totalWidth += itemWidth + ITEM_GAP;\n      layoutParam.renderList.push({\n        node: node,\n        text: text,\n        width: itemWidth\n      });\n    }\n  },\n\n  /**\n   * @private\n   */\n  _renderContent: function (seriesModel, layoutParam, normalStyleModel, textStyleModel, onSelect) {\n    // Start rendering.\n    var lastX = 0;\n    var emptyItemWidth = layoutParam.emptyItemWidth;\n    var height = seriesModel.get('breadcrumb.height');\n    var availableSize = layout.getAvailableSize(layoutParam.pos, layoutParam.box);\n    var totalWidth = layoutParam.totalWidth;\n    var renderList = layoutParam.renderList;\n\n    for (var i = renderList.length - 1; i >= 0; i--) {\n      var item = renderList[i];\n      var itemNode = item.node;\n      var itemWidth = item.width;\n      var text = item.text; // Hdie text and shorten width if necessary.\n\n      if (totalWidth > availableSize.width) {\n        totalWidth -= itemWidth - emptyItemWidth;\n        itemWidth = emptyItemWidth;\n        text = null;\n      }\n\n      var el = new graphic.Polygon({\n        shape: {\n          points: makeItemPoints(lastX, 0, itemWidth, height, i === renderList.length - 1, i === 0)\n        },\n        style: zrUtil.defaults(normalStyleModel.getItemStyle(), {\n          lineJoin: 'bevel',\n          text: text,\n          textFill: textStyleModel.getTextColor(),\n          textFont: textStyleModel.getFont()\n        }),\n        z: 10,\n        onclick: zrUtil.curry(onSelect, itemNode)\n      });\n      this.group.add(el);\n      packEventData(el, seriesModel, itemNode);\n      lastX += itemWidth + ITEM_GAP;\n    }\n  },\n\n  /**\n   * @override\n   */\n  remove: function () {\n    this.group.removeAll();\n  }\n};\n\nfunction makeItemPoints(x, y, itemWidth, itemHeight, head, tail) {\n  var points = [[head ? x : x - ARRAY_LENGTH, y], [x + itemWidth, y], [x + itemWidth, y + itemHeight], [head ? x : x - ARRAY_LENGTH, y + itemHeight]];\n  !tail && points.splice(2, 0, [x + itemWidth + ARRAY_LENGTH, y + itemHeight / 2]);\n  !head && points.push([x, y + itemHeight / 2]);\n  return points;\n} // Package custom mouse event.\n\n\nfunction packEventData(el, seriesModel, itemNode) {\n  el.eventData = {\n    componentType: 'series',\n    componentSubType: 'treemap',\n    componentIndex: seriesModel.componentIndex,\n    seriesIndex: seriesModel.componentIndex,\n    seriesName: seriesModel.name,\n    seriesType: 'treemap',\n    selfType: 'breadcrumb',\n    // Distinguish with click event on treemap node.\n    nodeData: {\n      dataIndex: itemNode && itemNode.dataIndex,\n      name: itemNode && itemNode.name\n    },\n    treePathInfo: itemNode && wrapTreePathInfo(itemNode, seriesModel)\n  };\n}\n\nvar _default = Breadcrumb;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}