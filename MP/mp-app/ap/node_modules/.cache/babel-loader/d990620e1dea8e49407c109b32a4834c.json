{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar echarts = require(\"../../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar BrushController = require(\"../helper/BrushController\");\n\nvar _visualEncoding = require(\"./visualEncoding\");\n\nvar layoutCovers = _visualEncoding.layoutCovers;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _default = echarts.extendComponentView({\n  type: 'brush',\n  init: function init(ecModel, api) {\n    /**\n     * @readOnly\n     * @type {module:echarts/model/Global}\n     */\n    this.ecModel = ecModel;\n    /**\n     * @readOnly\n     * @type {module:echarts/ExtensionAPI}\n     */\n\n    this.api = api;\n    /**\n     * @readOnly\n     * @type {module:echarts/component/brush/BrushModel}\n     */\n\n    this.model;\n    /**\n     * @private\n     * @type {module:echarts/component/helper/BrushController}\n     */\n\n    (this._brushController = new BrushController(api.getZr())).on('brush', zrUtil.bind(this._onBrush, this)).mount();\n  },\n\n  /**\n   * @override\n   */\n  render: function render(brushModel) {\n    this.model = brushModel;\n    return updateController.apply(this, arguments);\n  },\n\n  /**\n   * @override\n   */\n  updateTransform: function updateTransform(brushModel, ecModel) {\n    // PENDING: `updateTransform` is a little tricky, whose layout need\n    // to be calculate mandatorily and other stages will not be performed.\n    // Take care the correctness of the logic. See #11754 .\n    layoutCovers(ecModel);\n    return updateController.apply(this, arguments);\n  },\n\n  /**\n   * @override\n   */\n  updateView: updateController,\n  // /**\n  //  * @override\n  //  */\n  // updateLayout: updateController,\n  // /**\n  //  * @override\n  //  */\n  // updateVisual: updateController,\n\n  /**\n   * @override\n   */\n  dispose: function dispose() {\n    this._brushController.dispose();\n  },\n\n  /**\n   * @private\n   */\n  _onBrush: function _onBrush(areas, opt) {\n    var modelId = this.model.id;\n    this.model.brushTargetManager.setOutputRanges(areas, this.ecModel); // Action is not dispatched on drag end, because the drag end\n    // emits the same params with the last drag move event, and\n    // may have some delay when using touch pad, which makes\n    // animation not smooth (when using debounce).\n\n    (!opt.isEnd || opt.removeOnClick) && this.api.dispatchAction({\n      type: 'brush',\n      brushId: modelId,\n      areas: zrUtil.clone(areas),\n      $from: modelId\n    });\n    opt.isEnd && this.api.dispatchAction({\n      type: 'brushEnd',\n      brushId: modelId,\n      areas: zrUtil.clone(areas),\n      $from: modelId\n    });\n  }\n});\n\nfunction updateController(brushModel, ecModel, api, payload) {\n  // Do not update controller when drawing.\n  (!payload || payload.$from !== brushModel.id) && this._brushController.setPanels(brushModel.brushTargetManager.makePanelOpts(api)).enableBrush(brushModel.brushOption).updateCovers(brushModel.areas.slice());\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/component/brush/BrushView.js"],"names":["echarts","require","zrUtil","BrushController","_visualEncoding","layoutCovers","_default","extendComponentView","type","init","ecModel","api","model","_brushController","getZr","on","bind","_onBrush","mount","render","brushModel","updateController","apply","arguments","updateTransform","updateView","dispose","areas","opt","modelId","id","brushTargetManager","setOutputRanges","isEnd","removeOnClick","dispatchAction","brushId","clone","$from","payload","setPanels","makePanelOpts","enableBrush","brushOption","updateCovers","slice","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar echarts = require(\"../../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar BrushController = require(\"../helper/BrushController\");\n\nvar _visualEncoding = require(\"./visualEncoding\");\n\nvar layoutCovers = _visualEncoding.layoutCovers;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _default = echarts.extendComponentView({\n  type: 'brush',\n  init: function (ecModel, api) {\n    /**\n     * @readOnly\n     * @type {module:echarts/model/Global}\n     */\n    this.ecModel = ecModel;\n    /**\n     * @readOnly\n     * @type {module:echarts/ExtensionAPI}\n     */\n\n    this.api = api;\n    /**\n     * @readOnly\n     * @type {module:echarts/component/brush/BrushModel}\n     */\n\n    this.model;\n    /**\n     * @private\n     * @type {module:echarts/component/helper/BrushController}\n     */\n\n    (this._brushController = new BrushController(api.getZr())).on('brush', zrUtil.bind(this._onBrush, this)).mount();\n  },\n\n  /**\n   * @override\n   */\n  render: function (brushModel) {\n    this.model = brushModel;\n    return updateController.apply(this, arguments);\n  },\n\n  /**\n   * @override\n   */\n  updateTransform: function (brushModel, ecModel) {\n    // PENDING: `updateTransform` is a little tricky, whose layout need\n    // to be calculate mandatorily and other stages will not be performed.\n    // Take care the correctness of the logic. See #11754 .\n    layoutCovers(ecModel);\n    return updateController.apply(this, arguments);\n  },\n\n  /**\n   * @override\n   */\n  updateView: updateController,\n  // /**\n  //  * @override\n  //  */\n  // updateLayout: updateController,\n  // /**\n  //  * @override\n  //  */\n  // updateVisual: updateController,\n\n  /**\n   * @override\n   */\n  dispose: function () {\n    this._brushController.dispose();\n  },\n\n  /**\n   * @private\n   */\n  _onBrush: function (areas, opt) {\n    var modelId = this.model.id;\n    this.model.brushTargetManager.setOutputRanges(areas, this.ecModel); // Action is not dispatched on drag end, because the drag end\n    // emits the same params with the last drag move event, and\n    // may have some delay when using touch pad, which makes\n    // animation not smooth (when using debounce).\n\n    (!opt.isEnd || opt.removeOnClick) && this.api.dispatchAction({\n      type: 'brush',\n      brushId: modelId,\n      areas: zrUtil.clone(areas),\n      $from: modelId\n    });\n    opt.isEnd && this.api.dispatchAction({\n      type: 'brushEnd',\n      brushId: modelId,\n      areas: zrUtil.clone(areas),\n      $from: modelId\n    });\n  }\n});\n\nfunction updateController(brushModel, ecModel, api, payload) {\n  // Do not update controller when drawing.\n  (!payload || payload.$from !== brushModel.id) && this._brushController.setPanels(brushModel.brushTargetManager.makePanelOpts(api)).enableBrush(brushModel.brushOption).updateCovers(brushModel.areas.slice());\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}