{"ast":null,"code":"/* global Float32Array */\nvar ArrayCtor = typeof Float32Array === 'undefined' ? Array : Float32Array;\n/**\n * 创建一个向量\n * @param {number} [x=0]\n * @param {number} [y=0]\n * @return {Vector2}\n */\n\nfunction create(x, y) {\n  var out = new ArrayCtor(2);\n\n  if (x == null) {\n    x = 0;\n  }\n\n  if (y == null) {\n    y = 0;\n  }\n\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * 复制向量数据\n * @param {Vector2} out\n * @param {Vector2} v\n * @return {Vector2}\n */\n\n\nfunction copy(out, v) {\n  out[0] = v[0];\n  out[1] = v[1];\n  return out;\n}\n/**\n * 克隆一个向量\n * @param {Vector2} v\n * @return {Vector2}\n */\n\n\nfunction clone(v) {\n  var out = new ArrayCtor(2);\n  out[0] = v[0];\n  out[1] = v[1];\n  return out;\n}\n/**\n * 设置向量的两个项\n * @param {Vector2} out\n * @param {number} a\n * @param {number} b\n * @return {Vector2} 结果\n */\n\n\nfunction set(out, a, b) {\n  out[0] = a;\n  out[1] = b;\n  return out;\n}\n/**\n * 向量相加\n * @param {Vector2} out\n * @param {Vector2} v1\n * @param {Vector2} v2\n */\n\n\nfunction add(out, v1, v2) {\n  out[0] = v1[0] + v2[0];\n  out[1] = v1[1] + v2[1];\n  return out;\n}\n/**\n * 向量缩放后相加\n * @param {Vector2} out\n * @param {Vector2} v1\n * @param {Vector2} v2\n * @param {number} a\n */\n\n\nfunction scaleAndAdd(out, v1, v2, a) {\n  out[0] = v1[0] + v2[0] * a;\n  out[1] = v1[1] + v2[1] * a;\n  return out;\n}\n/**\n * 向量相减\n * @param {Vector2} out\n * @param {Vector2} v1\n * @param {Vector2} v2\n */\n\n\nfunction sub(out, v1, v2) {\n  out[0] = v1[0] - v2[0];\n  out[1] = v1[1] - v2[1];\n  return out;\n}\n/**\n * 向量长度\n * @param {Vector2} v\n * @return {number}\n */\n\n\nfunction len(v) {\n  return Math.sqrt(lenSquare(v));\n}\n\nvar length = len; // jshint ignore:line\n\n/**\n * 向量长度平方\n * @param {Vector2} v\n * @return {number}\n */\n\nfunction lenSquare(v) {\n  return v[0] * v[0] + v[1] * v[1];\n}\n\nvar lengthSquare = lenSquare;\n/**\n * 向量乘法\n * @param {Vector2} out\n * @param {Vector2} v1\n * @param {Vector2} v2\n */\n\nfunction mul(out, v1, v2) {\n  out[0] = v1[0] * v2[0];\n  out[1] = v1[1] * v2[1];\n  return out;\n}\n/**\n * 向量除法\n * @param {Vector2} out\n * @param {Vector2} v1\n * @param {Vector2} v2\n */\n\n\nfunction div(out, v1, v2) {\n  out[0] = v1[0] / v2[0];\n  out[1] = v1[1] / v2[1];\n  return out;\n}\n/**\n * 向量点乘\n * @param {Vector2} v1\n * @param {Vector2} v2\n * @return {number}\n */\n\n\nfunction dot(v1, v2) {\n  return v1[0] * v2[0] + v1[1] * v2[1];\n}\n/**\n * 向量缩放\n * @param {Vector2} out\n * @param {Vector2} v\n * @param {number} s\n */\n\n\nfunction scale(out, v, s) {\n  out[0] = v[0] * s;\n  out[1] = v[1] * s;\n  return out;\n}\n/**\n * 向量归一化\n * @param {Vector2} out\n * @param {Vector2} v\n */\n\n\nfunction normalize(out, v) {\n  var d = len(v);\n\n  if (d === 0) {\n    out[0] = 0;\n    out[1] = 0;\n  } else {\n    out[0] = v[0] / d;\n    out[1] = v[1] / d;\n  }\n\n  return out;\n}\n/**\n * 计算向量间距离\n * @param {Vector2} v1\n * @param {Vector2} v2\n * @return {number}\n */\n\n\nfunction distance(v1, v2) {\n  return Math.sqrt((v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]));\n}\n\nvar dist = distance;\n/**\n * 向量距离平方\n * @param {Vector2} v1\n * @param {Vector2} v2\n * @return {number}\n */\n\nfunction distanceSquare(v1, v2) {\n  return (v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]);\n}\n\nvar distSquare = distanceSquare;\n/**\n * 求负向量\n * @param {Vector2} out\n * @param {Vector2} v\n */\n\nfunction negate(out, v) {\n  out[0] = -v[0];\n  out[1] = -v[1];\n  return out;\n}\n/**\n * 插值两个点\n * @param {Vector2} out\n * @param {Vector2} v1\n * @param {Vector2} v2\n * @param {number} t\n */\n\n\nfunction lerp(out, v1, v2, t) {\n  out[0] = v1[0] + t * (v2[0] - v1[0]);\n  out[1] = v1[1] + t * (v2[1] - v1[1]);\n  return out;\n}\n/**\n * 矩阵左乘向量\n * @param {Vector2} out\n * @param {Vector2} v\n * @param {Vector2} m\n */\n\n\nfunction applyTransform(out, v, m) {\n  var x = v[0];\n  var y = v[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * 求两个向量最小值\n * @param  {Vector2} out\n * @param  {Vector2} v1\n * @param  {Vector2} v2\n */\n\n\nfunction min(out, v1, v2) {\n  out[0] = Math.min(v1[0], v2[0]);\n  out[1] = Math.min(v1[1], v2[1]);\n  return out;\n}\n/**\n * 求两个向量最大值\n * @param  {Vector2} out\n * @param  {Vector2} v1\n * @param  {Vector2} v2\n */\n\n\nfunction max(out, v1, v2) {\n  out[0] = Math.max(v1[0], v2[0]);\n  out[1] = Math.max(v1[1], v2[1]);\n  return out;\n}\n\nexports.create = create;\nexports.copy = copy;\nexports.clone = clone;\nexports.set = set;\nexports.add = add;\nexports.scaleAndAdd = scaleAndAdd;\nexports.sub = sub;\nexports.len = len;\nexports.length = length;\nexports.lenSquare = lenSquare;\nexports.lengthSquare = lengthSquare;\nexports.mul = mul;\nexports.div = div;\nexports.dot = dot;\nexports.scale = scale;\nexports.normalize = normalize;\nexports.distance = distance;\nexports.dist = dist;\nexports.distanceSquare = distanceSquare;\nexports.distSquare = distSquare;\nexports.negate = negate;\nexports.lerp = lerp;\nexports.applyTransform = applyTransform;\nexports.min = min;\nexports.max = max;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/zrender/lib/core/vector.js"],"names":["ArrayCtor","Float32Array","Array","create","x","y","out","copy","v","clone","set","a","b","add","v1","v2","scaleAndAdd","sub","len","Math","sqrt","lenSquare","length","lengthSquare","mul","div","dot","scale","s","normalize","d","distance","dist","distanceSquare","distSquare","negate","lerp","t","applyTransform","m","min","max","exports"],"mappings":"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","sourcesContent":["/* global Float32Array */\nvar ArrayCtor = typeof Float32Array === 'undefined' ? Array : Float32Array;\n/**\n * 创建一个向量\n * @param {number} [x=0]\n * @param {number} [y=0]\n * @return {Vector2}\n */\n\nfunction create(x, y) {\n  var out = new ArrayCtor(2);\n\n  if (x == null) {\n    x = 0;\n  }\n\n  if (y == null) {\n    y = 0;\n  }\n\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * 复制向量数据\n * @param {Vector2} out\n * @param {Vector2} v\n * @return {Vector2}\n */\n\n\nfunction copy(out, v) {\n  out[0] = v[0];\n  out[1] = v[1];\n  return out;\n}\n/**\n * 克隆一个向量\n * @param {Vector2} v\n * @return {Vector2}\n */\n\n\nfunction clone(v) {\n  var out = new ArrayCtor(2);\n  out[0] = v[0];\n  out[1] = v[1];\n  return out;\n}\n/**\n * 设置向量的两个项\n * @param {Vector2} out\n * @param {number} a\n * @param {number} b\n * @return {Vector2} 结果\n */\n\n\nfunction set(out, a, b) {\n  out[0] = a;\n  out[1] = b;\n  return out;\n}\n/**\n * 向量相加\n * @param {Vector2} out\n * @param {Vector2} v1\n * @param {Vector2} v2\n */\n\n\nfunction add(out, v1, v2) {\n  out[0] = v1[0] + v2[0];\n  out[1] = v1[1] + v2[1];\n  return out;\n}\n/**\n * 向量缩放后相加\n * @param {Vector2} out\n * @param {Vector2} v1\n * @param {Vector2} v2\n * @param {number} a\n */\n\n\nfunction scaleAndAdd(out, v1, v2, a) {\n  out[0] = v1[0] + v2[0] * a;\n  out[1] = v1[1] + v2[1] * a;\n  return out;\n}\n/**\n * 向量相减\n * @param {Vector2} out\n * @param {Vector2} v1\n * @param {Vector2} v2\n */\n\n\nfunction sub(out, v1, v2) {\n  out[0] = v1[0] - v2[0];\n  out[1] = v1[1] - v2[1];\n  return out;\n}\n/**\n * 向量长度\n * @param {Vector2} v\n * @return {number}\n */\n\n\nfunction len(v) {\n  return Math.sqrt(lenSquare(v));\n}\n\nvar length = len; // jshint ignore:line\n\n/**\n * 向量长度平方\n * @param {Vector2} v\n * @return {number}\n */\n\nfunction lenSquare(v) {\n  return v[0] * v[0] + v[1] * v[1];\n}\n\nvar lengthSquare = lenSquare;\n/**\n * 向量乘法\n * @param {Vector2} out\n * @param {Vector2} v1\n * @param {Vector2} v2\n */\n\nfunction mul(out, v1, v2) {\n  out[0] = v1[0] * v2[0];\n  out[1] = v1[1] * v2[1];\n  return out;\n}\n/**\n * 向量除法\n * @param {Vector2} out\n * @param {Vector2} v1\n * @param {Vector2} v2\n */\n\n\nfunction div(out, v1, v2) {\n  out[0] = v1[0] / v2[0];\n  out[1] = v1[1] / v2[1];\n  return out;\n}\n/**\n * 向量点乘\n * @param {Vector2} v1\n * @param {Vector2} v2\n * @return {number}\n */\n\n\nfunction dot(v1, v2) {\n  return v1[0] * v2[0] + v1[1] * v2[1];\n}\n/**\n * 向量缩放\n * @param {Vector2} out\n * @param {Vector2} v\n * @param {number} s\n */\n\n\nfunction scale(out, v, s) {\n  out[0] = v[0] * s;\n  out[1] = v[1] * s;\n  return out;\n}\n/**\n * 向量归一化\n * @param {Vector2} out\n * @param {Vector2} v\n */\n\n\nfunction normalize(out, v) {\n  var d = len(v);\n\n  if (d === 0) {\n    out[0] = 0;\n    out[1] = 0;\n  } else {\n    out[0] = v[0] / d;\n    out[1] = v[1] / d;\n  }\n\n  return out;\n}\n/**\n * 计算向量间距离\n * @param {Vector2} v1\n * @param {Vector2} v2\n * @return {number}\n */\n\n\nfunction distance(v1, v2) {\n  return Math.sqrt((v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]));\n}\n\nvar dist = distance;\n/**\n * 向量距离平方\n * @param {Vector2} v1\n * @param {Vector2} v2\n * @return {number}\n */\n\nfunction distanceSquare(v1, v2) {\n  return (v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]);\n}\n\nvar distSquare = distanceSquare;\n/**\n * 求负向量\n * @param {Vector2} out\n * @param {Vector2} v\n */\n\nfunction negate(out, v) {\n  out[0] = -v[0];\n  out[1] = -v[1];\n  return out;\n}\n/**\n * 插值两个点\n * @param {Vector2} out\n * @param {Vector2} v1\n * @param {Vector2} v2\n * @param {number} t\n */\n\n\nfunction lerp(out, v1, v2, t) {\n  out[0] = v1[0] + t * (v2[0] - v1[0]);\n  out[1] = v1[1] + t * (v2[1] - v1[1]);\n  return out;\n}\n/**\n * 矩阵左乘向量\n * @param {Vector2} out\n * @param {Vector2} v\n * @param {Vector2} m\n */\n\n\nfunction applyTransform(out, v, m) {\n  var x = v[0];\n  var y = v[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * 求两个向量最小值\n * @param  {Vector2} out\n * @param  {Vector2} v1\n * @param  {Vector2} v2\n */\n\n\nfunction min(out, v1, v2) {\n  out[0] = Math.min(v1[0], v2[0]);\n  out[1] = Math.min(v1[1], v2[1]);\n  return out;\n}\n/**\n * 求两个向量最大值\n * @param  {Vector2} out\n * @param  {Vector2} v1\n * @param  {Vector2} v2\n */\n\n\nfunction max(out, v1, v2) {\n  out[0] = Math.max(v1[0], v2[0]);\n  out[1] = Math.max(v1[1], v2[1]);\n  return out;\n}\n\nexports.create = create;\nexports.copy = copy;\nexports.clone = clone;\nexports.set = set;\nexports.add = add;\nexports.scaleAndAdd = scaleAndAdd;\nexports.sub = sub;\nexports.len = len;\nexports.length = length;\nexports.lenSquare = lenSquare;\nexports.lengthSquare = lengthSquare;\nexports.mul = mul;\nexports.div = div;\nexports.dot = dot;\nexports.scale = scale;\nexports.normalize = normalize;\nexports.distance = distance;\nexports.dist = dist;\nexports.distanceSquare = distanceSquare;\nexports.distSquare = distSquare;\nexports.negate = negate;\nexports.lerp = lerp;\nexports.applyTransform = applyTransform;\nexports.min = min;\nexports.max = max;"]},"metadata":{},"sourceType":"script"}