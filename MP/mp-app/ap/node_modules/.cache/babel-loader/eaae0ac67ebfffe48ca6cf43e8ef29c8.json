{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar Model = require(\"../../model/Model\");\n\nvar AxisView = require(\"./AxisView\");\n\nvar AxisBuilder = require(\"./AxisBuilder\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar elementList = ['axisLine', 'axisLabel', 'axisTick', 'minorTick', 'splitLine', 'minorSplitLine', 'splitArea'];\n\nfunction getAxisLineShape(polar, rExtent, angle) {\n  rExtent[1] > rExtent[0] && (rExtent = rExtent.slice().reverse());\n  var start = polar.coordToPoint([rExtent[0], angle]);\n  var end = polar.coordToPoint([rExtent[1], angle]);\n  return {\n    x1: start[0],\n    y1: start[1],\n    x2: end[0],\n    y2: end[1]\n  };\n}\n\nfunction getRadiusIdx(polar) {\n  var radiusAxis = polar.getRadiusAxis();\n  return radiusAxis.inverse ? 0 : 1;\n} // Remove the last tick which will overlap the first tick\n\n\nfunction fixAngleOverlap(list) {\n  var firstItem = list[0];\n  var lastItem = list[list.length - 1];\n\n  if (firstItem && lastItem && Math.abs(Math.abs(firstItem.coord - lastItem.coord) - 360) < 1e-4) {\n    list.pop();\n  }\n}\n\nvar _default = AxisView.extend({\n  type: 'angleAxis',\n  axisPointerClass: 'PolarAxisPointer',\n  render: function render(angleAxisModel, ecModel) {\n    this.group.removeAll();\n\n    if (!angleAxisModel.get('show')) {\n      return;\n    }\n\n    var angleAxis = angleAxisModel.axis;\n    var polar = angleAxis.polar;\n    var radiusExtent = polar.getRadiusAxis().getExtent();\n    var ticksAngles = angleAxis.getTicksCoords();\n    var minorTickAngles = angleAxis.getMinorTicksCoords();\n    var labels = zrUtil.map(angleAxis.getViewLabels(), function (labelItem) {\n      var labelItem = zrUtil.clone(labelItem);\n      labelItem.coord = angleAxis.dataToCoord(labelItem.tickValue);\n      return labelItem;\n    });\n    fixAngleOverlap(labels);\n    fixAngleOverlap(ticksAngles);\n    zrUtil.each(elementList, function (name) {\n      if (angleAxisModel.get(name + '.show') && (!angleAxis.scale.isBlank() || name === 'axisLine')) {\n        this['_' + name](angleAxisModel, polar, ticksAngles, minorTickAngles, radiusExtent, labels);\n      }\n    }, this);\n  },\n\n  /**\n   * @private\n   */\n  _axisLine: function _axisLine(angleAxisModel, polar, ticksAngles, minorTickAngles, radiusExtent) {\n    var lineStyleModel = angleAxisModel.getModel('axisLine.lineStyle'); // extent id of the axis radius (r0 and r)\n\n    var rId = getRadiusIdx(polar);\n    var r0Id = rId ? 0 : 1;\n    var shape;\n\n    if (radiusExtent[r0Id] === 0) {\n      shape = new graphic.Circle({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r: radiusExtent[rId]\n        },\n        style: lineStyleModel.getLineStyle(),\n        z2: 1,\n        silent: true\n      });\n    } else {\n      shape = new graphic.Ring({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r: radiusExtent[rId],\n          r0: radiusExtent[r0Id]\n        },\n        style: lineStyleModel.getLineStyle(),\n        z2: 1,\n        silent: true\n      });\n    }\n\n    shape.style.fill = null;\n    this.group.add(shape);\n  },\n\n  /**\n   * @private\n   */\n  _axisTick: function _axisTick(angleAxisModel, polar, ticksAngles, minorTickAngles, radiusExtent) {\n    var tickModel = angleAxisModel.getModel('axisTick');\n    var tickLen = (tickModel.get('inside') ? -1 : 1) * tickModel.get('length');\n    var radius = radiusExtent[getRadiusIdx(polar)];\n    var lines = zrUtil.map(ticksAngles, function (tickAngleItem) {\n      return new graphic.Line({\n        shape: getAxisLineShape(polar, [radius, radius + tickLen], tickAngleItem.coord)\n      });\n    });\n    this.group.add(graphic.mergePath(lines, {\n      style: zrUtil.defaults(tickModel.getModel('lineStyle').getLineStyle(), {\n        stroke: angleAxisModel.get('axisLine.lineStyle.color')\n      })\n    }));\n  },\n\n  /**\n   * @private\n   */\n  _minorTick: function _minorTick(angleAxisModel, polar, tickAngles, minorTickAngles, radiusExtent) {\n    if (!minorTickAngles.length) {\n      return;\n    }\n\n    var tickModel = angleAxisModel.getModel('axisTick');\n    var minorTickModel = angleAxisModel.getModel('minorTick');\n    var tickLen = (tickModel.get('inside') ? -1 : 1) * minorTickModel.get('length');\n    var radius = radiusExtent[getRadiusIdx(polar)];\n    var lines = [];\n\n    for (var i = 0; i < minorTickAngles.length; i++) {\n      for (var k = 0; k < minorTickAngles[i].length; k++) {\n        lines.push(new graphic.Line({\n          shape: getAxisLineShape(polar, [radius, radius + tickLen], minorTickAngles[i][k].coord)\n        }));\n      }\n    }\n\n    this.group.add(graphic.mergePath(lines, {\n      style: zrUtil.defaults(minorTickModel.getModel('lineStyle').getLineStyle(), zrUtil.defaults(tickModel.getLineStyle(), {\n        stroke: angleAxisModel.get('axisLine.lineStyle.color')\n      }))\n    }));\n  },\n\n  /**\n   * @private\n   */\n  _axisLabel: function _axisLabel(angleAxisModel, polar, ticksAngles, minorTickAngles, radiusExtent, labels) {\n    var rawCategoryData = angleAxisModel.getCategories(true);\n    var commonLabelModel = angleAxisModel.getModel('axisLabel');\n    var labelMargin = commonLabelModel.get('margin');\n    var triggerEvent = angleAxisModel.get('triggerEvent'); // Use length of ticksAngles because it may remove the last tick to avoid overlapping\n\n    zrUtil.each(labels, function (labelItem, idx) {\n      var labelModel = commonLabelModel;\n      var tickValue = labelItem.tickValue;\n      var r = radiusExtent[getRadiusIdx(polar)];\n      var p = polar.coordToPoint([r + labelMargin, labelItem.coord]);\n      var cx = polar.cx;\n      var cy = polar.cy;\n      var labelTextAlign = Math.abs(p[0] - cx) / r < 0.3 ? 'center' : p[0] > cx ? 'left' : 'right';\n      var labelTextVerticalAlign = Math.abs(p[1] - cy) / r < 0.3 ? 'middle' : p[1] > cy ? 'top' : 'bottom';\n\n      if (rawCategoryData && rawCategoryData[tickValue] && rawCategoryData[tickValue].textStyle) {\n        labelModel = new Model(rawCategoryData[tickValue].textStyle, commonLabelModel, commonLabelModel.ecModel);\n      }\n\n      var textEl = new graphic.Text({\n        silent: AxisBuilder.isLabelSilent(angleAxisModel)\n      });\n      this.group.add(textEl);\n      graphic.setTextStyle(textEl.style, labelModel, {\n        x: p[0],\n        y: p[1],\n        textFill: labelModel.getTextColor() || angleAxisModel.get('axisLine.lineStyle.color'),\n        text: labelItem.formattedLabel,\n        textAlign: labelTextAlign,\n        textVerticalAlign: labelTextVerticalAlign\n      }); // Pack data for mouse event\n\n      if (triggerEvent) {\n        textEl.eventData = AxisBuilder.makeAxisEventDataBase(angleAxisModel);\n        textEl.eventData.targetType = 'axisLabel';\n        textEl.eventData.value = labelItem.rawLabel;\n      }\n    }, this);\n  },\n\n  /**\n   * @private\n   */\n  _splitLine: function _splitLine(angleAxisModel, polar, ticksAngles, minorTickAngles, radiusExtent) {\n    var splitLineModel = angleAxisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineColors = lineStyleModel.get('color');\n    var lineCount = 0;\n    lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n    var splitLines = [];\n\n    for (var i = 0; i < ticksAngles.length; i++) {\n      var colorIndex = lineCount++ % lineColors.length;\n      splitLines[colorIndex] = splitLines[colorIndex] || [];\n      splitLines[colorIndex].push(new graphic.Line({\n        shape: getAxisLineShape(polar, radiusExtent, ticksAngles[i].coord)\n      }));\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitLines.length; i++) {\n      this.group.add(graphic.mergePath(splitLines[i], {\n        style: zrUtil.defaults({\n          stroke: lineColors[i % lineColors.length]\n        }, lineStyleModel.getLineStyle()),\n        silent: true,\n        z: angleAxisModel.get('z')\n      }));\n    }\n  },\n\n  /**\n   * @private\n   */\n  _minorSplitLine: function _minorSplitLine(angleAxisModel, polar, ticksAngles, minorTickAngles, radiusExtent) {\n    if (!minorTickAngles.length) {\n      return;\n    }\n\n    var minorSplitLineModel = angleAxisModel.getModel('minorSplitLine');\n    var lineStyleModel = minorSplitLineModel.getModel('lineStyle');\n    var lines = [];\n\n    for (var i = 0; i < minorTickAngles.length; i++) {\n      for (var k = 0; k < minorTickAngles[i].length; k++) {\n        lines.push(new graphic.Line({\n          shape: getAxisLineShape(polar, radiusExtent, minorTickAngles[i][k].coord)\n        }));\n      }\n    }\n\n    this.group.add(graphic.mergePath(lines, {\n      style: lineStyleModel.getLineStyle(),\n      silent: true,\n      z: angleAxisModel.get('z')\n    }));\n  },\n\n  /**\n   * @private\n   */\n  _splitArea: function _splitArea(angleAxisModel, polar, ticksAngles, minorTickAngles, radiusExtent) {\n    if (!ticksAngles.length) {\n      return;\n    }\n\n    var splitAreaModel = angleAxisModel.getModel('splitArea');\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\n    var areaColors = areaStyleModel.get('color');\n    var lineCount = 0;\n    areaColors = areaColors instanceof Array ? areaColors : [areaColors];\n    var splitAreas = [];\n    var RADIAN = Math.PI / 180;\n    var prevAngle = -ticksAngles[0].coord * RADIAN;\n    var r0 = Math.min(radiusExtent[0], radiusExtent[1]);\n    var r1 = Math.max(radiusExtent[0], radiusExtent[1]);\n    var clockwise = angleAxisModel.get('clockwise');\n\n    for (var i = 1; i < ticksAngles.length; i++) {\n      var colorIndex = lineCount++ % areaColors.length;\n      splitAreas[colorIndex] = splitAreas[colorIndex] || [];\n      splitAreas[colorIndex].push(new graphic.Sector({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r0: r0,\n          r: r1,\n          startAngle: prevAngle,\n          endAngle: -ticksAngles[i].coord * RADIAN,\n          clockwise: clockwise\n        },\n        silent: true\n      }));\n      prevAngle = -ticksAngles[i].coord * RADIAN;\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitAreas.length; i++) {\n      this.group.add(graphic.mergePath(splitAreas[i], {\n        style: zrUtil.defaults({\n          fill: areaColors[i % areaColors.length]\n        }, areaStyleModel.getAreaStyle()),\n        silent: true\n      }));\n    }\n  }\n});\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/component/axis/AngleAxisView.js"],"names":["zrUtil","require","graphic","Model","AxisView","AxisBuilder","elementList","getAxisLineShape","polar","rExtent","angle","slice","reverse","start","coordToPoint","end","x1","y1","x2","y2","getRadiusIdx","radiusAxis","getRadiusAxis","inverse","fixAngleOverlap","list","firstItem","lastItem","length","Math","abs","coord","pop","_default","extend","type","axisPointerClass","render","angleAxisModel","ecModel","group","removeAll","get","angleAxis","axis","radiusExtent","getExtent","ticksAngles","getTicksCoords","minorTickAngles","getMinorTicksCoords","labels","map","getViewLabels","labelItem","clone","dataToCoord","tickValue","each","name","scale","isBlank","_axisLine","lineStyleModel","getModel","rId","r0Id","shape","Circle","cx","cy","r","style","getLineStyle","z2","silent","Ring","r0","fill","add","_axisTick","tickModel","tickLen","radius","lines","tickAngleItem","Line","mergePath","defaults","stroke","_minorTick","tickAngles","minorTickModel","i","k","push","_axisLabel","rawCategoryData","getCategories","commonLabelModel","labelMargin","triggerEvent","idx","labelModel","p","labelTextAlign","labelTextVerticalAlign","textStyle","textEl","Text","isLabelSilent","setTextStyle","x","y","textFill","getTextColor","text","formattedLabel","textAlign","textVerticalAlign","eventData","makeAxisEventDataBase","targetType","value","rawLabel","_splitLine","splitLineModel","lineColors","lineCount","Array","splitLines","colorIndex","z","_minorSplitLine","minorSplitLineModel","_splitArea","splitAreaModel","areaStyleModel","areaColors","splitAreas","RADIAN","PI","prevAngle","min","r1","max","clockwise","Sector","startAngle","endAngle","getAreaStyle","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar Model = require(\"../../model/Model\");\n\nvar AxisView = require(\"./AxisView\");\n\nvar AxisBuilder = require(\"./AxisBuilder\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar elementList = ['axisLine', 'axisLabel', 'axisTick', 'minorTick', 'splitLine', 'minorSplitLine', 'splitArea'];\n\nfunction getAxisLineShape(polar, rExtent, angle) {\n  rExtent[1] > rExtent[0] && (rExtent = rExtent.slice().reverse());\n  var start = polar.coordToPoint([rExtent[0], angle]);\n  var end = polar.coordToPoint([rExtent[1], angle]);\n  return {\n    x1: start[0],\n    y1: start[1],\n    x2: end[0],\n    y2: end[1]\n  };\n}\n\nfunction getRadiusIdx(polar) {\n  var radiusAxis = polar.getRadiusAxis();\n  return radiusAxis.inverse ? 0 : 1;\n} // Remove the last tick which will overlap the first tick\n\n\nfunction fixAngleOverlap(list) {\n  var firstItem = list[0];\n  var lastItem = list[list.length - 1];\n\n  if (firstItem && lastItem && Math.abs(Math.abs(firstItem.coord - lastItem.coord) - 360) < 1e-4) {\n    list.pop();\n  }\n}\n\nvar _default = AxisView.extend({\n  type: 'angleAxis',\n  axisPointerClass: 'PolarAxisPointer',\n  render: function (angleAxisModel, ecModel) {\n    this.group.removeAll();\n\n    if (!angleAxisModel.get('show')) {\n      return;\n    }\n\n    var angleAxis = angleAxisModel.axis;\n    var polar = angleAxis.polar;\n    var radiusExtent = polar.getRadiusAxis().getExtent();\n    var ticksAngles = angleAxis.getTicksCoords();\n    var minorTickAngles = angleAxis.getMinorTicksCoords();\n    var labels = zrUtil.map(angleAxis.getViewLabels(), function (labelItem) {\n      var labelItem = zrUtil.clone(labelItem);\n      labelItem.coord = angleAxis.dataToCoord(labelItem.tickValue);\n      return labelItem;\n    });\n    fixAngleOverlap(labels);\n    fixAngleOverlap(ticksAngles);\n    zrUtil.each(elementList, function (name) {\n      if (angleAxisModel.get(name + '.show') && (!angleAxis.scale.isBlank() || name === 'axisLine')) {\n        this['_' + name](angleAxisModel, polar, ticksAngles, minorTickAngles, radiusExtent, labels);\n      }\n    }, this);\n  },\n\n  /**\n   * @private\n   */\n  _axisLine: function (angleAxisModel, polar, ticksAngles, minorTickAngles, radiusExtent) {\n    var lineStyleModel = angleAxisModel.getModel('axisLine.lineStyle'); // extent id of the axis radius (r0 and r)\n\n    var rId = getRadiusIdx(polar);\n    var r0Id = rId ? 0 : 1;\n    var shape;\n\n    if (radiusExtent[r0Id] === 0) {\n      shape = new graphic.Circle({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r: radiusExtent[rId]\n        },\n        style: lineStyleModel.getLineStyle(),\n        z2: 1,\n        silent: true\n      });\n    } else {\n      shape = new graphic.Ring({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r: radiusExtent[rId],\n          r0: radiusExtent[r0Id]\n        },\n        style: lineStyleModel.getLineStyle(),\n        z2: 1,\n        silent: true\n      });\n    }\n\n    shape.style.fill = null;\n    this.group.add(shape);\n  },\n\n  /**\n   * @private\n   */\n  _axisTick: function (angleAxisModel, polar, ticksAngles, minorTickAngles, radiusExtent) {\n    var tickModel = angleAxisModel.getModel('axisTick');\n    var tickLen = (tickModel.get('inside') ? -1 : 1) * tickModel.get('length');\n    var radius = radiusExtent[getRadiusIdx(polar)];\n    var lines = zrUtil.map(ticksAngles, function (tickAngleItem) {\n      return new graphic.Line({\n        shape: getAxisLineShape(polar, [radius, radius + tickLen], tickAngleItem.coord)\n      });\n    });\n    this.group.add(graphic.mergePath(lines, {\n      style: zrUtil.defaults(tickModel.getModel('lineStyle').getLineStyle(), {\n        stroke: angleAxisModel.get('axisLine.lineStyle.color')\n      })\n    }));\n  },\n\n  /**\n   * @private\n   */\n  _minorTick: function (angleAxisModel, polar, tickAngles, minorTickAngles, radiusExtent) {\n    if (!minorTickAngles.length) {\n      return;\n    }\n\n    var tickModel = angleAxisModel.getModel('axisTick');\n    var minorTickModel = angleAxisModel.getModel('minorTick');\n    var tickLen = (tickModel.get('inside') ? -1 : 1) * minorTickModel.get('length');\n    var radius = radiusExtent[getRadiusIdx(polar)];\n    var lines = [];\n\n    for (var i = 0; i < minorTickAngles.length; i++) {\n      for (var k = 0; k < minorTickAngles[i].length; k++) {\n        lines.push(new graphic.Line({\n          shape: getAxisLineShape(polar, [radius, radius + tickLen], minorTickAngles[i][k].coord)\n        }));\n      }\n    }\n\n    this.group.add(graphic.mergePath(lines, {\n      style: zrUtil.defaults(minorTickModel.getModel('lineStyle').getLineStyle(), zrUtil.defaults(tickModel.getLineStyle(), {\n        stroke: angleAxisModel.get('axisLine.lineStyle.color')\n      }))\n    }));\n  },\n\n  /**\n   * @private\n   */\n  _axisLabel: function (angleAxisModel, polar, ticksAngles, minorTickAngles, radiusExtent, labels) {\n    var rawCategoryData = angleAxisModel.getCategories(true);\n    var commonLabelModel = angleAxisModel.getModel('axisLabel');\n    var labelMargin = commonLabelModel.get('margin');\n    var triggerEvent = angleAxisModel.get('triggerEvent'); // Use length of ticksAngles because it may remove the last tick to avoid overlapping\n\n    zrUtil.each(labels, function (labelItem, idx) {\n      var labelModel = commonLabelModel;\n      var tickValue = labelItem.tickValue;\n      var r = radiusExtent[getRadiusIdx(polar)];\n      var p = polar.coordToPoint([r + labelMargin, labelItem.coord]);\n      var cx = polar.cx;\n      var cy = polar.cy;\n      var labelTextAlign = Math.abs(p[0] - cx) / r < 0.3 ? 'center' : p[0] > cx ? 'left' : 'right';\n      var labelTextVerticalAlign = Math.abs(p[1] - cy) / r < 0.3 ? 'middle' : p[1] > cy ? 'top' : 'bottom';\n\n      if (rawCategoryData && rawCategoryData[tickValue] && rawCategoryData[tickValue].textStyle) {\n        labelModel = new Model(rawCategoryData[tickValue].textStyle, commonLabelModel, commonLabelModel.ecModel);\n      }\n\n      var textEl = new graphic.Text({\n        silent: AxisBuilder.isLabelSilent(angleAxisModel)\n      });\n      this.group.add(textEl);\n      graphic.setTextStyle(textEl.style, labelModel, {\n        x: p[0],\n        y: p[1],\n        textFill: labelModel.getTextColor() || angleAxisModel.get('axisLine.lineStyle.color'),\n        text: labelItem.formattedLabel,\n        textAlign: labelTextAlign,\n        textVerticalAlign: labelTextVerticalAlign\n      }); // Pack data for mouse event\n\n      if (triggerEvent) {\n        textEl.eventData = AxisBuilder.makeAxisEventDataBase(angleAxisModel);\n        textEl.eventData.targetType = 'axisLabel';\n        textEl.eventData.value = labelItem.rawLabel;\n      }\n    }, this);\n  },\n\n  /**\n   * @private\n   */\n  _splitLine: function (angleAxisModel, polar, ticksAngles, minorTickAngles, radiusExtent) {\n    var splitLineModel = angleAxisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineColors = lineStyleModel.get('color');\n    var lineCount = 0;\n    lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n    var splitLines = [];\n\n    for (var i = 0; i < ticksAngles.length; i++) {\n      var colorIndex = lineCount++ % lineColors.length;\n      splitLines[colorIndex] = splitLines[colorIndex] || [];\n      splitLines[colorIndex].push(new graphic.Line({\n        shape: getAxisLineShape(polar, radiusExtent, ticksAngles[i].coord)\n      }));\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitLines.length; i++) {\n      this.group.add(graphic.mergePath(splitLines[i], {\n        style: zrUtil.defaults({\n          stroke: lineColors[i % lineColors.length]\n        }, lineStyleModel.getLineStyle()),\n        silent: true,\n        z: angleAxisModel.get('z')\n      }));\n    }\n  },\n\n  /**\n   * @private\n   */\n  _minorSplitLine: function (angleAxisModel, polar, ticksAngles, minorTickAngles, radiusExtent) {\n    if (!minorTickAngles.length) {\n      return;\n    }\n\n    var minorSplitLineModel = angleAxisModel.getModel('minorSplitLine');\n    var lineStyleModel = minorSplitLineModel.getModel('lineStyle');\n    var lines = [];\n\n    for (var i = 0; i < minorTickAngles.length; i++) {\n      for (var k = 0; k < minorTickAngles[i].length; k++) {\n        lines.push(new graphic.Line({\n          shape: getAxisLineShape(polar, radiusExtent, minorTickAngles[i][k].coord)\n        }));\n      }\n    }\n\n    this.group.add(graphic.mergePath(lines, {\n      style: lineStyleModel.getLineStyle(),\n      silent: true,\n      z: angleAxisModel.get('z')\n    }));\n  },\n\n  /**\n   * @private\n   */\n  _splitArea: function (angleAxisModel, polar, ticksAngles, minorTickAngles, radiusExtent) {\n    if (!ticksAngles.length) {\n      return;\n    }\n\n    var splitAreaModel = angleAxisModel.getModel('splitArea');\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\n    var areaColors = areaStyleModel.get('color');\n    var lineCount = 0;\n    areaColors = areaColors instanceof Array ? areaColors : [areaColors];\n    var splitAreas = [];\n    var RADIAN = Math.PI / 180;\n    var prevAngle = -ticksAngles[0].coord * RADIAN;\n    var r0 = Math.min(radiusExtent[0], radiusExtent[1]);\n    var r1 = Math.max(radiusExtent[0], radiusExtent[1]);\n    var clockwise = angleAxisModel.get('clockwise');\n\n    for (var i = 1; i < ticksAngles.length; i++) {\n      var colorIndex = lineCount++ % areaColors.length;\n      splitAreas[colorIndex] = splitAreas[colorIndex] || [];\n      splitAreas[colorIndex].push(new graphic.Sector({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r0: r0,\n          r: r1,\n          startAngle: prevAngle,\n          endAngle: -ticksAngles[i].coord * RADIAN,\n          clockwise: clockwise\n        },\n        silent: true\n      }));\n      prevAngle = -ticksAngles[i].coord * RADIAN;\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitAreas.length; i++) {\n      this.group.add(graphic.mergePath(splitAreas[i], {\n        style: zrUtil.defaults({\n          fill: areaColors[i % areaColors.length]\n        }, areaStyleModel.getAreaStyle()),\n        silent: true\n      }));\n    }\n  }\n});\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}