{"ast":null,"code":"var util = require(\"./core/util\");\n\nvar env = require(\"./core/env\");\n\nvar Group = require(\"./container/Group\");\n\nvar timsort = require(\"./core/timsort\"); // Use timsort because in most case elements are partially sorted\n// https://jsfiddle.net/pissang/jr4x7mdm/8/\n\n\nfunction shapeCompareFunc(a, b) {\n  if (a.zlevel === b.zlevel) {\n    if (a.z === b.z) {\n      // if (a.z2 === b.z2) {\n      //     // FIXME Slow has renderidx compare\n      //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement\n      //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012\n      //     return a.__renderidx - b.__renderidx;\n      // }\n      return a.z2 - b.z2;\n    }\n\n    return a.z - b.z;\n  }\n\n  return a.zlevel - b.zlevel;\n}\n/**\n * 内容仓库 (M)\n * @alias module:zrender/Storage\n * @constructor\n */\n\n\nvar Storage = function Storage() {\n  // jshint ignore:line\n  this._roots = [];\n  this._displayList = [];\n  this._displayListLen = 0;\n};\n\nStorage.prototype = {\n  constructor: Storage,\n\n  /**\n   * @param  {Function} cb\n   *\n   */\n  traverse: function traverse(cb, context) {\n    for (var i = 0; i < this._roots.length; i++) {\n      this._roots[i].traverse(cb, context);\n    }\n  },\n\n  /**\n   * 返回所有图形的绘制队列\n   * @param {boolean} [update=false] 是否在返回前更新该数组\n   * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效\n   *\n   * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}\n   * @return {Array.<module:zrender/graphic/Displayable>}\n   */\n  getDisplayList: function getDisplayList(update, includeIgnore) {\n    includeIgnore = includeIgnore || false;\n\n    if (update) {\n      this.updateDisplayList(includeIgnore);\n    }\n\n    return this._displayList;\n  },\n\n  /**\n   * 更新图形的绘制队列。\n   * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，\n   * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列\n   * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组\n   */\n  updateDisplayList: function updateDisplayList(includeIgnore) {\n    this._displayListLen = 0;\n    var roots = this._roots;\n    var displayList = this._displayList;\n\n    for (var i = 0, len = roots.length; i < len; i++) {\n      this._updateAndAddDisplayable(roots[i], null, includeIgnore);\n    }\n\n    displayList.length = this._displayListLen;\n    env.canvasSupported && timsort(displayList, shapeCompareFunc);\n  },\n  _updateAndAddDisplayable: function _updateAndAddDisplayable(el, clipPaths, includeIgnore) {\n    if (el.ignore && !includeIgnore) {\n      return;\n    }\n\n    el.beforeUpdate();\n\n    if (el.__dirty) {\n      el.update();\n    }\n\n    el.afterUpdate();\n    var userSetClipPath = el.clipPath;\n\n    if (userSetClipPath) {\n      // FIXME 效率影响\n      if (clipPaths) {\n        clipPaths = clipPaths.slice();\n      } else {\n        clipPaths = [];\n      }\n\n      var currentClipPath = userSetClipPath;\n      var parentClipPath = el; // Recursively add clip path\n\n      while (currentClipPath) {\n        // clipPath 的变换是基于使用这个 clipPath 的元素\n        currentClipPath.parent = parentClipPath;\n        currentClipPath.updateTransform();\n        clipPaths.push(currentClipPath);\n        parentClipPath = currentClipPath;\n        currentClipPath = currentClipPath.clipPath;\n      }\n    }\n\n    if (el.isGroup) {\n      var children = el._children;\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i]; // Force to mark as dirty if group is dirty\n        // FIXME __dirtyPath ?\n\n        if (el.__dirty) {\n          child.__dirty = true;\n        }\n\n        this._updateAndAddDisplayable(child, clipPaths, includeIgnore);\n      } // Mark group clean here\n\n\n      el.__dirty = false;\n    } else {\n      el.__clipPaths = clipPaths;\n      this._displayList[this._displayListLen++] = el;\n    }\n  },\n\n  /**\n   * 添加图形(Shape)或者组(Group)到根节点\n   * @param {module:zrender/Element} el\n   */\n  addRoot: function addRoot(el) {\n    if (el.__storage === this) {\n      return;\n    }\n\n    if (el instanceof Group) {\n      el.addChildrenToStorage(this);\n    }\n\n    this.addToStorage(el);\n\n    this._roots.push(el);\n  },\n\n  /**\n   * 删除指定的图形(Shape)或者组(Group)\n   * @param {string|Array.<string>} [el] 如果为空清空整个Storage\n   */\n  delRoot: function delRoot(el) {\n    if (el == null) {\n      // 不指定el清空\n      for (var i = 0; i < this._roots.length; i++) {\n        var root = this._roots[i];\n\n        if (root instanceof Group) {\n          root.delChildrenFromStorage(this);\n        }\n      }\n\n      this._roots = [];\n      this._displayList = [];\n      this._displayListLen = 0;\n      return;\n    }\n\n    if (el instanceof Array) {\n      for (var i = 0, l = el.length; i < l; i++) {\n        this.delRoot(el[i]);\n      }\n\n      return;\n    }\n\n    var idx = util.indexOf(this._roots, el);\n\n    if (idx >= 0) {\n      this.delFromStorage(el);\n\n      this._roots.splice(idx, 1);\n\n      if (el instanceof Group) {\n        el.delChildrenFromStorage(this);\n      }\n    }\n  },\n  addToStorage: function addToStorage(el) {\n    if (el) {\n      el.__storage = this;\n      el.dirty(false);\n    }\n\n    return this;\n  },\n  delFromStorage: function delFromStorage(el) {\n    if (el) {\n      el.__storage = null;\n    }\n\n    return this;\n  },\n\n  /**\n   * 清空并且释放Storage\n   */\n  dispose: function dispose() {\n    this._renderList = this._roots = null;\n  },\n  displayableSortFunc: shapeCompareFunc\n};\nvar _default = Storage;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/zrender/lib/Storage.js"],"names":["util","require","env","Group","timsort","shapeCompareFunc","a","b","zlevel","z","z2","Storage","_roots","_displayList","_displayListLen","prototype","constructor","traverse","cb","context","i","length","getDisplayList","update","includeIgnore","updateDisplayList","roots","displayList","len","_updateAndAddDisplayable","canvasSupported","el","clipPaths","ignore","beforeUpdate","__dirty","afterUpdate","userSetClipPath","clipPath","slice","currentClipPath","parentClipPath","parent","updateTransform","push","isGroup","children","_children","child","__clipPaths","addRoot","__storage","addChildrenToStorage","addToStorage","delRoot","root","delChildrenFromStorage","Array","l","idx","indexOf","delFromStorage","splice","dirty","dispose","_renderList","displayableSortFunc","_default","module","exports"],"mappings":"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","sourcesContent":["var util = require(\"./core/util\");\n\nvar env = require(\"./core/env\");\n\nvar Group = require(\"./container/Group\");\n\nvar timsort = require(\"./core/timsort\");\n\n// Use timsort because in most case elements are partially sorted\n// https://jsfiddle.net/pissang/jr4x7mdm/8/\nfunction shapeCompareFunc(a, b) {\n  if (a.zlevel === b.zlevel) {\n    if (a.z === b.z) {\n      // if (a.z2 === b.z2) {\n      //     // FIXME Slow has renderidx compare\n      //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement\n      //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012\n      //     return a.__renderidx - b.__renderidx;\n      // }\n      return a.z2 - b.z2;\n    }\n\n    return a.z - b.z;\n  }\n\n  return a.zlevel - b.zlevel;\n}\n/**\n * 内容仓库 (M)\n * @alias module:zrender/Storage\n * @constructor\n */\n\n\nvar Storage = function () {\n  // jshint ignore:line\n  this._roots = [];\n  this._displayList = [];\n  this._displayListLen = 0;\n};\n\nStorage.prototype = {\n  constructor: Storage,\n\n  /**\n   * @param  {Function} cb\n   *\n   */\n  traverse: function (cb, context) {\n    for (var i = 0; i < this._roots.length; i++) {\n      this._roots[i].traverse(cb, context);\n    }\n  },\n\n  /**\n   * 返回所有图形的绘制队列\n   * @param {boolean} [update=false] 是否在返回前更新该数组\n   * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效\n   *\n   * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}\n   * @return {Array.<module:zrender/graphic/Displayable>}\n   */\n  getDisplayList: function (update, includeIgnore) {\n    includeIgnore = includeIgnore || false;\n\n    if (update) {\n      this.updateDisplayList(includeIgnore);\n    }\n\n    return this._displayList;\n  },\n\n  /**\n   * 更新图形的绘制队列。\n   * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，\n   * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列\n   * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组\n   */\n  updateDisplayList: function (includeIgnore) {\n    this._displayListLen = 0;\n    var roots = this._roots;\n    var displayList = this._displayList;\n\n    for (var i = 0, len = roots.length; i < len; i++) {\n      this._updateAndAddDisplayable(roots[i], null, includeIgnore);\n    }\n\n    displayList.length = this._displayListLen;\n    env.canvasSupported && timsort(displayList, shapeCompareFunc);\n  },\n  _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {\n    if (el.ignore && !includeIgnore) {\n      return;\n    }\n\n    el.beforeUpdate();\n\n    if (el.__dirty) {\n      el.update();\n    }\n\n    el.afterUpdate();\n    var userSetClipPath = el.clipPath;\n\n    if (userSetClipPath) {\n      // FIXME 效率影响\n      if (clipPaths) {\n        clipPaths = clipPaths.slice();\n      } else {\n        clipPaths = [];\n      }\n\n      var currentClipPath = userSetClipPath;\n      var parentClipPath = el; // Recursively add clip path\n\n      while (currentClipPath) {\n        // clipPath 的变换是基于使用这个 clipPath 的元素\n        currentClipPath.parent = parentClipPath;\n        currentClipPath.updateTransform();\n        clipPaths.push(currentClipPath);\n        parentClipPath = currentClipPath;\n        currentClipPath = currentClipPath.clipPath;\n      }\n    }\n\n    if (el.isGroup) {\n      var children = el._children;\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i]; // Force to mark as dirty if group is dirty\n        // FIXME __dirtyPath ?\n\n        if (el.__dirty) {\n          child.__dirty = true;\n        }\n\n        this._updateAndAddDisplayable(child, clipPaths, includeIgnore);\n      } // Mark group clean here\n\n\n      el.__dirty = false;\n    } else {\n      el.__clipPaths = clipPaths;\n      this._displayList[this._displayListLen++] = el;\n    }\n  },\n\n  /**\n   * 添加图形(Shape)或者组(Group)到根节点\n   * @param {module:zrender/Element} el\n   */\n  addRoot: function (el) {\n    if (el.__storage === this) {\n      return;\n    }\n\n    if (el instanceof Group) {\n      el.addChildrenToStorage(this);\n    }\n\n    this.addToStorage(el);\n\n    this._roots.push(el);\n  },\n\n  /**\n   * 删除指定的图形(Shape)或者组(Group)\n   * @param {string|Array.<string>} [el] 如果为空清空整个Storage\n   */\n  delRoot: function (el) {\n    if (el == null) {\n      // 不指定el清空\n      for (var i = 0; i < this._roots.length; i++) {\n        var root = this._roots[i];\n\n        if (root instanceof Group) {\n          root.delChildrenFromStorage(this);\n        }\n      }\n\n      this._roots = [];\n      this._displayList = [];\n      this._displayListLen = 0;\n      return;\n    }\n\n    if (el instanceof Array) {\n      for (var i = 0, l = el.length; i < l; i++) {\n        this.delRoot(el[i]);\n      }\n\n      return;\n    }\n\n    var idx = util.indexOf(this._roots, el);\n\n    if (idx >= 0) {\n      this.delFromStorage(el);\n\n      this._roots.splice(idx, 1);\n\n      if (el instanceof Group) {\n        el.delChildrenFromStorage(this);\n      }\n    }\n  },\n  addToStorage: function (el) {\n    if (el) {\n      el.__storage = this;\n      el.dirty(false);\n    }\n\n    return this;\n  },\n  delFromStorage: function (el) {\n    if (el) {\n      el.__storage = null;\n    }\n\n    return this;\n  },\n\n  /**\n   * 清空并且释放Storage\n   */\n  dispose: function () {\n    this._renderList = this._roots = null;\n  },\n  displayableSortFunc: shapeCompareFunc\n};\nvar _default = Storage;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}