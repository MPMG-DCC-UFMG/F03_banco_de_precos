{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar echarts = require(\"../../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar AxisBuilder = require(\"../axis/AxisBuilder\");\n\nvar graphic = require(\"../../util/graphic\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\n\nvar _default = echarts.extendComponentView({\n  type: 'radar',\n  render: function render(radarModel, ecModel, api) {\n    var group = this.group;\n    group.removeAll();\n\n    this._buildAxes(radarModel);\n\n    this._buildSplitLineAndArea(radarModel);\n  },\n  _buildAxes: function _buildAxes(radarModel) {\n    var radar = radarModel.coordinateSystem;\n    var indicatorAxes = radar.getIndicatorAxes();\n    var axisBuilders = zrUtil.map(indicatorAxes, function (indicatorAxis) {\n      var axisBuilder = new AxisBuilder(indicatorAxis.model, {\n        position: [radar.cx, radar.cy],\n        rotation: indicatorAxis.angle,\n        labelDirection: -1,\n        tickDirection: -1,\n        nameDirection: 1\n      });\n      return axisBuilder;\n    });\n    zrUtil.each(axisBuilders, function (axisBuilder) {\n      zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n      this.group.add(axisBuilder.getGroup());\n    }, this);\n  },\n  _buildSplitLineAndArea: function _buildSplitLineAndArea(radarModel) {\n    var radar = radarModel.coordinateSystem;\n    var indicatorAxes = radar.getIndicatorAxes();\n\n    if (!indicatorAxes.length) {\n      return;\n    }\n\n    var shape = radarModel.get('shape');\n    var splitLineModel = radarModel.getModel('splitLine');\n    var splitAreaModel = radarModel.getModel('splitArea');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\n    var showSplitLine = splitLineModel.get('show');\n    var showSplitArea = splitAreaModel.get('show');\n    var splitLineColors = lineStyleModel.get('color');\n    var splitAreaColors = areaStyleModel.get('color');\n    splitLineColors = zrUtil.isArray(splitLineColors) ? splitLineColors : [splitLineColors];\n    splitAreaColors = zrUtil.isArray(splitAreaColors) ? splitAreaColors : [splitAreaColors];\n    var splitLines = [];\n    var splitAreas = [];\n\n    function getColorIndex(areaOrLine, areaOrLineColorList, idx) {\n      var colorIndex = idx % areaOrLineColorList.length;\n      areaOrLine[colorIndex] = areaOrLine[colorIndex] || [];\n      return colorIndex;\n    }\n\n    if (shape === 'circle') {\n      var ticksRadius = indicatorAxes[0].getTicksCoords();\n      var cx = radar.cx;\n      var cy = radar.cy;\n\n      for (var i = 0; i < ticksRadius.length; i++) {\n        if (showSplitLine) {\n          var colorIndex = getColorIndex(splitLines, splitLineColors, i);\n          splitLines[colorIndex].push(new graphic.Circle({\n            shape: {\n              cx: cx,\n              cy: cy,\n              r: ticksRadius[i].coord\n            }\n          }));\n        }\n\n        if (showSplitArea && i < ticksRadius.length - 1) {\n          var colorIndex = getColorIndex(splitAreas, splitAreaColors, i);\n          splitAreas[colorIndex].push(new graphic.Ring({\n            shape: {\n              cx: cx,\n              cy: cy,\n              r0: ticksRadius[i].coord,\n              r: ticksRadius[i + 1].coord\n            }\n          }));\n        }\n      }\n    } // Polyyon\n    else {\n        var realSplitNumber;\n        var axesTicksPoints = zrUtil.map(indicatorAxes, function (indicatorAxis, idx) {\n          var ticksCoords = indicatorAxis.getTicksCoords();\n          realSplitNumber = realSplitNumber == null ? ticksCoords.length - 1 : Math.min(ticksCoords.length - 1, realSplitNumber);\n          return zrUtil.map(ticksCoords, function (tickCoord) {\n            return radar.coordToPoint(tickCoord.coord, idx);\n          });\n        });\n        var prevPoints = [];\n\n        for (var i = 0; i <= realSplitNumber; i++) {\n          var points = [];\n\n          for (var j = 0; j < indicatorAxes.length; j++) {\n            points.push(axesTicksPoints[j][i]);\n          } // Close\n\n\n          if (points[0]) {\n            points.push(points[0].slice());\n          } else {}\n\n          if (showSplitLine) {\n            var colorIndex = getColorIndex(splitLines, splitLineColors, i);\n            splitLines[colorIndex].push(new graphic.Polyline({\n              shape: {\n                points: points\n              }\n            }));\n          }\n\n          if (showSplitArea && prevPoints) {\n            var colorIndex = getColorIndex(splitAreas, splitAreaColors, i - 1);\n            splitAreas[colorIndex].push(new graphic.Polygon({\n              shape: {\n                points: points.concat(prevPoints)\n              }\n            }));\n          }\n\n          prevPoints = points.slice().reverse();\n        }\n      }\n\n    var lineStyle = lineStyleModel.getLineStyle();\n    var areaStyle = areaStyleModel.getAreaStyle(); // Add splitArea before splitLine\n\n    zrUtil.each(splitAreas, function (splitAreas, idx) {\n      this.group.add(graphic.mergePath(splitAreas, {\n        style: zrUtil.defaults({\n          stroke: 'none',\n          fill: splitAreaColors[idx % splitAreaColors.length]\n        }, areaStyle),\n        silent: true\n      }));\n    }, this);\n    zrUtil.each(splitLines, function (splitLines, idx) {\n      this.group.add(graphic.mergePath(splitLines, {\n        style: zrUtil.defaults({\n          fill: 'none',\n          stroke: splitLineColors[idx % splitLineColors.length]\n        }, lineStyle),\n        silent: true\n      }));\n    }, this);\n  }\n});\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/component/radar/RadarView.js"],"names":["_config","require","__DEV__","echarts","zrUtil","AxisBuilder","graphic","axisBuilderAttrs","_default","extendComponentView","type","render","radarModel","ecModel","api","group","removeAll","_buildAxes","_buildSplitLineAndArea","radar","coordinateSystem","indicatorAxes","getIndicatorAxes","axisBuilders","map","indicatorAxis","axisBuilder","model","position","cx","cy","rotation","angle","labelDirection","tickDirection","nameDirection","each","add","getGroup","length","shape","get","splitLineModel","getModel","splitAreaModel","lineStyleModel","areaStyleModel","showSplitLine","showSplitArea","splitLineColors","splitAreaColors","isArray","splitLines","splitAreas","getColorIndex","areaOrLine","areaOrLineColorList","idx","colorIndex","ticksRadius","getTicksCoords","i","push","Circle","r","coord","Ring","r0","realSplitNumber","axesTicksPoints","ticksCoords","Math","min","tickCoord","coordToPoint","prevPoints","points","j","slice","Polyline","Polygon","concat","reverse","lineStyle","getLineStyle","areaStyle","getAreaStyle","mergePath","style","defaults","stroke","fill","silent","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar echarts = require(\"../../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar AxisBuilder = require(\"../axis/AxisBuilder\");\n\nvar graphic = require(\"../../util/graphic\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\n\nvar _default = echarts.extendComponentView({\n  type: 'radar',\n  render: function (radarModel, ecModel, api) {\n    var group = this.group;\n    group.removeAll();\n\n    this._buildAxes(radarModel);\n\n    this._buildSplitLineAndArea(radarModel);\n  },\n  _buildAxes: function (radarModel) {\n    var radar = radarModel.coordinateSystem;\n    var indicatorAxes = radar.getIndicatorAxes();\n    var axisBuilders = zrUtil.map(indicatorAxes, function (indicatorAxis) {\n      var axisBuilder = new AxisBuilder(indicatorAxis.model, {\n        position: [radar.cx, radar.cy],\n        rotation: indicatorAxis.angle,\n        labelDirection: -1,\n        tickDirection: -1,\n        nameDirection: 1\n      });\n      return axisBuilder;\n    });\n    zrUtil.each(axisBuilders, function (axisBuilder) {\n      zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n      this.group.add(axisBuilder.getGroup());\n    }, this);\n  },\n  _buildSplitLineAndArea: function (radarModel) {\n    var radar = radarModel.coordinateSystem;\n    var indicatorAxes = radar.getIndicatorAxes();\n\n    if (!indicatorAxes.length) {\n      return;\n    }\n\n    var shape = radarModel.get('shape');\n    var splitLineModel = radarModel.getModel('splitLine');\n    var splitAreaModel = radarModel.getModel('splitArea');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\n    var showSplitLine = splitLineModel.get('show');\n    var showSplitArea = splitAreaModel.get('show');\n    var splitLineColors = lineStyleModel.get('color');\n    var splitAreaColors = areaStyleModel.get('color');\n    splitLineColors = zrUtil.isArray(splitLineColors) ? splitLineColors : [splitLineColors];\n    splitAreaColors = zrUtil.isArray(splitAreaColors) ? splitAreaColors : [splitAreaColors];\n    var splitLines = [];\n    var splitAreas = [];\n\n    function getColorIndex(areaOrLine, areaOrLineColorList, idx) {\n      var colorIndex = idx % areaOrLineColorList.length;\n      areaOrLine[colorIndex] = areaOrLine[colorIndex] || [];\n      return colorIndex;\n    }\n\n    if (shape === 'circle') {\n      var ticksRadius = indicatorAxes[0].getTicksCoords();\n      var cx = radar.cx;\n      var cy = radar.cy;\n\n      for (var i = 0; i < ticksRadius.length; i++) {\n        if (showSplitLine) {\n          var colorIndex = getColorIndex(splitLines, splitLineColors, i);\n          splitLines[colorIndex].push(new graphic.Circle({\n            shape: {\n              cx: cx,\n              cy: cy,\n              r: ticksRadius[i].coord\n            }\n          }));\n        }\n\n        if (showSplitArea && i < ticksRadius.length - 1) {\n          var colorIndex = getColorIndex(splitAreas, splitAreaColors, i);\n          splitAreas[colorIndex].push(new graphic.Ring({\n            shape: {\n              cx: cx,\n              cy: cy,\n              r0: ticksRadius[i].coord,\n              r: ticksRadius[i + 1].coord\n            }\n          }));\n        }\n      }\n    } // Polyyon\n    else {\n        var realSplitNumber;\n        var axesTicksPoints = zrUtil.map(indicatorAxes, function (indicatorAxis, idx) {\n          var ticksCoords = indicatorAxis.getTicksCoords();\n          realSplitNumber = realSplitNumber == null ? ticksCoords.length - 1 : Math.min(ticksCoords.length - 1, realSplitNumber);\n          return zrUtil.map(ticksCoords, function (tickCoord) {\n            return radar.coordToPoint(tickCoord.coord, idx);\n          });\n        });\n        var prevPoints = [];\n\n        for (var i = 0; i <= realSplitNumber; i++) {\n          var points = [];\n\n          for (var j = 0; j < indicatorAxes.length; j++) {\n            points.push(axesTicksPoints[j][i]);\n          } // Close\n\n\n          if (points[0]) {\n            points.push(points[0].slice());\n          } else {}\n\n          if (showSplitLine) {\n            var colorIndex = getColorIndex(splitLines, splitLineColors, i);\n            splitLines[colorIndex].push(new graphic.Polyline({\n              shape: {\n                points: points\n              }\n            }));\n          }\n\n          if (showSplitArea && prevPoints) {\n            var colorIndex = getColorIndex(splitAreas, splitAreaColors, i - 1);\n            splitAreas[colorIndex].push(new graphic.Polygon({\n              shape: {\n                points: points.concat(prevPoints)\n              }\n            }));\n          }\n\n          prevPoints = points.slice().reverse();\n        }\n      }\n\n    var lineStyle = lineStyleModel.getLineStyle();\n    var areaStyle = areaStyleModel.getAreaStyle(); // Add splitArea before splitLine\n\n    zrUtil.each(splitAreas, function (splitAreas, idx) {\n      this.group.add(graphic.mergePath(splitAreas, {\n        style: zrUtil.defaults({\n          stroke: 'none',\n          fill: splitAreaColors[idx % splitAreaColors.length]\n        }, areaStyle),\n        silent: true\n      }));\n    }, this);\n    zrUtil.each(splitLines, function (splitLines, idx) {\n      this.group.add(graphic.mergePath(splitLines, {\n        style: zrUtil.defaults({\n          fill: 'none',\n          stroke: splitLineColors[idx % splitLineColors.length]\n        }, lineStyle),\n        silent: true\n      }));\n    }, this);\n  }\n});\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}