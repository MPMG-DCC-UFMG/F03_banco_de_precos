{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar textContain = require(\"zrender/lib/contain/text\");\n\nvar formatUtil = require(\"../../util/format\");\n\nvar matrix = require(\"zrender/lib/core/matrix\");\n\nvar axisHelper = require(\"../../coord/axisHelper\");\n\nvar AxisBuilder = require(\"../axis/AxisBuilder\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * @param {module:echarts/model/Model} axisPointerModel\n */\n\n\nfunction buildElStyle(axisPointerModel) {\n  var axisPointerType = axisPointerModel.get('type');\n  var styleModel = axisPointerModel.getModel(axisPointerType + 'Style');\n  var style;\n\n  if (axisPointerType === 'line') {\n    style = styleModel.getLineStyle();\n    style.fill = null;\n  } else if (axisPointerType === 'shadow') {\n    style = styleModel.getAreaStyle();\n    style.stroke = null;\n  }\n\n  return style;\n}\n/**\n * @param {Function} labelPos {align, verticalAlign, position}\n */\n\n\nfunction buildLabelElOption(elOption, axisModel, axisPointerModel, api, labelPos) {\n  var value = axisPointerModel.get('value');\n  var text = getValueLabel(value, axisModel.axis, axisModel.ecModel, axisPointerModel.get('seriesDataIndices'), {\n    precision: axisPointerModel.get('label.precision'),\n    formatter: axisPointerModel.get('label.formatter')\n  });\n  var labelModel = axisPointerModel.getModel('label');\n  var paddings = formatUtil.normalizeCssArray(labelModel.get('padding') || 0);\n  var font = labelModel.getFont();\n  var textRect = textContain.getBoundingRect(text, font);\n  var position = labelPos.position;\n  var width = textRect.width + paddings[1] + paddings[3];\n  var height = textRect.height + paddings[0] + paddings[2]; // Adjust by align.\n\n  var align = labelPos.align;\n  align === 'right' && (position[0] -= width);\n  align === 'center' && (position[0] -= width / 2);\n  var verticalAlign = labelPos.verticalAlign;\n  verticalAlign === 'bottom' && (position[1] -= height);\n  verticalAlign === 'middle' && (position[1] -= height / 2); // Not overflow ec container\n\n  confineInContainer(position, width, height, api);\n  var bgColor = labelModel.get('backgroundColor');\n\n  if (!bgColor || bgColor === 'auto') {\n    bgColor = axisModel.get('axisLine.lineStyle.color');\n  }\n\n  elOption.label = {\n    shape: {\n      x: 0,\n      y: 0,\n      width: width,\n      height: height,\n      r: labelModel.get('borderRadius')\n    },\n    position: position.slice(),\n    // TODO: rich\n    style: {\n      text: text,\n      textFont: font,\n      textFill: labelModel.getTextColor(),\n      textPosition: 'inside',\n      textPadding: paddings,\n      fill: bgColor,\n      stroke: labelModel.get('borderColor') || 'transparent',\n      lineWidth: labelModel.get('borderWidth') || 0,\n      shadowBlur: labelModel.get('shadowBlur'),\n      shadowColor: labelModel.get('shadowColor'),\n      shadowOffsetX: labelModel.get('shadowOffsetX'),\n      shadowOffsetY: labelModel.get('shadowOffsetY')\n    },\n    // Lable should be over axisPointer.\n    z2: 10\n  };\n} // Do not overflow ec container\n\n\nfunction confineInContainer(position, width, height, api) {\n  var viewWidth = api.getWidth();\n  var viewHeight = api.getHeight();\n  position[0] = Math.min(position[0] + width, viewWidth) - width;\n  position[1] = Math.min(position[1] + height, viewHeight) - height;\n  position[0] = Math.max(position[0], 0);\n  position[1] = Math.max(position[1], 0);\n}\n/**\n * @param {number} value\n * @param {module:echarts/coord/Axis} axis\n * @param {module:echarts/model/Global} ecModel\n * @param {Object} opt\n * @param {Array.<Object>} seriesDataIndices\n * @param {number|string} opt.precision 'auto' or a number\n * @param {string|Function} opt.formatter label formatter\n */\n\n\nfunction getValueLabel(value, axis, ecModel, seriesDataIndices, opt) {\n  value = axis.scale.parse(value);\n  var text = axis.scale.getLabel( // If `precision` is set, width can be fixed (like '12.00500'), which\n  // helps to debounce when when moving label.\n  value, {\n    precision: opt.precision\n  });\n  var formatter = opt.formatter;\n\n  if (formatter) {\n    var params = {\n      value: axisHelper.getAxisRawValue(axis, value),\n      axisDimension: axis.dim,\n      axisIndex: axis.index,\n      seriesData: []\n    };\n    zrUtil.each(seriesDataIndices, function (idxItem) {\n      var series = ecModel.getSeriesByIndex(idxItem.seriesIndex);\n      var dataIndex = idxItem.dataIndexInside;\n      var dataParams = series && series.getDataParams(dataIndex);\n      dataParams && params.seriesData.push(dataParams);\n    });\n\n    if (zrUtil.isString(formatter)) {\n      text = formatter.replace('{value}', text);\n    } else if (zrUtil.isFunction(formatter)) {\n      text = formatter(params);\n    }\n  }\n\n  return text;\n}\n/**\n * @param {module:echarts/coord/Axis} axis\n * @param {number} value\n * @param {Object} layoutInfo {\n *  rotation, position, labelOffset, labelDirection, labelMargin\n * }\n */\n\n\nfunction getTransformedPosition(axis, value, layoutInfo) {\n  var transform = matrix.create();\n  matrix.rotate(transform, transform, layoutInfo.rotation);\n  matrix.translate(transform, transform, layoutInfo.position);\n  return graphic.applyTransform([axis.dataToCoord(value), (layoutInfo.labelOffset || 0) + (layoutInfo.labelDirection || 1) * (layoutInfo.labelMargin || 0)], transform);\n}\n\nfunction buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api) {\n  var textLayout = AxisBuilder.innerTextLayout(layoutInfo.rotation, 0, layoutInfo.labelDirection);\n  layoutInfo.labelMargin = axisPointerModel.get('label.margin');\n  buildLabelElOption(elOption, axisModel, axisPointerModel, api, {\n    position: getTransformedPosition(axisModel.axis, value, layoutInfo),\n    align: textLayout.textAlign,\n    verticalAlign: textLayout.textVerticalAlign\n  });\n}\n/**\n * @param {Array.<number>} p1\n * @param {Array.<number>} p2\n * @param {number} [xDimIndex=0] or 1\n */\n\n\nfunction makeLineShape(p1, p2, xDimIndex) {\n  xDimIndex = xDimIndex || 0;\n  return {\n    x1: p1[xDimIndex],\n    y1: p1[1 - xDimIndex],\n    x2: p2[xDimIndex],\n    y2: p2[1 - xDimIndex]\n  };\n}\n/**\n * @param {Array.<number>} xy\n * @param {Array.<number>} wh\n * @param {number} [xDimIndex=0] or 1\n */\n\n\nfunction makeRectShape(xy, wh, xDimIndex) {\n  xDimIndex = xDimIndex || 0;\n  return {\n    x: xy[xDimIndex],\n    y: xy[1 - xDimIndex],\n    width: wh[xDimIndex],\n    height: wh[1 - xDimIndex]\n  };\n}\n\nfunction makeSectorShape(cx, cy, r0, r, startAngle, endAngle) {\n  return {\n    cx: cx,\n    cy: cy,\n    r0: r0,\n    r: r,\n    startAngle: startAngle,\n    endAngle: endAngle,\n    clockwise: true\n  };\n}\n\nexports.buildElStyle = buildElStyle;\nexports.buildLabelElOption = buildLabelElOption;\nexports.getValueLabel = getValueLabel;\nexports.getTransformedPosition = getTransformedPosition;\nexports.buildCartesianSingleLabelElOption = buildCartesianSingleLabelElOption;\nexports.makeLineShape = makeLineShape;\nexports.makeRectShape = makeRectShape;\nexports.makeSectorShape = makeSectorShape;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/component/axisPointer/viewHelper.js"],"names":["zrUtil","require","graphic","textContain","formatUtil","matrix","axisHelper","AxisBuilder","buildElStyle","axisPointerModel","axisPointerType","get","styleModel","getModel","style","getLineStyle","fill","getAreaStyle","stroke","buildLabelElOption","elOption","axisModel","api","labelPos","value","text","getValueLabel","axis","ecModel","precision","formatter","labelModel","paddings","normalizeCssArray","font","getFont","textRect","getBoundingRect","position","width","height","align","verticalAlign","confineInContainer","bgColor","label","shape","x","y","r","slice","textFont","textFill","getTextColor","textPosition","textPadding","lineWidth","shadowBlur","shadowColor","shadowOffsetX","shadowOffsetY","z2","viewWidth","getWidth","viewHeight","getHeight","Math","min","max","seriesDataIndices","opt","scale","parse","getLabel","params","getAxisRawValue","axisDimension","dim","axisIndex","index","seriesData","each","idxItem","series","getSeriesByIndex","seriesIndex","dataIndex","dataIndexInside","dataParams","getDataParams","push","isString","replace","isFunction","getTransformedPosition","layoutInfo","transform","create","rotate","rotation","translate","applyTransform","dataToCoord","labelOffset","labelDirection","labelMargin","buildCartesianSingleLabelElOption","textLayout","innerTextLayout","textAlign","textVerticalAlign","makeLineShape","p1","p2","xDimIndex","x1","y1","x2","y2","makeRectShape","xy","wh","makeSectorShape","cx","cy","r0","startAngle","endAngle","clockwise","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar textContain = require(\"zrender/lib/contain/text\");\n\nvar formatUtil = require(\"../../util/format\");\n\nvar matrix = require(\"zrender/lib/core/matrix\");\n\nvar axisHelper = require(\"../../coord/axisHelper\");\n\nvar AxisBuilder = require(\"../axis/AxisBuilder\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * @param {module:echarts/model/Model} axisPointerModel\n */\nfunction buildElStyle(axisPointerModel) {\n  var axisPointerType = axisPointerModel.get('type');\n  var styleModel = axisPointerModel.getModel(axisPointerType + 'Style');\n  var style;\n\n  if (axisPointerType === 'line') {\n    style = styleModel.getLineStyle();\n    style.fill = null;\n  } else if (axisPointerType === 'shadow') {\n    style = styleModel.getAreaStyle();\n    style.stroke = null;\n  }\n\n  return style;\n}\n/**\n * @param {Function} labelPos {align, verticalAlign, position}\n */\n\n\nfunction buildLabelElOption(elOption, axisModel, axisPointerModel, api, labelPos) {\n  var value = axisPointerModel.get('value');\n  var text = getValueLabel(value, axisModel.axis, axisModel.ecModel, axisPointerModel.get('seriesDataIndices'), {\n    precision: axisPointerModel.get('label.precision'),\n    formatter: axisPointerModel.get('label.formatter')\n  });\n  var labelModel = axisPointerModel.getModel('label');\n  var paddings = formatUtil.normalizeCssArray(labelModel.get('padding') || 0);\n  var font = labelModel.getFont();\n  var textRect = textContain.getBoundingRect(text, font);\n  var position = labelPos.position;\n  var width = textRect.width + paddings[1] + paddings[3];\n  var height = textRect.height + paddings[0] + paddings[2]; // Adjust by align.\n\n  var align = labelPos.align;\n  align === 'right' && (position[0] -= width);\n  align === 'center' && (position[0] -= width / 2);\n  var verticalAlign = labelPos.verticalAlign;\n  verticalAlign === 'bottom' && (position[1] -= height);\n  verticalAlign === 'middle' && (position[1] -= height / 2); // Not overflow ec container\n\n  confineInContainer(position, width, height, api);\n  var bgColor = labelModel.get('backgroundColor');\n\n  if (!bgColor || bgColor === 'auto') {\n    bgColor = axisModel.get('axisLine.lineStyle.color');\n  }\n\n  elOption.label = {\n    shape: {\n      x: 0,\n      y: 0,\n      width: width,\n      height: height,\n      r: labelModel.get('borderRadius')\n    },\n    position: position.slice(),\n    // TODO: rich\n    style: {\n      text: text,\n      textFont: font,\n      textFill: labelModel.getTextColor(),\n      textPosition: 'inside',\n      textPadding: paddings,\n      fill: bgColor,\n      stroke: labelModel.get('borderColor') || 'transparent',\n      lineWidth: labelModel.get('borderWidth') || 0,\n      shadowBlur: labelModel.get('shadowBlur'),\n      shadowColor: labelModel.get('shadowColor'),\n      shadowOffsetX: labelModel.get('shadowOffsetX'),\n      shadowOffsetY: labelModel.get('shadowOffsetY')\n    },\n    // Lable should be over axisPointer.\n    z2: 10\n  };\n} // Do not overflow ec container\n\n\nfunction confineInContainer(position, width, height, api) {\n  var viewWidth = api.getWidth();\n  var viewHeight = api.getHeight();\n  position[0] = Math.min(position[0] + width, viewWidth) - width;\n  position[1] = Math.min(position[1] + height, viewHeight) - height;\n  position[0] = Math.max(position[0], 0);\n  position[1] = Math.max(position[1], 0);\n}\n/**\n * @param {number} value\n * @param {module:echarts/coord/Axis} axis\n * @param {module:echarts/model/Global} ecModel\n * @param {Object} opt\n * @param {Array.<Object>} seriesDataIndices\n * @param {number|string} opt.precision 'auto' or a number\n * @param {string|Function} opt.formatter label formatter\n */\n\n\nfunction getValueLabel(value, axis, ecModel, seriesDataIndices, opt) {\n  value = axis.scale.parse(value);\n  var text = axis.scale.getLabel( // If `precision` is set, width can be fixed (like '12.00500'), which\n  // helps to debounce when when moving label.\n  value, {\n    precision: opt.precision\n  });\n  var formatter = opt.formatter;\n\n  if (formatter) {\n    var params = {\n      value: axisHelper.getAxisRawValue(axis, value),\n      axisDimension: axis.dim,\n      axisIndex: axis.index,\n      seriesData: []\n    };\n    zrUtil.each(seriesDataIndices, function (idxItem) {\n      var series = ecModel.getSeriesByIndex(idxItem.seriesIndex);\n      var dataIndex = idxItem.dataIndexInside;\n      var dataParams = series && series.getDataParams(dataIndex);\n      dataParams && params.seriesData.push(dataParams);\n    });\n\n    if (zrUtil.isString(formatter)) {\n      text = formatter.replace('{value}', text);\n    } else if (zrUtil.isFunction(formatter)) {\n      text = formatter(params);\n    }\n  }\n\n  return text;\n}\n/**\n * @param {module:echarts/coord/Axis} axis\n * @param {number} value\n * @param {Object} layoutInfo {\n *  rotation, position, labelOffset, labelDirection, labelMargin\n * }\n */\n\n\nfunction getTransformedPosition(axis, value, layoutInfo) {\n  var transform = matrix.create();\n  matrix.rotate(transform, transform, layoutInfo.rotation);\n  matrix.translate(transform, transform, layoutInfo.position);\n  return graphic.applyTransform([axis.dataToCoord(value), (layoutInfo.labelOffset || 0) + (layoutInfo.labelDirection || 1) * (layoutInfo.labelMargin || 0)], transform);\n}\n\nfunction buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api) {\n  var textLayout = AxisBuilder.innerTextLayout(layoutInfo.rotation, 0, layoutInfo.labelDirection);\n  layoutInfo.labelMargin = axisPointerModel.get('label.margin');\n  buildLabelElOption(elOption, axisModel, axisPointerModel, api, {\n    position: getTransformedPosition(axisModel.axis, value, layoutInfo),\n    align: textLayout.textAlign,\n    verticalAlign: textLayout.textVerticalAlign\n  });\n}\n/**\n * @param {Array.<number>} p1\n * @param {Array.<number>} p2\n * @param {number} [xDimIndex=0] or 1\n */\n\n\nfunction makeLineShape(p1, p2, xDimIndex) {\n  xDimIndex = xDimIndex || 0;\n  return {\n    x1: p1[xDimIndex],\n    y1: p1[1 - xDimIndex],\n    x2: p2[xDimIndex],\n    y2: p2[1 - xDimIndex]\n  };\n}\n/**\n * @param {Array.<number>} xy\n * @param {Array.<number>} wh\n * @param {number} [xDimIndex=0] or 1\n */\n\n\nfunction makeRectShape(xy, wh, xDimIndex) {\n  xDimIndex = xDimIndex || 0;\n  return {\n    x: xy[xDimIndex],\n    y: xy[1 - xDimIndex],\n    width: wh[xDimIndex],\n    height: wh[1 - xDimIndex]\n  };\n}\n\nfunction makeSectorShape(cx, cy, r0, r, startAngle, endAngle) {\n  return {\n    cx: cx,\n    cy: cy,\n    r0: r0,\n    r: r,\n    startAngle: startAngle,\n    endAngle: endAngle,\n    clockwise: true\n  };\n}\n\nexports.buildElStyle = buildElStyle;\nexports.buildLabelElOption = buildLabelElOption;\nexports.getValueLabel = getValueLabel;\nexports.getTransformedPosition = getTransformedPosition;\nexports.buildCartesianSingleLabelElOption = buildCartesianSingleLabelElOption;\nexports.makeLineShape = makeLineShape;\nexports.makeRectShape = makeRectShape;\nexports.makeSectorShape = makeSectorShape;"]},"metadata":{},"sourceType":"script"}