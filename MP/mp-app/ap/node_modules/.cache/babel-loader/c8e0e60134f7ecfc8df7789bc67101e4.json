{"ast":null,"code":"import { matchPath, Router, Switch, Route } from 'react-router';\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport React from 'react';\n\nfunction matchRoutes(routes, pathname,\n/*not public API*/\nbranch) {\n  if (branch === void 0) {\n    branch = [];\n  }\n\n  routes.some(function (route) {\n    var match = route.path ? matchPath(pathname, route) : branch.length ? branch[branch.length - 1].match // use parent match\n    : Router.computeRootMatch(pathname); // use default \"root\" match\n\n    if (match) {\n      branch.push({\n        route: route,\n        match: match\n      });\n\n      if (route.routes) {\n        matchRoutes(route.routes, pathname, branch);\n      }\n    }\n\n    return match;\n  });\n  return branch;\n}\n\nfunction renderRoutes(routes, extraProps, switchProps) {\n  if (extraProps === void 0) {\n    extraProps = {};\n  }\n\n  if (switchProps === void 0) {\n    switchProps = {};\n  }\n\n  return routes ? React.createElement(Switch, switchProps, routes.map(function (route, i) {\n    return React.createElement(Route, {\n      key: route.key || i,\n      path: route.path,\n      exact: route.exact,\n      strict: route.strict,\n      render: function render(props) {\n        return route.render ? route.render(_extends({}, props, {}, extraProps, {\n          route: route\n        })) : React.createElement(route.component, _extends({}, props, extraProps, {\n          route: route\n        }));\n      }\n    });\n  })) : null;\n}\n\nexport { matchRoutes, renderRoutes };","map":{"version":3,"sources":["../modules/matchRoutes.js","../modules/renderRoutes.js"],"names":["branch","routes","match","route","matchPath","Router","matchRoutes","extraProps","switchProps"],"mappings":";;;;AAEA,SAAA,WAAA,CAAA,MAAA,EAAA,QAAA;;AAAA,MAAA,EAAuE;MAAbA,MAAa,KAAA,KAAA,C,EAAA;AAAbA,IAAAA,MAAa,GAAJ,EAATA;;;AACxDC,EAAAA,MAAM,CAANA,IAAAA,CAAY,UAAA,KAAA,EAAS;QACbC,KAAK,GAAGC,KAAK,CAALA,IAAAA,GACVC,SAAS,CAAA,QAAA,EADCD,KACD,CADCA,GAEVH,MAAM,CAANA,MAAAA,GACEA,MAAM,CAACA,MAAM,CAANA,MAAAA,GAAPA,CAAM,CAANA,CADFA,KAAAA,CAAAA;AAAAA,MAEEK,MAAM,CAANA,gBAAAA,CALa,QAKbA,C,CALa,CAAA;;QAOnB,K,EAAW;AACTL,MAAAA,MAAM,CAANA,IAAAA,CAAY;AAAEG,QAAAA,KAAK,EAAP,KAAA;AAASD,QAAAA,KAAK,EAALA;AAAT,OAAZF;;UAEIG,KAAK,CAAT,M,EAAkB;AAChBG,QAAAA,WAAW,CAACH,KAAK,CAAN,MAAA,EAAA,QAAA,EAAXG,MAAW,CAAXA;;;;WAIJ,K;AAfFL,GAAAA;SAkBA,M;;;AClBF,SAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,WAAA,EAAiE;MAAnCM,UAAmC,KAAA,KAAA,C,EAAA;AAAnCA,IAAAA,UAAmC,GAAtB,EAAbA;;;MAAiBC,WAAkB,KAAA,KAAA,C,EAAA;AAAlBA,IAAAA,WAAkB,GAAJ,EAAdA;;;SACtCP,MAAM,GACX,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,WAAA,EACG,MAAM,CAAN,GAAA,CAAW,UAAA,KAAA,EAAA,CAAA,EAAA;WACV,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,MAAA,GAAG,EAAEE,KAAK,CAALA,GAAAA,IADP,CAAA;AAEE,MAAA,IAAI,EAAEA,KAAK,CAFb,IAAA;AAGE,MAAA,KAAK,EAAEA,KAAK,CAHd,KAAA;AAIE,MAAA,MAAM,EAAEA,KAAK,CAJf,MAAA;AAKE,MAAA,MAAM,EAAE,SAAA,MAAA,CAAA,KAAA,EAAK;eACX,KAAK,CAAL,MAAA,GACEA,KAAK,CAALA,MAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,UAAAA,EAAAA;AAAwCA,UAAAA,KAAK,EAAEA;AAA/CA,SAAAA,CAAAA,CADF,GAGE,KAAA,CAAA,aAAA,CAAC,KAAD,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA,UAAA,EAAA;AAA4C,UAAA,KAAK,EAAEA;AAAnD,SAAA,CAAA,C;;AATN,KAAA,C;AAHO,GAER,CADH,CADW,GAAb,I","sourcesContent":["import { matchPath, Router } from \"react-router\";\n\nfunction matchRoutes(routes, pathname, /*not public API*/ branch = []) {\n  routes.some(route => {\n    const match = route.path\n      ? matchPath(pathname, route)\n      : branch.length\n        ? branch[branch.length - 1].match // use parent match\n        : Router.computeRootMatch(pathname); // use default \"root\" match\n\n    if (match) {\n      branch.push({ route, match });\n\n      if (route.routes) {\n        matchRoutes(route.routes, pathname, branch);\n      }\n    }\n\n    return match;\n  });\n\n  return branch;\n}\n\nexport default matchRoutes;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router\";\n\nfunction renderRoutes(routes, extraProps = {}, switchProps = {}) {\n  return routes ? (\n    <Switch {...switchProps}>\n      {routes.map((route, i) => (\n        <Route\n          key={route.key || i}\n          path={route.path}\n          exact={route.exact}\n          strict={route.strict}\n          render={props =>\n            route.render ? (\n              route.render({ ...props, ...extraProps, route: route })\n            ) : (\n              <route.component {...props} {...extraProps} route={route} />\n            )\n          }\n        />\n      ))}\n    </Switch>\n  ) : null;\n}\n\nexport default renderRoutes;\n"]},"metadata":{},"sourceType":"module"}