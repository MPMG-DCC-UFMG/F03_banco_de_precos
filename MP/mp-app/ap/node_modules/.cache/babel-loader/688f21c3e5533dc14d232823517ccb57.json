{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar graphic = require(\"../../util/graphic\");\n\nvar _number = require(\"../../util/number\");\n\nvar round = _number.round;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nfunction createGridClipPath(cartesian, hasAnimation, seriesModel) {\n  var rect = cartesian.getArea();\n  var isHorizontal = cartesian.getBaseAxis().isHorizontal();\n  var x = rect.x;\n  var y = rect.y;\n  var width = rect.width;\n  var height = rect.height;\n  var lineWidth = seriesModel.get('lineStyle.width') || 2; // Expand the clip path a bit to avoid the border is clipped and looks thinner\n\n  x -= lineWidth / 2;\n  y -= lineWidth / 2;\n  width += lineWidth;\n  height += lineWidth; // fix: https://github.com/apache/incubator-echarts/issues/11369\n\n  x = Math.floor(x);\n  width = Math.round(width);\n  var clipPath = new graphic.Rect({\n    shape: {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    }\n  });\n\n  if (hasAnimation) {\n    clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;\n    graphic.initProps(clipPath, {\n      shape: {\n        width: width,\n        height: height\n      }\n    }, seriesModel);\n  }\n\n  return clipPath;\n}\n\nfunction createPolarClipPath(polar, hasAnimation, seriesModel) {\n  var sectorArea = polar.getArea(); // Avoid float number rounding error for symbol on the edge of axis extent.\n\n  var clipPath = new graphic.Sector({\n    shape: {\n      cx: round(polar.cx, 1),\n      cy: round(polar.cy, 1),\n      r0: round(sectorArea.r0, 1),\n      r: round(sectorArea.r, 1),\n      startAngle: sectorArea.startAngle,\n      endAngle: sectorArea.endAngle,\n      clockwise: sectorArea.clockwise\n    }\n  });\n\n  if (hasAnimation) {\n    clipPath.shape.endAngle = sectorArea.startAngle;\n    graphic.initProps(clipPath, {\n      shape: {\n        endAngle: sectorArea.endAngle\n      }\n    }, seriesModel);\n  }\n\n  return clipPath;\n}\n\nfunction createClipPath(coordSys, hasAnimation, seriesModel) {\n  if (!coordSys) {\n    return null;\n  } else if (coordSys.type === 'polar') {\n    return createPolarClipPath(coordSys, hasAnimation, seriesModel);\n  } else if (coordSys.type === 'cartesian2d') {\n    return createGridClipPath(coordSys, hasAnimation, seriesModel);\n  }\n\n  return null;\n}\n\nexports.createGridClipPath = createGridClipPath;\nexports.createPolarClipPath = createPolarClipPath;\nexports.createClipPath = createClipPath;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/chart/helper/createClipPathFromCoordSys.js"],"names":["graphic","require","_number","round","createGridClipPath","cartesian","hasAnimation","seriesModel","rect","getArea","isHorizontal","getBaseAxis","x","y","width","height","lineWidth","get","Math","floor","clipPath","Rect","shape","initProps","createPolarClipPath","polar","sectorArea","Sector","cx","cy","r0","r","startAngle","endAngle","clockwise","createClipPath","coordSys","type","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar graphic = require(\"../../util/graphic\");\n\nvar _number = require(\"../../util/number\");\n\nvar round = _number.round;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nfunction createGridClipPath(cartesian, hasAnimation, seriesModel) {\n  var rect = cartesian.getArea();\n  var isHorizontal = cartesian.getBaseAxis().isHorizontal();\n  var x = rect.x;\n  var y = rect.y;\n  var width = rect.width;\n  var height = rect.height;\n  var lineWidth = seriesModel.get('lineStyle.width') || 2; // Expand the clip path a bit to avoid the border is clipped and looks thinner\n\n  x -= lineWidth / 2;\n  y -= lineWidth / 2;\n  width += lineWidth;\n  height += lineWidth; // fix: https://github.com/apache/incubator-echarts/issues/11369\n\n  x = Math.floor(x);\n  width = Math.round(width);\n  var clipPath = new graphic.Rect({\n    shape: {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    }\n  });\n\n  if (hasAnimation) {\n    clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;\n    graphic.initProps(clipPath, {\n      shape: {\n        width: width,\n        height: height\n      }\n    }, seriesModel);\n  }\n\n  return clipPath;\n}\n\nfunction createPolarClipPath(polar, hasAnimation, seriesModel) {\n  var sectorArea = polar.getArea(); // Avoid float number rounding error for symbol on the edge of axis extent.\n\n  var clipPath = new graphic.Sector({\n    shape: {\n      cx: round(polar.cx, 1),\n      cy: round(polar.cy, 1),\n      r0: round(sectorArea.r0, 1),\n      r: round(sectorArea.r, 1),\n      startAngle: sectorArea.startAngle,\n      endAngle: sectorArea.endAngle,\n      clockwise: sectorArea.clockwise\n    }\n  });\n\n  if (hasAnimation) {\n    clipPath.shape.endAngle = sectorArea.startAngle;\n    graphic.initProps(clipPath, {\n      shape: {\n        endAngle: sectorArea.endAngle\n      }\n    }, seriesModel);\n  }\n\n  return clipPath;\n}\n\nfunction createClipPath(coordSys, hasAnimation, seriesModel) {\n  if (!coordSys) {\n    return null;\n  } else if (coordSys.type === 'polar') {\n    return createPolarClipPath(coordSys, hasAnimation, seriesModel);\n  } else if (coordSys.type === 'cartesian2d') {\n    return createGridClipPath(coordSys, hasAnimation, seriesModel);\n  }\n\n  return null;\n}\n\nexports.createGridClipPath = createGridClipPath;\nexports.createPolarClipPath = createPolarClipPath;\nexports.createClipPath = createClipPath;"]},"metadata":{},"sourceType":"script"}