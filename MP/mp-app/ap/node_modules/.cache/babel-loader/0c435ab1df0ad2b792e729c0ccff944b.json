{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar linkList = require(\"./helper/linkList\");\n\nvar List = require(\"./List\");\n\nvar createDimensions = require(\"./helper/createDimensions\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Tree data structure\n *\n * @module echarts/data/Tree\n */\n\n/**\n * @constructor module:echarts/data/Tree~TreeNode\n * @param {string} name\n * @param {module:echarts/data/Tree} hostTree\n */\n\n\nvar TreeNode = function TreeNode(name, hostTree) {\n  /**\n   * @type {string}\n   */\n  this.name = name || '';\n  /**\n   * Depth of node\n   *\n   * @type {number}\n   * @readOnly\n   */\n\n  this.depth = 0;\n  /**\n   * Height of the subtree rooted at this node.\n   * @type {number}\n   * @readOnly\n   */\n\n  this.height = 0;\n  /**\n   * @type {module:echarts/data/Tree~TreeNode}\n   * @readOnly\n   */\n\n  this.parentNode = null;\n  /**\n   * Reference to list item.\n   * Do not persistent dataIndex outside,\n   * besause it may be changed by list.\n   * If dataIndex -1,\n   * this node is logical deleted (filtered) in list.\n   *\n   * @type {Object}\n   * @readOnly\n   */\n\n  this.dataIndex = -1;\n  /**\n   * @type {Array.<module:echarts/data/Tree~TreeNode>}\n   * @readOnly\n   */\n\n  this.children = [];\n  /**\n   * @type {Array.<module:echarts/data/Tree~TreeNode>}\n   * @pubilc\n   */\n\n  this.viewChildren = [];\n  /**\n   * @type {moduel:echarts/data/Tree}\n   * @readOnly\n   */\n\n  this.hostTree = hostTree;\n};\n\nTreeNode.prototype = {\n  constructor: TreeNode,\n\n  /**\n   * The node is removed.\n   * @return {boolean} is removed.\n   */\n  isRemoved: function isRemoved() {\n    return this.dataIndex < 0;\n  },\n\n  /**\n   * Travel this subtree (include this node).\n   * Usage:\n   *    node.eachNode(function () { ... }); // preorder\n   *    node.eachNode('preorder', function () { ... }); // preorder\n   *    node.eachNode('postorder', function () { ... }); // postorder\n   *    node.eachNode(\n   *        {order: 'postorder', attr: 'viewChildren'},\n   *        function () { ... }\n   *    ); // postorder\n   *\n   * @param {(Object|string)} options If string, means order.\n   * @param {string=} options.order 'preorder' or 'postorder'\n   * @param {string=} options.attr 'children' or 'viewChildren'\n   * @param {Function} cb If in preorder and return false,\n   *                      its subtree will not be visited.\n   * @param {Object} [context]\n   */\n  eachNode: function eachNode(options, cb, context) {\n    if (typeof options === 'function') {\n      context = cb;\n      cb = options;\n      options = null;\n    }\n\n    options = options || {};\n\n    if (zrUtil.isString(options)) {\n      options = {\n        order: options\n      };\n    }\n\n    var order = options.order || 'preorder';\n    var children = this[options.attr || 'children'];\n    var suppressVisitSub;\n    order === 'preorder' && (suppressVisitSub = cb.call(context, this));\n\n    for (var i = 0; !suppressVisitSub && i < children.length; i++) {\n      children[i].eachNode(options, cb, context);\n    }\n\n    order === 'postorder' && cb.call(context, this);\n  },\n\n  /**\n   * Update depth and height of this subtree.\n   *\n   * @param  {number} depth\n   */\n  updateDepthAndHeight: function updateDepthAndHeight(depth) {\n    var height = 0;\n    this.depth = depth;\n\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n      child.updateDepthAndHeight(depth + 1);\n\n      if (child.height > height) {\n        height = child.height;\n      }\n    }\n\n    this.height = height + 1;\n  },\n\n  /**\n   * @param  {string} id\n   * @return {module:echarts/data/Tree~TreeNode}\n   */\n  getNodeById: function getNodeById(id) {\n    if (this.getId() === id) {\n      return this;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].getNodeById(id);\n\n      if (res) {\n        return res;\n      }\n    }\n  },\n\n  /**\n   * @param {module:echarts/data/Tree~TreeNode} node\n   * @return {boolean}\n   */\n  contains: function contains(node) {\n    if (node === this) {\n      return true;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].contains(node);\n\n      if (res) {\n        return res;\n      }\n    }\n  },\n\n  /**\n   * @param {boolean} includeSelf Default false.\n   * @return {Array.<module:echarts/data/Tree~TreeNode>} order: [root, child, grandchild, ...]\n   */\n  getAncestors: function getAncestors(includeSelf) {\n    var ancestors = [];\n    var node = includeSelf ? this : this.parentNode;\n\n    while (node) {\n      ancestors.push(node);\n      node = node.parentNode;\n    }\n\n    ancestors.reverse();\n    return ancestors;\n  },\n\n  /**\n   * @param {string|Array=} [dimension='value'] Default 'value'. can be 0, 1, 2, 3\n   * @return {number} Value.\n   */\n  getValue: function getValue(dimension) {\n    var data = this.hostTree.data;\n    return data.get(data.getDimension(dimension || 'value'), this.dataIndex);\n  },\n\n  /**\n   * @param {Object} layout\n   * @param {boolean=} [merge=false]\n   */\n  setLayout: function setLayout(layout, merge) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);\n  },\n\n  /**\n   * @return {Object} layout\n   */\n  getLayout: function getLayout() {\n    return this.hostTree.data.getItemLayout(this.dataIndex);\n  },\n\n  /**\n   * @param {string} [path]\n   * @return {module:echarts/model/Model}\n   */\n  getModel: function getModel(path) {\n    if (this.dataIndex < 0) {\n      return;\n    }\n\n    var hostTree = this.hostTree;\n    var itemModel = hostTree.data.getItemModel(this.dataIndex);\n    return itemModel.getModel(path);\n  },\n\n  /**\n   * @example\n   *  setItemVisual('color', color);\n   *  setItemVisual({\n   *      'color': color\n   *  });\n   */\n  setVisual: function setVisual(key, value) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemVisual(this.dataIndex, key, value);\n  },\n\n  /**\n   * Get item visual\n   */\n  getVisual: function getVisual(key, ignoreParent) {\n    return this.hostTree.data.getItemVisual(this.dataIndex, key, ignoreParent);\n  },\n\n  /**\n   * @public\n   * @return {number}\n   */\n  getRawIndex: function getRawIndex() {\n    return this.hostTree.data.getRawIndex(this.dataIndex);\n  },\n\n  /**\n   * @public\n   * @return {string}\n   */\n  getId: function getId() {\n    return this.hostTree.data.getId(this.dataIndex);\n  },\n\n  /**\n   * if this is an ancestor of another node\n   *\n   * @public\n   * @param {TreeNode} node another node\n   * @return {boolean} if is ancestor\n   */\n  isAncestorOf: function isAncestorOf(node) {\n    var parent = node.parentNode;\n\n    while (parent) {\n      if (parent === this) {\n        return true;\n      }\n\n      parent = parent.parentNode;\n    }\n\n    return false;\n  },\n\n  /**\n   * if this is an descendant of another node\n   *\n   * @public\n   * @param {TreeNode} node another node\n   * @return {boolean} if is descendant\n   */\n  isDescendantOf: function isDescendantOf(node) {\n    return node !== this && node.isAncestorOf(this);\n  }\n};\n/**\n * @constructor\n * @alias module:echarts/data/Tree\n * @param {module:echarts/model/Model} hostModel\n */\n\nfunction Tree(hostModel) {\n  /**\n   * @type {module:echarts/data/Tree~TreeNode}\n   * @readOnly\n   */\n  this.root;\n  /**\n   * @type {module:echarts/data/List}\n   * @readOnly\n   */\n\n  this.data;\n  /**\n   * Index of each item is the same as the raw index of coresponding list item.\n   * @private\n   * @type {Array.<module:echarts/data/Tree~TreeNode}\n   */\n\n  this._nodes = [];\n  /**\n   * @private\n   * @readOnly\n   * @type {module:echarts/model/Model}\n   */\n\n  this.hostModel = hostModel;\n}\n\nTree.prototype = {\n  constructor: Tree,\n  type: 'tree',\n\n  /**\n   * Travel this subtree (include this node).\n   * Usage:\n   *    node.eachNode(function () { ... }); // preorder\n   *    node.eachNode('preorder', function () { ... }); // preorder\n   *    node.eachNode('postorder', function () { ... }); // postorder\n   *    node.eachNode(\n   *        {order: 'postorder', attr: 'viewChildren'},\n   *        function () { ... }\n   *    ); // postorder\n   *\n   * @param {(Object|string)} options If string, means order.\n   * @param {string=} options.order 'preorder' or 'postorder'\n   * @param {string=} options.attr 'children' or 'viewChildren'\n   * @param {Function} cb\n   * @param {Object}   [context]\n   */\n  eachNode: function eachNode(options, cb, context) {\n    this.root.eachNode(options, cb, context);\n  },\n\n  /**\n   * @param {number} dataIndex\n   * @return {module:echarts/data/Tree~TreeNode}\n   */\n  getNodeByDataIndex: function getNodeByDataIndex(dataIndex) {\n    var rawIndex = this.data.getRawIndex(dataIndex);\n    return this._nodes[rawIndex];\n  },\n\n  /**\n   * @param {string} name\n   * @return {module:echarts/data/Tree~TreeNode}\n   */\n  getNodeByName: function getNodeByName(name) {\n    return this.root.getNodeByName(name);\n  },\n\n  /**\n   * Update item available by list,\n   * when list has been performed options like 'filterSelf' or 'map'.\n   */\n  update: function update() {\n    var data = this.data;\n    var nodes = this._nodes;\n\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      nodes[i].dataIndex = -1;\n    }\n\n    for (var i = 0, len = data.count(); i < len; i++) {\n      nodes[data.getRawIndex(i)].dataIndex = i;\n    }\n  },\n\n  /**\n   * Clear all layouts\n   */\n  clearLayouts: function clearLayouts() {\n    this.data.clearItemLayouts();\n  }\n};\n/**\n * data node format:\n * {\n *     name: ...\n *     value: ...\n *     children: [\n *         {\n *             name: ...\n *             value: ...\n *             children: ...\n *         },\n *         ...\n *     ]\n * }\n *\n * @static\n * @param {Object} dataRoot Root node.\n * @param {module:echarts/model/Model} hostModel\n * @return module:echarts/data/Tree\n */\n\nTree.createTree = function (dataRoot, hostModel, beforeLink) {\n  var tree = new Tree(hostModel);\n  var listData = [];\n  var dimMax = 1;\n  buildHierarchy(dataRoot);\n\n  function buildHierarchy(dataNode, parentNode) {\n    var value = dataNode.value;\n    dimMax = Math.max(dimMax, zrUtil.isArray(value) ? value.length : 1);\n    listData.push(dataNode);\n    var node = new TreeNode(dataNode.name, tree);\n    parentNode ? addChild(node, parentNode) : tree.root = node;\n\n    tree._nodes.push(node);\n\n    var children = dataNode.children;\n\n    if (children) {\n      for (var i = 0; i < children.length; i++) {\n        buildHierarchy(children[i], node);\n      }\n    }\n  }\n\n  tree.root.updateDepthAndHeight(0);\n  var dimensionsInfo = createDimensions(listData, {\n    coordDimensions: ['value'],\n    dimensionsCount: dimMax\n  });\n  var list = new List(dimensionsInfo, hostModel);\n  list.initData(listData);\n  beforeLink && beforeLink(list);\n  linkList({\n    mainData: list,\n    struct: tree,\n    structAttr: 'tree'\n  });\n  tree.update();\n  return tree;\n};\n/**\n * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,\n * so this function is not ready and not necessary to be public.\n *\n * @param {(module:echarts/data/Tree~TreeNode|Object)} child\n */\n\n\nfunction addChild(child, node) {\n  var children = node.children;\n\n  if (child.parentNode === node) {\n    return;\n  }\n\n  children.push(child);\n  child.parentNode = node;\n}\n\nvar _default = Tree;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/data/Tree.js"],"names":["zrUtil","require","linkList","List","createDimensions","TreeNode","name","hostTree","depth","height","parentNode","dataIndex","children","viewChildren","prototype","constructor","isRemoved","eachNode","options","cb","context","isString","order","attr","suppressVisitSub","call","i","length","updateDepthAndHeight","child","getNodeById","id","getId","len","res","contains","node","getAncestors","includeSelf","ancestors","push","reverse","getValue","dimension","data","get","getDimension","setLayout","layout","merge","setItemLayout","getLayout","getItemLayout","getModel","path","itemModel","getItemModel","setVisual","key","value","setItemVisual","getVisual","ignoreParent","getItemVisual","getRawIndex","isAncestorOf","parent","isDescendantOf","Tree","hostModel","root","_nodes","type","getNodeByDataIndex","rawIndex","getNodeByName","update","nodes","count","clearLayouts","clearItemLayouts","createTree","dataRoot","beforeLink","tree","listData","dimMax","buildHierarchy","dataNode","Math","max","isArray","addChild","dimensionsInfo","coordDimensions","dimensionsCount","list","initData","mainData","struct","structAttr","_default","module","exports"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,uBAAD,CAApB;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,mBAAD,CAAtB;;AAEA,IAAIE,IAAI,GAAGF,OAAO,CAAC,QAAD,CAAlB;;AAEA,IAAIG,gBAAgB,GAAGH,OAAO,CAAC,2BAAD,CAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,IAAII,QAAQ,GAAG,SAAXA,QAAW,CAAUC,IAAV,EAAgBC,QAAhB,EAA0B;AACvC;AACF;AACA;AACE,OAAKD,IAAL,GAAYA,IAAI,IAAI,EAApB;AACA;AACF;AACA;AACA;AACA;AACA;;AAEE,OAAKE,KAAL,GAAa,CAAb;AACA;AACF;AACA;AACA;AACA;;AAEE,OAAKC,MAAL,GAAc,CAAd;AACA;AACF;AACA;AACA;;AAEE,OAAKC,UAAL,GAAkB,IAAlB;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,OAAKC,SAAL,GAAiB,CAAC,CAAlB;AACA;AACF;AACA;AACA;;AAEE,OAAKC,QAAL,GAAgB,EAAhB;AACA;AACF;AACA;AACA;;AAEE,OAAKC,YAAL,GAAoB,EAApB;AACA;AACF;AACA;AACA;;AAEE,OAAKN,QAAL,GAAgBA,QAAhB;AACD,CAxDD;;AA0DAF,QAAQ,CAACS,SAAT,GAAqB;AACnBC,EAAAA,WAAW,EAAEV,QADM;;AAGnB;AACF;AACA;AACA;AACEW,EAAAA,SAAS,EAAE,qBAAY;AACrB,WAAO,KAAKL,SAAL,GAAiB,CAAxB;AACD,GATkB;;AAWnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEM,EAAAA,QAAQ,EAAE,kBAAUC,OAAV,EAAmBC,EAAnB,EAAuBC,OAAvB,EAAgC;AACxC,QAAI,OAAOF,OAAP,KAAmB,UAAvB,EAAmC;AACjCE,MAAAA,OAAO,GAAGD,EAAV;AACAA,MAAAA,EAAE,GAAGD,OAAL;AACAA,MAAAA,OAAO,GAAG,IAAV;AACD;;AAEDA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,QAAIlB,MAAM,CAACqB,QAAP,CAAgBH,OAAhB,CAAJ,EAA8B;AAC5BA,MAAAA,OAAO,GAAG;AACRI,QAAAA,KAAK,EAAEJ;AADC,OAAV;AAGD;;AAED,QAAII,KAAK,GAAGJ,OAAO,CAACI,KAAR,IAAiB,UAA7B;AACA,QAAIV,QAAQ,GAAG,KAAKM,OAAO,CAACK,IAAR,IAAgB,UAArB,CAAf;AACA,QAAIC,gBAAJ;AACAF,IAAAA,KAAK,KAAK,UAAV,KAAyBE,gBAAgB,GAAGL,EAAE,CAACM,IAAH,CAAQL,OAAR,EAAiB,IAAjB,CAA5C;;AAEA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgB,CAACF,gBAAD,IAAqBE,CAAC,GAAGd,QAAQ,CAACe,MAAlD,EAA0DD,CAAC,EAA3D,EAA+D;AAC7Dd,MAAAA,QAAQ,CAACc,CAAD,CAAR,CAAYT,QAAZ,CAAqBC,OAArB,EAA8BC,EAA9B,EAAkCC,OAAlC;AACD;;AAEDE,IAAAA,KAAK,KAAK,WAAV,IAAyBH,EAAE,CAACM,IAAH,CAAQL,OAAR,EAAiB,IAAjB,CAAzB;AACD,GAtDkB;;AAwDnB;AACF;AACA;AACA;AACA;AACEQ,EAAAA,oBAAoB,EAAE,8BAAUpB,KAAV,EAAiB;AACrC,QAAIC,MAAM,GAAG,CAAb;AACA,SAAKD,KAAL,GAAaA,KAAb;;AAEA,SAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKd,QAAL,CAAce,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C,UAAIG,KAAK,GAAG,KAAKjB,QAAL,CAAcc,CAAd,CAAZ;AACAG,MAAAA,KAAK,CAACD,oBAAN,CAA2BpB,KAAK,GAAG,CAAnC;;AAEA,UAAIqB,KAAK,CAACpB,MAAN,GAAeA,MAAnB,EAA2B;AACzBA,QAAAA,MAAM,GAAGoB,KAAK,CAACpB,MAAf;AACD;AACF;;AAED,SAAKA,MAAL,GAAcA,MAAM,GAAG,CAAvB;AACD,GA3EkB;;AA6EnB;AACF;AACA;AACA;AACEqB,EAAAA,WAAW,EAAE,qBAAUC,EAAV,EAAc;AACzB,QAAI,KAAKC,KAAL,OAAiBD,EAArB,EAAyB;AACvB,aAAO,IAAP;AACD;;AAED,SAAK,IAAIL,CAAC,GAAG,CAAR,EAAWd,QAAQ,GAAG,KAAKA,QAA3B,EAAqCqB,GAAG,GAAGrB,QAAQ,CAACe,MAAzD,EAAiED,CAAC,GAAGO,GAArE,EAA0EP,CAAC,EAA3E,EAA+E;AAC7E,UAAIQ,GAAG,GAAGtB,QAAQ,CAACc,CAAD,CAAR,CAAYI,WAAZ,CAAwBC,EAAxB,CAAV;;AAEA,UAAIG,GAAJ,EAAS;AACP,eAAOA,GAAP;AACD;AACF;AACF,GA7FkB;;AA+FnB;AACF;AACA;AACA;AACEC,EAAAA,QAAQ,EAAE,kBAAUC,IAAV,EAAgB;AACxB,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,SAAK,IAAIV,CAAC,GAAG,CAAR,EAAWd,QAAQ,GAAG,KAAKA,QAA3B,EAAqCqB,GAAG,GAAGrB,QAAQ,CAACe,MAAzD,EAAiED,CAAC,GAAGO,GAArE,EAA0EP,CAAC,EAA3E,EAA+E;AAC7E,UAAIQ,GAAG,GAAGtB,QAAQ,CAACc,CAAD,CAAR,CAAYS,QAAZ,CAAqBC,IAArB,CAAV;;AAEA,UAAIF,GAAJ,EAAS;AACP,eAAOA,GAAP;AACD;AACF;AACF,GA/GkB;;AAiHnB;AACF;AACA;AACA;AACEG,EAAAA,YAAY,EAAE,sBAAUC,WAAV,EAAuB;AACnC,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIH,IAAI,GAAGE,WAAW,GAAG,IAAH,GAAU,KAAK5B,UAArC;;AAEA,WAAO0B,IAAP,EAAa;AACXG,MAAAA,SAAS,CAACC,IAAV,CAAeJ,IAAf;AACAA,MAAAA,IAAI,GAAGA,IAAI,CAAC1B,UAAZ;AACD;;AAED6B,IAAAA,SAAS,CAACE,OAAV;AACA,WAAOF,SAAP;AACD,GAhIkB;;AAkInB;AACF;AACA;AACA;AACEG,EAAAA,QAAQ,EAAE,kBAAUC,SAAV,EAAqB;AAC7B,QAAIC,IAAI,GAAG,KAAKrC,QAAL,CAAcqC,IAAzB;AACA,WAAOA,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,YAAL,CAAkBH,SAAS,IAAI,OAA/B,CAAT,EAAkD,KAAKhC,SAAvD,CAAP;AACD,GAzIkB;;AA2InB;AACF;AACA;AACA;AACEoC,EAAAA,SAAS,EAAE,mBAAUC,MAAV,EAAkBC,KAAlB,EAAyB;AAClC,SAAKtC,SAAL,IAAkB,CAAlB,IAAuB,KAAKJ,QAAL,CAAcqC,IAAd,CAAmBM,aAAnB,CAAiC,KAAKvC,SAAtC,EAAiDqC,MAAjD,EAAyDC,KAAzD,CAAvB;AACD,GAjJkB;;AAmJnB;AACF;AACA;AACEE,EAAAA,SAAS,EAAE,qBAAY;AACrB,WAAO,KAAK5C,QAAL,CAAcqC,IAAd,CAAmBQ,aAAnB,CAAiC,KAAKzC,SAAtC,CAAP;AACD,GAxJkB;;AA0JnB;AACF;AACA;AACA;AACE0C,EAAAA,QAAQ,EAAE,kBAAUC,IAAV,EAAgB;AACxB,QAAI,KAAK3C,SAAL,GAAiB,CAArB,EAAwB;AACtB;AACD;;AAED,QAAIJ,QAAQ,GAAG,KAAKA,QAApB;AACA,QAAIgD,SAAS,GAAGhD,QAAQ,CAACqC,IAAT,CAAcY,YAAd,CAA2B,KAAK7C,SAAhC,CAAhB;AACA,WAAO4C,SAAS,CAACF,QAAV,CAAmBC,IAAnB,CAAP;AACD,GAtKkB;;AAwKnB;AACF;AACA;AACA;AACA;AACA;AACA;AACEG,EAAAA,SAAS,EAAE,mBAAUC,GAAV,EAAeC,KAAf,EAAsB;AAC/B,SAAKhD,SAAL,IAAkB,CAAlB,IAAuB,KAAKJ,QAAL,CAAcqC,IAAd,CAAmBgB,aAAnB,CAAiC,KAAKjD,SAAtC,EAAiD+C,GAAjD,EAAsDC,KAAtD,CAAvB;AACD,GAjLkB;;AAmLnB;AACF;AACA;AACEE,EAAAA,SAAS,EAAE,mBAAUH,GAAV,EAAeI,YAAf,EAA6B;AACtC,WAAO,KAAKvD,QAAL,CAAcqC,IAAd,CAAmBmB,aAAnB,CAAiC,KAAKpD,SAAtC,EAAiD+C,GAAjD,EAAsDI,YAAtD,CAAP;AACD,GAxLkB;;AA0LnB;AACF;AACA;AACA;AACEE,EAAAA,WAAW,EAAE,uBAAY;AACvB,WAAO,KAAKzD,QAAL,CAAcqC,IAAd,CAAmBoB,WAAnB,CAA+B,KAAKrD,SAApC,CAAP;AACD,GAhMkB;;AAkMnB;AACF;AACA;AACA;AACEqB,EAAAA,KAAK,EAAE,iBAAY;AACjB,WAAO,KAAKzB,QAAL,CAAcqC,IAAd,CAAmBZ,KAAnB,CAAyB,KAAKrB,SAA9B,CAAP;AACD,GAxMkB;;AA0MnB;AACF;AACA;AACA;AACA;AACA;AACA;AACEsD,EAAAA,YAAY,EAAE,sBAAU7B,IAAV,EAAgB;AAC5B,QAAI8B,MAAM,GAAG9B,IAAI,CAAC1B,UAAlB;;AAEA,WAAOwD,MAAP,EAAe;AACb,UAAIA,MAAM,KAAK,IAAf,EAAqB;AACnB,eAAO,IAAP;AACD;;AAEDA,MAAAA,MAAM,GAAGA,MAAM,CAACxD,UAAhB;AACD;;AAED,WAAO,KAAP;AACD,GA7NkB;;AA+NnB;AACF;AACA;AACA;AACA;AACA;AACA;AACEyD,EAAAA,cAAc,EAAE,wBAAU/B,IAAV,EAAgB;AAC9B,WAAOA,IAAI,KAAK,IAAT,IAAiBA,IAAI,CAAC6B,YAAL,CAAkB,IAAlB,CAAxB;AACD;AAxOkB,CAArB;AA0OA;AACA;AACA;AACA;AACA;;AAEA,SAASG,IAAT,CAAcC,SAAd,EAAyB;AACvB;AACF;AACA;AACA;AACE,OAAKC,IAAL;AACA;AACF;AACA;AACA;;AAEE,OAAK1B,IAAL;AACA;AACF;AACA;AACA;AACA;;AAEE,OAAK2B,MAAL,GAAc,EAAd;AACA;AACF;AACA;AACA;AACA;;AAEE,OAAKF,SAAL,GAAiBA,SAAjB;AACD;;AAEDD,IAAI,CAACtD,SAAL,GAAiB;AACfC,EAAAA,WAAW,EAAEqD,IADE;AAEfI,EAAAA,IAAI,EAAE,MAFS;;AAIf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEvD,EAAAA,QAAQ,EAAE,kBAAUC,OAAV,EAAmBC,EAAnB,EAAuBC,OAAvB,EAAgC;AACxC,SAAKkD,IAAL,CAAUrD,QAAV,CAAmBC,OAAnB,EAA4BC,EAA5B,EAAgCC,OAAhC;AACD,GAvBc;;AAyBf;AACF;AACA;AACA;AACEqD,EAAAA,kBAAkB,EAAE,4BAAU9D,SAAV,EAAqB;AACvC,QAAI+D,QAAQ,GAAG,KAAK9B,IAAL,CAAUoB,WAAV,CAAsBrD,SAAtB,CAAf;AACA,WAAO,KAAK4D,MAAL,CAAYG,QAAZ,CAAP;AACD,GAhCc;;AAkCf;AACF;AACA;AACA;AACEC,EAAAA,aAAa,EAAE,uBAAUrE,IAAV,EAAgB;AAC7B,WAAO,KAAKgE,IAAL,CAAUK,aAAV,CAAwBrE,IAAxB,CAAP;AACD,GAxCc;;AA0Cf;AACF;AACA;AACA;AACEsE,EAAAA,MAAM,EAAE,kBAAY;AAClB,QAAIhC,IAAI,GAAG,KAAKA,IAAhB;AACA,QAAIiC,KAAK,GAAG,KAAKN,MAAjB;;AAEA,SAAK,IAAI7C,CAAC,GAAG,CAAR,EAAWO,GAAG,GAAG4C,KAAK,CAAClD,MAA5B,EAAoCD,CAAC,GAAGO,GAAxC,EAA6CP,CAAC,EAA9C,EAAkD;AAChDmD,MAAAA,KAAK,CAACnD,CAAD,CAAL,CAASf,SAAT,GAAqB,CAAC,CAAtB;AACD;;AAED,SAAK,IAAIe,CAAC,GAAG,CAAR,EAAWO,GAAG,GAAGW,IAAI,CAACkC,KAAL,EAAtB,EAAoCpD,CAAC,GAAGO,GAAxC,EAA6CP,CAAC,EAA9C,EAAkD;AAChDmD,MAAAA,KAAK,CAACjC,IAAI,CAACoB,WAAL,CAAiBtC,CAAjB,CAAD,CAAL,CAA2Bf,SAA3B,GAAuCe,CAAvC;AACD;AACF,GAzDc;;AA2Df;AACF;AACA;AACEqD,EAAAA,YAAY,EAAE,wBAAY;AACxB,SAAKnC,IAAL,CAAUoC,gBAAV;AACD;AAhEc,CAAjB;AAkEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAZ,IAAI,CAACa,UAAL,GAAkB,UAAUC,QAAV,EAAoBb,SAApB,EAA+Bc,UAA/B,EAA2C;AAC3D,MAAIC,IAAI,GAAG,IAAIhB,IAAJ,CAASC,SAAT,CAAX;AACA,MAAIgB,QAAQ,GAAG,EAAf;AACA,MAAIC,MAAM,GAAG,CAAb;AACAC,EAAAA,cAAc,CAACL,QAAD,CAAd;;AAEA,WAASK,cAAT,CAAwBC,QAAxB,EAAkC9E,UAAlC,EAA8C;AAC5C,QAAIiD,KAAK,GAAG6B,QAAQ,CAAC7B,KAArB;AACA2B,IAAAA,MAAM,GAAGG,IAAI,CAACC,GAAL,CAASJ,MAAT,EAAiBtF,MAAM,CAAC2F,OAAP,CAAehC,KAAf,IAAwBA,KAAK,CAAChC,MAA9B,GAAuC,CAAxD,CAAT;AACA0D,IAAAA,QAAQ,CAAC7C,IAAT,CAAcgD,QAAd;AACA,QAAIpD,IAAI,GAAG,IAAI/B,QAAJ,CAAamF,QAAQ,CAAClF,IAAtB,EAA4B8E,IAA5B,CAAX;AACA1E,IAAAA,UAAU,GAAGkF,QAAQ,CAACxD,IAAD,EAAO1B,UAAP,CAAX,GAAgC0E,IAAI,CAACd,IAAL,GAAYlC,IAAtD;;AAEAgD,IAAAA,IAAI,CAACb,MAAL,CAAY/B,IAAZ,CAAiBJ,IAAjB;;AAEA,QAAIxB,QAAQ,GAAG4E,QAAQ,CAAC5E,QAAxB;;AAEA,QAAIA,QAAJ,EAAc;AACZ,WAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,QAAQ,CAACe,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC6D,QAAAA,cAAc,CAAC3E,QAAQ,CAACc,CAAD,CAAT,EAAcU,IAAd,CAAd;AACD;AACF;AACF;;AAEDgD,EAAAA,IAAI,CAACd,IAAL,CAAU1C,oBAAV,CAA+B,CAA/B;AACA,MAAIiE,cAAc,GAAGzF,gBAAgB,CAACiF,QAAD,EAAW;AAC9CS,IAAAA,eAAe,EAAE,CAAC,OAAD,CAD6B;AAE9CC,IAAAA,eAAe,EAAET;AAF6B,GAAX,CAArC;AAIA,MAAIU,IAAI,GAAG,IAAI7F,IAAJ,CAAS0F,cAAT,EAAyBxB,SAAzB,CAAX;AACA2B,EAAAA,IAAI,CAACC,QAAL,CAAcZ,QAAd;AACAF,EAAAA,UAAU,IAAIA,UAAU,CAACa,IAAD,CAAxB;AACA9F,EAAAA,QAAQ,CAAC;AACPgG,IAAAA,QAAQ,EAAEF,IADH;AAEPG,IAAAA,MAAM,EAAEf,IAFD;AAGPgB,IAAAA,UAAU,EAAE;AAHL,GAAD,CAAR;AAKAhB,EAAAA,IAAI,CAACR,MAAL;AACA,SAAOQ,IAAP;AACD,CAvCD;AAwCA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASQ,QAAT,CAAkB/D,KAAlB,EAAyBO,IAAzB,EAA+B;AAC7B,MAAIxB,QAAQ,GAAGwB,IAAI,CAACxB,QAApB;;AAEA,MAAIiB,KAAK,CAACnB,UAAN,KAAqB0B,IAAzB,EAA+B;AAC7B;AACD;;AAEDxB,EAAAA,QAAQ,CAAC4B,IAAT,CAAcX,KAAd;AACAA,EAAAA,KAAK,CAACnB,UAAN,GAAmB0B,IAAnB;AACD;;AAED,IAAIiE,QAAQ,GAAGjC,IAAf;AACAkC,MAAM,CAACC,OAAP,GAAiBF,QAAjB","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar linkList = require(\"./helper/linkList\");\n\nvar List = require(\"./List\");\n\nvar createDimensions = require(\"./helper/createDimensions\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Tree data structure\n *\n * @module echarts/data/Tree\n */\n\n/**\n * @constructor module:echarts/data/Tree~TreeNode\n * @param {string} name\n * @param {module:echarts/data/Tree} hostTree\n */\nvar TreeNode = function (name, hostTree) {\n  /**\n   * @type {string}\n   */\n  this.name = name || '';\n  /**\n   * Depth of node\n   *\n   * @type {number}\n   * @readOnly\n   */\n\n  this.depth = 0;\n  /**\n   * Height of the subtree rooted at this node.\n   * @type {number}\n   * @readOnly\n   */\n\n  this.height = 0;\n  /**\n   * @type {module:echarts/data/Tree~TreeNode}\n   * @readOnly\n   */\n\n  this.parentNode = null;\n  /**\n   * Reference to list item.\n   * Do not persistent dataIndex outside,\n   * besause it may be changed by list.\n   * If dataIndex -1,\n   * this node is logical deleted (filtered) in list.\n   *\n   * @type {Object}\n   * @readOnly\n   */\n\n  this.dataIndex = -1;\n  /**\n   * @type {Array.<module:echarts/data/Tree~TreeNode>}\n   * @readOnly\n   */\n\n  this.children = [];\n  /**\n   * @type {Array.<module:echarts/data/Tree~TreeNode>}\n   * @pubilc\n   */\n\n  this.viewChildren = [];\n  /**\n   * @type {moduel:echarts/data/Tree}\n   * @readOnly\n   */\n\n  this.hostTree = hostTree;\n};\n\nTreeNode.prototype = {\n  constructor: TreeNode,\n\n  /**\n   * The node is removed.\n   * @return {boolean} is removed.\n   */\n  isRemoved: function () {\n    return this.dataIndex < 0;\n  },\n\n  /**\n   * Travel this subtree (include this node).\n   * Usage:\n   *    node.eachNode(function () { ... }); // preorder\n   *    node.eachNode('preorder', function () { ... }); // preorder\n   *    node.eachNode('postorder', function () { ... }); // postorder\n   *    node.eachNode(\n   *        {order: 'postorder', attr: 'viewChildren'},\n   *        function () { ... }\n   *    ); // postorder\n   *\n   * @param {(Object|string)} options If string, means order.\n   * @param {string=} options.order 'preorder' or 'postorder'\n   * @param {string=} options.attr 'children' or 'viewChildren'\n   * @param {Function} cb If in preorder and return false,\n   *                      its subtree will not be visited.\n   * @param {Object} [context]\n   */\n  eachNode: function (options, cb, context) {\n    if (typeof options === 'function') {\n      context = cb;\n      cb = options;\n      options = null;\n    }\n\n    options = options || {};\n\n    if (zrUtil.isString(options)) {\n      options = {\n        order: options\n      };\n    }\n\n    var order = options.order || 'preorder';\n    var children = this[options.attr || 'children'];\n    var suppressVisitSub;\n    order === 'preorder' && (suppressVisitSub = cb.call(context, this));\n\n    for (var i = 0; !suppressVisitSub && i < children.length; i++) {\n      children[i].eachNode(options, cb, context);\n    }\n\n    order === 'postorder' && cb.call(context, this);\n  },\n\n  /**\n   * Update depth and height of this subtree.\n   *\n   * @param  {number} depth\n   */\n  updateDepthAndHeight: function (depth) {\n    var height = 0;\n    this.depth = depth;\n\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n      child.updateDepthAndHeight(depth + 1);\n\n      if (child.height > height) {\n        height = child.height;\n      }\n    }\n\n    this.height = height + 1;\n  },\n\n  /**\n   * @param  {string} id\n   * @return {module:echarts/data/Tree~TreeNode}\n   */\n  getNodeById: function (id) {\n    if (this.getId() === id) {\n      return this;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].getNodeById(id);\n\n      if (res) {\n        return res;\n      }\n    }\n  },\n\n  /**\n   * @param {module:echarts/data/Tree~TreeNode} node\n   * @return {boolean}\n   */\n  contains: function (node) {\n    if (node === this) {\n      return true;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].contains(node);\n\n      if (res) {\n        return res;\n      }\n    }\n  },\n\n  /**\n   * @param {boolean} includeSelf Default false.\n   * @return {Array.<module:echarts/data/Tree~TreeNode>} order: [root, child, grandchild, ...]\n   */\n  getAncestors: function (includeSelf) {\n    var ancestors = [];\n    var node = includeSelf ? this : this.parentNode;\n\n    while (node) {\n      ancestors.push(node);\n      node = node.parentNode;\n    }\n\n    ancestors.reverse();\n    return ancestors;\n  },\n\n  /**\n   * @param {string|Array=} [dimension='value'] Default 'value'. can be 0, 1, 2, 3\n   * @return {number} Value.\n   */\n  getValue: function (dimension) {\n    var data = this.hostTree.data;\n    return data.get(data.getDimension(dimension || 'value'), this.dataIndex);\n  },\n\n  /**\n   * @param {Object} layout\n   * @param {boolean=} [merge=false]\n   */\n  setLayout: function (layout, merge) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);\n  },\n\n  /**\n   * @return {Object} layout\n   */\n  getLayout: function () {\n    return this.hostTree.data.getItemLayout(this.dataIndex);\n  },\n\n  /**\n   * @param {string} [path]\n   * @return {module:echarts/model/Model}\n   */\n  getModel: function (path) {\n    if (this.dataIndex < 0) {\n      return;\n    }\n\n    var hostTree = this.hostTree;\n    var itemModel = hostTree.data.getItemModel(this.dataIndex);\n    return itemModel.getModel(path);\n  },\n\n  /**\n   * @example\n   *  setItemVisual('color', color);\n   *  setItemVisual({\n   *      'color': color\n   *  });\n   */\n  setVisual: function (key, value) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemVisual(this.dataIndex, key, value);\n  },\n\n  /**\n   * Get item visual\n   */\n  getVisual: function (key, ignoreParent) {\n    return this.hostTree.data.getItemVisual(this.dataIndex, key, ignoreParent);\n  },\n\n  /**\n   * @public\n   * @return {number}\n   */\n  getRawIndex: function () {\n    return this.hostTree.data.getRawIndex(this.dataIndex);\n  },\n\n  /**\n   * @public\n   * @return {string}\n   */\n  getId: function () {\n    return this.hostTree.data.getId(this.dataIndex);\n  },\n\n  /**\n   * if this is an ancestor of another node\n   *\n   * @public\n   * @param {TreeNode} node another node\n   * @return {boolean} if is ancestor\n   */\n  isAncestorOf: function (node) {\n    var parent = node.parentNode;\n\n    while (parent) {\n      if (parent === this) {\n        return true;\n      }\n\n      parent = parent.parentNode;\n    }\n\n    return false;\n  },\n\n  /**\n   * if this is an descendant of another node\n   *\n   * @public\n   * @param {TreeNode} node another node\n   * @return {boolean} if is descendant\n   */\n  isDescendantOf: function (node) {\n    return node !== this && node.isAncestorOf(this);\n  }\n};\n/**\n * @constructor\n * @alias module:echarts/data/Tree\n * @param {module:echarts/model/Model} hostModel\n */\n\nfunction Tree(hostModel) {\n  /**\n   * @type {module:echarts/data/Tree~TreeNode}\n   * @readOnly\n   */\n  this.root;\n  /**\n   * @type {module:echarts/data/List}\n   * @readOnly\n   */\n\n  this.data;\n  /**\n   * Index of each item is the same as the raw index of coresponding list item.\n   * @private\n   * @type {Array.<module:echarts/data/Tree~TreeNode}\n   */\n\n  this._nodes = [];\n  /**\n   * @private\n   * @readOnly\n   * @type {module:echarts/model/Model}\n   */\n\n  this.hostModel = hostModel;\n}\n\nTree.prototype = {\n  constructor: Tree,\n  type: 'tree',\n\n  /**\n   * Travel this subtree (include this node).\n   * Usage:\n   *    node.eachNode(function () { ... }); // preorder\n   *    node.eachNode('preorder', function () { ... }); // preorder\n   *    node.eachNode('postorder', function () { ... }); // postorder\n   *    node.eachNode(\n   *        {order: 'postorder', attr: 'viewChildren'},\n   *        function () { ... }\n   *    ); // postorder\n   *\n   * @param {(Object|string)} options If string, means order.\n   * @param {string=} options.order 'preorder' or 'postorder'\n   * @param {string=} options.attr 'children' or 'viewChildren'\n   * @param {Function} cb\n   * @param {Object}   [context]\n   */\n  eachNode: function (options, cb, context) {\n    this.root.eachNode(options, cb, context);\n  },\n\n  /**\n   * @param {number} dataIndex\n   * @return {module:echarts/data/Tree~TreeNode}\n   */\n  getNodeByDataIndex: function (dataIndex) {\n    var rawIndex = this.data.getRawIndex(dataIndex);\n    return this._nodes[rawIndex];\n  },\n\n  /**\n   * @param {string} name\n   * @return {module:echarts/data/Tree~TreeNode}\n   */\n  getNodeByName: function (name) {\n    return this.root.getNodeByName(name);\n  },\n\n  /**\n   * Update item available by list,\n   * when list has been performed options like 'filterSelf' or 'map'.\n   */\n  update: function () {\n    var data = this.data;\n    var nodes = this._nodes;\n\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      nodes[i].dataIndex = -1;\n    }\n\n    for (var i = 0, len = data.count(); i < len; i++) {\n      nodes[data.getRawIndex(i)].dataIndex = i;\n    }\n  },\n\n  /**\n   * Clear all layouts\n   */\n  clearLayouts: function () {\n    this.data.clearItemLayouts();\n  }\n};\n/**\n * data node format:\n * {\n *     name: ...\n *     value: ...\n *     children: [\n *         {\n *             name: ...\n *             value: ...\n *             children: ...\n *         },\n *         ...\n *     ]\n * }\n *\n * @static\n * @param {Object} dataRoot Root node.\n * @param {module:echarts/model/Model} hostModel\n * @return module:echarts/data/Tree\n */\n\nTree.createTree = function (dataRoot, hostModel, beforeLink) {\n  var tree = new Tree(hostModel);\n  var listData = [];\n  var dimMax = 1;\n  buildHierarchy(dataRoot);\n\n  function buildHierarchy(dataNode, parentNode) {\n    var value = dataNode.value;\n    dimMax = Math.max(dimMax, zrUtil.isArray(value) ? value.length : 1);\n    listData.push(dataNode);\n    var node = new TreeNode(dataNode.name, tree);\n    parentNode ? addChild(node, parentNode) : tree.root = node;\n\n    tree._nodes.push(node);\n\n    var children = dataNode.children;\n\n    if (children) {\n      for (var i = 0; i < children.length; i++) {\n        buildHierarchy(children[i], node);\n      }\n    }\n  }\n\n  tree.root.updateDepthAndHeight(0);\n  var dimensionsInfo = createDimensions(listData, {\n    coordDimensions: ['value'],\n    dimensionsCount: dimMax\n  });\n  var list = new List(dimensionsInfo, hostModel);\n  list.initData(listData);\n  beforeLink && beforeLink(list);\n  linkList({\n    mainData: list,\n    struct: tree,\n    structAttr: 'tree'\n  });\n  tree.update();\n  return tree;\n};\n/**\n * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,\n * so this function is not ready and not necessary to be public.\n *\n * @param {(module:echarts/data/Tree~TreeNode|Object)} child\n */\n\n\nfunction addChild(child, node) {\n  var children = node.children;\n\n  if (child.parentNode === node) {\n    return;\n  }\n\n  children.push(child);\n  child.parentNode = node;\n}\n\nvar _default = Tree;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}