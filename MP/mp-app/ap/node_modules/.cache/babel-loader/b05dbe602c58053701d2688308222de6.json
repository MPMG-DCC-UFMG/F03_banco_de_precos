{"ast":null,"code":"var _core = require(\"../core\");\n\nvar createElement = _core.createElement;\n\nvar zrUtil = require(\"../../core/util\");\n\nvar Path = require(\"../../graphic/Path\");\n\nvar ZImage = require(\"../../graphic/Image\");\n\nvar ZText = require(\"../../graphic/Text\");\n\nvar _graphic = require(\"../graphic\");\n\nvar svgPath = _graphic.path;\nvar svgImage = _graphic.image;\nvar svgText = _graphic.text;\n/**\n * @file Manages elements that can be defined in <defs> in SVG,\n *       e.g., gradients, clip path, etc.\n * @author Zhang Wenli\n */\n\nvar MARK_UNUSED = '0';\nvar MARK_USED = '1';\n/**\n * Manages elements that can be defined in <defs> in SVG,\n * e.g., gradients, clip path, etc.\n *\n * @class\n * @param {number}          zrId      zrender instance id\n * @param {SVGElement}      svgRoot   root of SVG document\n * @param {string|string[]} tagNames  possible tag names\n * @param {string}          markLabel label name to make if the element\n *                                    is used\n */\n\nfunction Definable(zrId, svgRoot, tagNames, markLabel, domName) {\n  this._zrId = zrId;\n  this._svgRoot = svgRoot;\n  this._tagNames = typeof tagNames === 'string' ? [tagNames] : tagNames;\n  this._markLabel = markLabel;\n  this._domName = domName || '_dom';\n  this.nextId = 0;\n}\n\nDefinable.prototype.createElement = createElement;\n/**\n * Get the <defs> tag for svgRoot; optionally creates one if not exists.\n *\n * @param {boolean} isForceCreating if need to create when not exists\n * @return {SVGDefsElement} SVG <defs> element, null if it doesn't\n * exist and isForceCreating is false\n */\n\nDefinable.prototype.getDefs = function (isForceCreating) {\n  var svgRoot = this._svgRoot;\n\n  var defs = this._svgRoot.getElementsByTagName('defs');\n\n  if (defs.length === 0) {\n    // Not exist\n    if (isForceCreating) {\n      defs = svgRoot.insertBefore(this.createElement('defs'), // Create new tag\n      svgRoot.firstChild // Insert in the front of svg\n      );\n\n      if (!defs.contains) {\n        // IE doesn't support contains method\n        defs.contains = function (el) {\n          var children = defs.children;\n\n          if (!children) {\n            return false;\n          }\n\n          for (var i = children.length - 1; i >= 0; --i) {\n            if (children[i] === el) {\n              return true;\n            }\n          }\n\n          return false;\n        };\n      }\n\n      return defs;\n    } else {\n      return null;\n    }\n  } else {\n    return defs[0];\n  }\n};\n/**\n * Update DOM element if necessary.\n *\n * @param {Object|string} element style element. e.g., for gradient,\n *                                it may be '#ccc' or {type: 'linear', ...}\n * @param {Function|undefined} onUpdate update callback\n */\n\n\nDefinable.prototype.update = function (element, onUpdate) {\n  if (!element) {\n    return;\n  }\n\n  var defs = this.getDefs(false);\n\n  if (element[this._domName] && defs.contains(element[this._domName])) {\n    // Update DOM\n    if (typeof onUpdate === 'function') {\n      onUpdate(element);\n    }\n  } else {\n    // No previous dom, create new\n    var dom = this.add(element);\n\n    if (dom) {\n      element[this._domName] = dom;\n    }\n  }\n};\n/**\n * Add gradient dom to defs\n *\n * @param {SVGElement} dom DOM to be added to <defs>\n */\n\n\nDefinable.prototype.addDom = function (dom) {\n  var defs = this.getDefs(true);\n  defs.appendChild(dom);\n};\n/**\n * Remove DOM of a given element.\n *\n * @param {SVGElement} element element to remove dom\n */\n\n\nDefinable.prototype.removeDom = function (element) {\n  var defs = this.getDefs(false);\n\n  if (defs && element[this._domName]) {\n    defs.removeChild(element[this._domName]);\n    element[this._domName] = null;\n  }\n};\n/**\n * Get DOMs of this element.\n *\n * @return {HTMLDomElement} doms of this defineable elements in <defs>\n */\n\n\nDefinable.prototype.getDoms = function () {\n  var defs = this.getDefs(false);\n\n  if (!defs) {\n    // No dom when defs is not defined\n    return [];\n  }\n\n  var doms = [];\n  zrUtil.each(this._tagNames, function (tagName) {\n    var tags = defs.getElementsByTagName(tagName); // Note that tags is HTMLCollection, which is array-like\n    // rather than real array.\n    // So `doms.concat(tags)` add tags as one object.\n\n    doms = doms.concat([].slice.call(tags));\n  });\n  return doms;\n};\n/**\n * Mark DOMs to be unused before painting, and clear unused ones at the end\n * of the painting.\n */\n\n\nDefinable.prototype.markAllUnused = function () {\n  var doms = this.getDoms();\n  var that = this;\n  zrUtil.each(doms, function (dom) {\n    dom[that._markLabel] = MARK_UNUSED;\n  });\n};\n/**\n * Mark a single DOM to be used.\n *\n * @param {SVGElement} dom DOM to mark\n */\n\n\nDefinable.prototype.markUsed = function (dom) {\n  if (dom) {\n    dom[this._markLabel] = MARK_USED;\n  }\n};\n/**\n * Remove unused DOMs defined in <defs>\n */\n\n\nDefinable.prototype.removeUnused = function () {\n  var defs = this.getDefs(false);\n\n  if (!defs) {\n    // Nothing to remove\n    return;\n  }\n\n  var doms = this.getDoms();\n  var that = this;\n  zrUtil.each(doms, function (dom) {\n    if (dom[that._markLabel] !== MARK_USED) {\n      // Remove gradient\n      defs.removeChild(dom);\n    }\n  });\n};\n/**\n * Get SVG proxy.\n *\n * @param {Displayable} displayable displayable element\n * @return {Path|Image|Text} svg proxy of given element\n */\n\n\nDefinable.prototype.getSvgProxy = function (displayable) {\n  if (displayable instanceof Path) {\n    return svgPath;\n  } else if (displayable instanceof ZImage) {\n    return svgImage;\n  } else if (displayable instanceof ZText) {\n    return svgText;\n  } else {\n    return svgPath;\n  }\n};\n/**\n * Get text SVG element.\n *\n * @param {Displayable} displayable displayable element\n * @return {SVGElement} SVG element of text\n */\n\n\nDefinable.prototype.getTextSvgElement = function (displayable) {\n  return displayable.__textSvgEl;\n};\n/**\n * Get SVG element.\n *\n * @param {Displayable} displayable displayable element\n * @return {SVGElement} SVG element\n */\n\n\nDefinable.prototype.getSvgElement = function (displayable) {\n  return displayable.__svgEl;\n};\n\nvar _default = Definable;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/zrender/lib/svg/helper/Definable.js"],"names":["_core","require","createElement","zrUtil","Path","ZImage","ZText","_graphic","svgPath","path","svgImage","image","svgText","text","MARK_UNUSED","MARK_USED","Definable","zrId","svgRoot","tagNames","markLabel","domName","_zrId","_svgRoot","_tagNames","_markLabel","_domName","nextId","prototype","getDefs","isForceCreating","defs","getElementsByTagName","length","insertBefore","firstChild","contains","el","children","i","update","element","onUpdate","dom","add","addDom","appendChild","removeDom","removeChild","getDoms","doms","each","tagName","tags","concat","slice","call","markAllUnused","that","markUsed","removeUnused","getSvgProxy","displayable","getTextSvgElement","__textSvgEl","getSvgElement","__svgEl","_default","module","exports"],"mappings":"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","sourcesContent":["var _core = require(\"../core\");\n\nvar createElement = _core.createElement;\n\nvar zrUtil = require(\"../../core/util\");\n\nvar Path = require(\"../../graphic/Path\");\n\nvar ZImage = require(\"../../graphic/Image\");\n\nvar ZText = require(\"../../graphic/Text\");\n\nvar _graphic = require(\"../graphic\");\n\nvar svgPath = _graphic.path;\nvar svgImage = _graphic.image;\nvar svgText = _graphic.text;\n\n/**\n * @file Manages elements that can be defined in <defs> in SVG,\n *       e.g., gradients, clip path, etc.\n * @author Zhang Wenli\n */\nvar MARK_UNUSED = '0';\nvar MARK_USED = '1';\n/**\n * Manages elements that can be defined in <defs> in SVG,\n * e.g., gradients, clip path, etc.\n *\n * @class\n * @param {number}          zrId      zrender instance id\n * @param {SVGElement}      svgRoot   root of SVG document\n * @param {string|string[]} tagNames  possible tag names\n * @param {string}          markLabel label name to make if the element\n *                                    is used\n */\n\nfunction Definable(zrId, svgRoot, tagNames, markLabel, domName) {\n  this._zrId = zrId;\n  this._svgRoot = svgRoot;\n  this._tagNames = typeof tagNames === 'string' ? [tagNames] : tagNames;\n  this._markLabel = markLabel;\n  this._domName = domName || '_dom';\n  this.nextId = 0;\n}\n\nDefinable.prototype.createElement = createElement;\n/**\n * Get the <defs> tag for svgRoot; optionally creates one if not exists.\n *\n * @param {boolean} isForceCreating if need to create when not exists\n * @return {SVGDefsElement} SVG <defs> element, null if it doesn't\n * exist and isForceCreating is false\n */\n\nDefinable.prototype.getDefs = function (isForceCreating) {\n  var svgRoot = this._svgRoot;\n\n  var defs = this._svgRoot.getElementsByTagName('defs');\n\n  if (defs.length === 0) {\n    // Not exist\n    if (isForceCreating) {\n      defs = svgRoot.insertBefore(this.createElement('defs'), // Create new tag\n      svgRoot.firstChild // Insert in the front of svg\n      );\n\n      if (!defs.contains) {\n        // IE doesn't support contains method\n        defs.contains = function (el) {\n          var children = defs.children;\n\n          if (!children) {\n            return false;\n          }\n\n          for (var i = children.length - 1; i >= 0; --i) {\n            if (children[i] === el) {\n              return true;\n            }\n          }\n\n          return false;\n        };\n      }\n\n      return defs;\n    } else {\n      return null;\n    }\n  } else {\n    return defs[0];\n  }\n};\n/**\n * Update DOM element if necessary.\n *\n * @param {Object|string} element style element. e.g., for gradient,\n *                                it may be '#ccc' or {type: 'linear', ...}\n * @param {Function|undefined} onUpdate update callback\n */\n\n\nDefinable.prototype.update = function (element, onUpdate) {\n  if (!element) {\n    return;\n  }\n\n  var defs = this.getDefs(false);\n\n  if (element[this._domName] && defs.contains(element[this._domName])) {\n    // Update DOM\n    if (typeof onUpdate === 'function') {\n      onUpdate(element);\n    }\n  } else {\n    // No previous dom, create new\n    var dom = this.add(element);\n\n    if (dom) {\n      element[this._domName] = dom;\n    }\n  }\n};\n/**\n * Add gradient dom to defs\n *\n * @param {SVGElement} dom DOM to be added to <defs>\n */\n\n\nDefinable.prototype.addDom = function (dom) {\n  var defs = this.getDefs(true);\n  defs.appendChild(dom);\n};\n/**\n * Remove DOM of a given element.\n *\n * @param {SVGElement} element element to remove dom\n */\n\n\nDefinable.prototype.removeDom = function (element) {\n  var defs = this.getDefs(false);\n\n  if (defs && element[this._domName]) {\n    defs.removeChild(element[this._domName]);\n    element[this._domName] = null;\n  }\n};\n/**\n * Get DOMs of this element.\n *\n * @return {HTMLDomElement} doms of this defineable elements in <defs>\n */\n\n\nDefinable.prototype.getDoms = function () {\n  var defs = this.getDefs(false);\n\n  if (!defs) {\n    // No dom when defs is not defined\n    return [];\n  }\n\n  var doms = [];\n  zrUtil.each(this._tagNames, function (tagName) {\n    var tags = defs.getElementsByTagName(tagName); // Note that tags is HTMLCollection, which is array-like\n    // rather than real array.\n    // So `doms.concat(tags)` add tags as one object.\n\n    doms = doms.concat([].slice.call(tags));\n  });\n  return doms;\n};\n/**\n * Mark DOMs to be unused before painting, and clear unused ones at the end\n * of the painting.\n */\n\n\nDefinable.prototype.markAllUnused = function () {\n  var doms = this.getDoms();\n  var that = this;\n  zrUtil.each(doms, function (dom) {\n    dom[that._markLabel] = MARK_UNUSED;\n  });\n};\n/**\n * Mark a single DOM to be used.\n *\n * @param {SVGElement} dom DOM to mark\n */\n\n\nDefinable.prototype.markUsed = function (dom) {\n  if (dom) {\n    dom[this._markLabel] = MARK_USED;\n  }\n};\n/**\n * Remove unused DOMs defined in <defs>\n */\n\n\nDefinable.prototype.removeUnused = function () {\n  var defs = this.getDefs(false);\n\n  if (!defs) {\n    // Nothing to remove\n    return;\n  }\n\n  var doms = this.getDoms();\n  var that = this;\n  zrUtil.each(doms, function (dom) {\n    if (dom[that._markLabel] !== MARK_USED) {\n      // Remove gradient\n      defs.removeChild(dom);\n    }\n  });\n};\n/**\n * Get SVG proxy.\n *\n * @param {Displayable} displayable displayable element\n * @return {Path|Image|Text} svg proxy of given element\n */\n\n\nDefinable.prototype.getSvgProxy = function (displayable) {\n  if (displayable instanceof Path) {\n    return svgPath;\n  } else if (displayable instanceof ZImage) {\n    return svgImage;\n  } else if (displayable instanceof ZText) {\n    return svgText;\n  } else {\n    return svgPath;\n  }\n};\n/**\n * Get text SVG element.\n *\n * @param {Displayable} displayable displayable element\n * @return {SVGElement} SVG element of text\n */\n\n\nDefinable.prototype.getTextSvgElement = function (displayable) {\n  return displayable.__textSvgEl;\n};\n/**\n * Get SVG element.\n *\n * @param {Displayable} displayable displayable element\n * @return {SVGElement} SVG element\n */\n\n\nDefinable.prototype.getSvgElement = function (displayable) {\n  return displayable.__svgEl;\n};\n\nvar _default = Definable;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}