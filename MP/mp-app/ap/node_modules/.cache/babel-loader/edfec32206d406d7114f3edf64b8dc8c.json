{"ast":null,"code":"function windingLine(x0, y0, x1, y1, x, y) {\n  if (y > y0 && y > y1 || y < y0 && y < y1) {\n    return 0;\n  } // Ignore horizontal line\n\n\n  if (y1 === y0) {\n    return 0;\n  }\n\n  var dir = y1 < y0 ? 1 : -1;\n  var t = (y - y0) / (y1 - y0); // Avoid winding error when intersection point is the connect point of two line of polygon\n\n  if (t === 1 || t === 0) {\n    dir = y1 < y0 ? 0.5 : -0.5;\n  }\n\n  var x_ = t * (x1 - x0) + x0; // If (x, y) on the line, considered as \"contain\".\n\n  return x_ === x ? Infinity : x_ > x ? dir : 0;\n}\n\nmodule.exports = windingLine;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/zrender/lib/contain/windingLine.js"],"names":["windingLine","x0","y0","x1","y1","x","y","dir","t","x_","Infinity","module","exports"],"mappings":"AAAA,SAASA,WAAT,CAAqBC,EAArB,EAAyBC,EAAzB,EAA6BC,EAA7B,EAAiCC,EAAjC,EAAqCC,CAArC,EAAwCC,CAAxC,EAA2C;AACzC,MAAIA,CAAC,GAAGJ,EAAJ,IAAUI,CAAC,GAAGF,EAAd,IAAoBE,CAAC,GAAGJ,EAAJ,IAAUI,CAAC,GAAGF,EAAtC,EAA0C;AACxC,WAAO,CAAP;AACD,GAHwC,CAGvC;;;AAGF,MAAIA,EAAE,KAAKF,EAAX,EAAe;AACb,WAAO,CAAP;AACD;;AAED,MAAIK,GAAG,GAAGH,EAAE,GAAGF,EAAL,GAAU,CAAV,GAAc,CAAC,CAAzB;AACA,MAAIM,CAAC,GAAG,CAACF,CAAC,GAAGJ,EAAL,KAAYE,EAAE,GAAGF,EAAjB,CAAR,CAXyC,CAWX;;AAE9B,MAAIM,CAAC,KAAK,CAAN,IAAWA,CAAC,KAAK,CAArB,EAAwB;AACtBD,IAAAA,GAAG,GAAGH,EAAE,GAAGF,EAAL,GAAU,GAAV,GAAgB,CAAC,GAAvB;AACD;;AAED,MAAIO,EAAE,GAAGD,CAAC,IAAIL,EAAE,GAAGF,EAAT,CAAD,GAAgBA,EAAzB,CAjByC,CAiBZ;;AAE7B,SAAOQ,EAAE,KAAKJ,CAAP,GAAWK,QAAX,GAAsBD,EAAE,GAAGJ,CAAL,GAASE,GAAT,GAAe,CAA5C;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiBZ,WAAjB","sourcesContent":["function windingLine(x0, y0, x1, y1, x, y) {\n  if (y > y0 && y > y1 || y < y0 && y < y1) {\n    return 0;\n  } // Ignore horizontal line\n\n\n  if (y1 === y0) {\n    return 0;\n  }\n\n  var dir = y1 < y0 ? 1 : -1;\n  var t = (y - y0) / (y1 - y0); // Avoid winding error when intersection point is the connect point of two line of polygon\n\n  if (t === 1 || t === 0) {\n    dir = y1 < y0 ? 0.5 : -0.5;\n  }\n\n  var x_ = t * (x1 - x0) + x0; // If (x, y) on the line, considered as \"contain\".\n\n  return x_ === x ? Infinity : x_ > x ? dir : 0;\n}\n\nmodule.exports = windingLine;"]},"metadata":{},"sourceType":"script"}