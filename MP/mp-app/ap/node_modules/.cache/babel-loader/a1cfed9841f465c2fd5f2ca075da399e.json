{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar SeriesModel = require(\"../../model/Series\");\n\nvar createGraphFromNodeEdge = require(\"../helper/createGraphFromNodeEdge\");\n\nvar _format = require(\"../../util/format\");\n\nvar encodeHTML = _format.encodeHTML;\n\nvar Model = require(\"../../model/Model\");\n\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar SankeySeries = SeriesModel.extend({\n  type: 'series.sankey',\n  layoutInfo: null,\n  levelModels: null,\n\n  /**\n   * Init a graph data structure from data in option series\n   *\n   * @param  {Object} option  the object used to config echarts view\n   * @return {module:echarts/data/List} storage initial data\n   */\n  getInitialData: function getInitialData(option, ecModel) {\n    var links = option.edges || option.links;\n    var nodes = option.data || option.nodes;\n    var levels = option.levels;\n    var levelModels = this.levelModels = {};\n\n    for (var i = 0; i < levels.length; i++) {\n      if (levels[i].depth != null && levels[i].depth >= 0) {\n        levelModels[levels[i].depth] = new Model(levels[i], this, ecModel);\n      } else {}\n    }\n\n    if (nodes && links) {\n      var graph = createGraphFromNodeEdge(nodes, links, this, true, beforeLink);\n      return graph.data;\n    }\n\n    function beforeLink(nodeData, edgeData) {\n      nodeData.wrapMethod('getItemModel', function (model, idx) {\n        model.customizeGetParent(function (path) {\n          var parentModel = this.parentModel;\n          var nodeDepth = parentModel.getData().getItemLayout(idx).depth;\n          var levelModel = parentModel.levelModels[nodeDepth];\n          return levelModel || this.parentModel;\n        });\n        return model;\n      });\n      edgeData.wrapMethod('getItemModel', function (model, idx) {\n        model.customizeGetParent(function (path) {\n          var parentModel = this.parentModel;\n          var edge = parentModel.getGraph().getEdgeByIndex(idx);\n          var depth = edge.node1.getLayout().depth;\n          var levelModel = parentModel.levelModels[depth];\n          return levelModel || this.parentModel;\n        });\n        return model;\n      });\n    }\n  },\n  setNodePosition: function setNodePosition(dataIndex, localPosition) {\n    var dataItem = this.option.data[dataIndex];\n    dataItem.localX = localPosition[0];\n    dataItem.localY = localPosition[1];\n  },\n\n  /**\n   * Return the graphic data structure\n   *\n   * @return {module:echarts/data/Graph} graphic data structure\n   */\n  getGraph: function getGraph() {\n    return this.getData().graph;\n  },\n\n  /**\n   * Get edge data of graphic data structure\n   *\n   * @return {module:echarts/data/List} data structure of list\n   */\n  getEdgeData: function getEdgeData() {\n    return this.getGraph().edgeData;\n  },\n\n  /**\n   * @override\n   */\n  formatTooltip: function formatTooltip(dataIndex, multipleSeries, dataType) {\n    // dataType === 'node' or empty do not show tooltip by default\n    if (dataType === 'edge') {\n      var params = this.getDataParams(dataIndex, dataType);\n      var rawDataOpt = params.data;\n      var html = rawDataOpt.source + ' -- ' + rawDataOpt.target;\n\n      if (params.value) {\n        html += ' : ' + params.value;\n      }\n\n      return encodeHTML(html);\n    } else if (dataType === 'node') {\n      var node = this.getGraph().getNodeByIndex(dataIndex);\n      var value = node.getLayout().value;\n      var name = this.getDataParams(dataIndex, dataType).data.name;\n\n      if (value) {\n        var html = name + ' : ' + value;\n      }\n\n      return encodeHTML(html);\n    }\n\n    return SankeySeries.superCall(this, 'formatTooltip', dataIndex, multipleSeries);\n  },\n  optionUpdated: function optionUpdated() {\n    var option = this.option;\n\n    if (option.focusNodeAdjacency === true) {\n      option.focusNodeAdjacency = 'allEdges';\n    }\n  },\n  // Override Series.getDataParams()\n  getDataParams: function getDataParams(dataIndex, dataType) {\n    var params = SankeySeries.superCall(this, 'getDataParams', dataIndex, dataType);\n\n    if (params.value == null && dataType === 'node') {\n      var node = this.getGraph().getNodeByIndex(dataIndex);\n      var nodeValue = node.getLayout().value;\n      params.value = nodeValue;\n    }\n\n    return params;\n  },\n  defaultOption: {\n    zlevel: 0,\n    z: 2,\n    coordinateSystem: 'view',\n    layout: null,\n    // The position of the whole view\n    left: '5%',\n    top: '5%',\n    right: '20%',\n    bottom: '5%',\n    // Value can be 'vertical'\n    orient: 'horizontal',\n    // The dx of the node\n    nodeWidth: 20,\n    // The vertical distance between two nodes\n    nodeGap: 8,\n    // Control if the node can move or not\n    draggable: true,\n    // Value can be 'inEdges', 'outEdges', 'allEdges', true (the same as 'allEdges').\n    focusNodeAdjacency: false,\n    // The number of iterations to change the position of the node\n    layoutIterations: 32,\n    label: {\n      show: true,\n      position: 'right',\n      color: '#000',\n      fontSize: 12\n    },\n    levels: [],\n    // Value can be 'left' or 'right'\n    nodeAlign: 'justify',\n    itemStyle: {\n      borderWidth: 1,\n      borderColor: '#333'\n    },\n    lineStyle: {\n      color: '#314656',\n      opacity: 0.2,\n      curveness: 0.5\n    },\n    emphasis: {\n      label: {\n        show: true\n      },\n      lineStyle: {\n        opacity: 0.5\n      }\n    },\n    animationEasing: 'linear',\n    animationDuration: 1000\n  }\n});\nvar _default = SankeySeries;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/chart/sankey/SankeySeries.js"],"names":["SeriesModel","require","createGraphFromNodeEdge","_format","encodeHTML","Model","_config","__DEV__","SankeySeries","extend","type","layoutInfo","levelModels","getInitialData","option","ecModel","links","edges","nodes","data","levels","i","length","depth","graph","beforeLink","nodeData","edgeData","wrapMethod","model","idx","customizeGetParent","path","parentModel","nodeDepth","getData","getItemLayout","levelModel","edge","getGraph","getEdgeByIndex","node1","getLayout","setNodePosition","dataIndex","localPosition","dataItem","localX","localY","getEdgeData","formatTooltip","multipleSeries","dataType","params","getDataParams","rawDataOpt","html","source","target","value","node","getNodeByIndex","name","superCall","optionUpdated","focusNodeAdjacency","nodeValue","defaultOption","zlevel","z","coordinateSystem","layout","left","top","right","bottom","orient","nodeWidth","nodeGap","draggable","layoutIterations","label","show","position","color","fontSize","nodeAlign","itemStyle","borderWidth","borderColor","lineStyle","opacity","curveness","emphasis","animationEasing","animationDuration","_default","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar SeriesModel = require(\"../../model/Series\");\n\nvar createGraphFromNodeEdge = require(\"../helper/createGraphFromNodeEdge\");\n\nvar _format = require(\"../../util/format\");\n\nvar encodeHTML = _format.encodeHTML;\n\nvar Model = require(\"../../model/Model\");\n\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar SankeySeries = SeriesModel.extend({\n  type: 'series.sankey',\n  layoutInfo: null,\n  levelModels: null,\n\n  /**\n   * Init a graph data structure from data in option series\n   *\n   * @param  {Object} option  the object used to config echarts view\n   * @return {module:echarts/data/List} storage initial data\n   */\n  getInitialData: function (option, ecModel) {\n    var links = option.edges || option.links;\n    var nodes = option.data || option.nodes;\n    var levels = option.levels;\n    var levelModels = this.levelModels = {};\n\n    for (var i = 0; i < levels.length; i++) {\n      if (levels[i].depth != null && levels[i].depth >= 0) {\n        levelModels[levels[i].depth] = new Model(levels[i], this, ecModel);\n      } else {}\n    }\n\n    if (nodes && links) {\n      var graph = createGraphFromNodeEdge(nodes, links, this, true, beforeLink);\n      return graph.data;\n    }\n\n    function beforeLink(nodeData, edgeData) {\n      nodeData.wrapMethod('getItemModel', function (model, idx) {\n        model.customizeGetParent(function (path) {\n          var parentModel = this.parentModel;\n          var nodeDepth = parentModel.getData().getItemLayout(idx).depth;\n          var levelModel = parentModel.levelModels[nodeDepth];\n          return levelModel || this.parentModel;\n        });\n        return model;\n      });\n      edgeData.wrapMethod('getItemModel', function (model, idx) {\n        model.customizeGetParent(function (path) {\n          var parentModel = this.parentModel;\n          var edge = parentModel.getGraph().getEdgeByIndex(idx);\n          var depth = edge.node1.getLayout().depth;\n          var levelModel = parentModel.levelModels[depth];\n          return levelModel || this.parentModel;\n        });\n        return model;\n      });\n    }\n  },\n  setNodePosition: function (dataIndex, localPosition) {\n    var dataItem = this.option.data[dataIndex];\n    dataItem.localX = localPosition[0];\n    dataItem.localY = localPosition[1];\n  },\n\n  /**\n   * Return the graphic data structure\n   *\n   * @return {module:echarts/data/Graph} graphic data structure\n   */\n  getGraph: function () {\n    return this.getData().graph;\n  },\n\n  /**\n   * Get edge data of graphic data structure\n   *\n   * @return {module:echarts/data/List} data structure of list\n   */\n  getEdgeData: function () {\n    return this.getGraph().edgeData;\n  },\n\n  /**\n   * @override\n   */\n  formatTooltip: function (dataIndex, multipleSeries, dataType) {\n    // dataType === 'node' or empty do not show tooltip by default\n    if (dataType === 'edge') {\n      var params = this.getDataParams(dataIndex, dataType);\n      var rawDataOpt = params.data;\n      var html = rawDataOpt.source + ' -- ' + rawDataOpt.target;\n\n      if (params.value) {\n        html += ' : ' + params.value;\n      }\n\n      return encodeHTML(html);\n    } else if (dataType === 'node') {\n      var node = this.getGraph().getNodeByIndex(dataIndex);\n      var value = node.getLayout().value;\n      var name = this.getDataParams(dataIndex, dataType).data.name;\n\n      if (value) {\n        var html = name + ' : ' + value;\n      }\n\n      return encodeHTML(html);\n    }\n\n    return SankeySeries.superCall(this, 'formatTooltip', dataIndex, multipleSeries);\n  },\n  optionUpdated: function () {\n    var option = this.option;\n\n    if (option.focusNodeAdjacency === true) {\n      option.focusNodeAdjacency = 'allEdges';\n    }\n  },\n  // Override Series.getDataParams()\n  getDataParams: function (dataIndex, dataType) {\n    var params = SankeySeries.superCall(this, 'getDataParams', dataIndex, dataType);\n\n    if (params.value == null && dataType === 'node') {\n      var node = this.getGraph().getNodeByIndex(dataIndex);\n      var nodeValue = node.getLayout().value;\n      params.value = nodeValue;\n    }\n\n    return params;\n  },\n  defaultOption: {\n    zlevel: 0,\n    z: 2,\n    coordinateSystem: 'view',\n    layout: null,\n    // The position of the whole view\n    left: '5%',\n    top: '5%',\n    right: '20%',\n    bottom: '5%',\n    // Value can be 'vertical'\n    orient: 'horizontal',\n    // The dx of the node\n    nodeWidth: 20,\n    // The vertical distance between two nodes\n    nodeGap: 8,\n    // Control if the node can move or not\n    draggable: true,\n    // Value can be 'inEdges', 'outEdges', 'allEdges', true (the same as 'allEdges').\n    focusNodeAdjacency: false,\n    // The number of iterations to change the position of the node\n    layoutIterations: 32,\n    label: {\n      show: true,\n      position: 'right',\n      color: '#000',\n      fontSize: 12\n    },\n    levels: [],\n    // Value can be 'left' or 'right'\n    nodeAlign: 'justify',\n    itemStyle: {\n      borderWidth: 1,\n      borderColor: '#333'\n    },\n    lineStyle: {\n      color: '#314656',\n      opacity: 0.2,\n      curveness: 0.5\n    },\n    emphasis: {\n      label: {\n        show: true\n      },\n      lineStyle: {\n        opacity: 0.5\n      }\n    },\n    animationEasing: 'linear',\n    animationDuration: 1000\n  }\n});\nvar _default = SankeySeries;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}