{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _util = require(\"zrender/lib/core/util\");\n\nvar each = _util.each;\nvar map = _util.map;\n\nvar _number = require(\"../util/number\");\n\nvar linearMap = _number.linearMap;\nvar _getPixelPrecision = _number.getPixelPrecision;\nvar round = _number.round;\n\nvar _axisTickLabelBuilder = require(\"./axisTickLabelBuilder\");\n\nvar createAxisTicks = _axisTickLabelBuilder.createAxisTicks;\nvar createAxisLabels = _axisTickLabelBuilder.createAxisLabels;\nvar _calculateCategoryInterval = _axisTickLabelBuilder.calculateCategoryInterval;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar NORMALIZED_EXTENT = [0, 1];\n/**\n * Base class of Axis.\n * @constructor\n */\n\nvar Axis = function Axis(dim, scale, extent) {\n  /**\n   * Axis dimension. Such as 'x', 'y', 'z', 'angle', 'radius'.\n   * @type {string}\n   */\n  this.dim = dim;\n  /**\n   * Axis scale\n   * @type {module:echarts/coord/scale/*}\n   */\n\n  this.scale = scale;\n  /**\n   * @type {Array.<number>}\n   * @private\n   */\n\n  this._extent = extent || [0, 0];\n  /**\n   * @type {boolean}\n   */\n\n  this.inverse = false;\n  /**\n   * Usually true when axis has a ordinal scale\n   * @type {boolean}\n   */\n\n  this.onBand = false;\n};\n\nAxis.prototype = {\n  constructor: Axis,\n\n  /**\n   * If axis extent contain given coord\n   * @param {number} coord\n   * @return {boolean}\n   */\n  contain: function contain(coord) {\n    var extent = this._extent;\n    var min = Math.min(extent[0], extent[1]);\n    var max = Math.max(extent[0], extent[1]);\n    return coord >= min && coord <= max;\n  },\n\n  /**\n   * If axis extent contain given data\n   * @param {number} data\n   * @return {boolean}\n   */\n  containData: function containData(data) {\n    return this.scale.contain(data);\n  },\n\n  /**\n   * Get coord extent.\n   * @return {Array.<number>}\n   */\n  getExtent: function getExtent() {\n    return this._extent.slice();\n  },\n\n  /**\n   * Get precision used for formatting\n   * @param {Array.<number>} [dataExtent]\n   * @return {number}\n   */\n  getPixelPrecision: function getPixelPrecision(dataExtent) {\n    return _getPixelPrecision(dataExtent || this.scale.getExtent(), this._extent);\n  },\n\n  /**\n   * Set coord extent\n   * @param {number} start\n   * @param {number} end\n   */\n  setExtent: function setExtent(start, end) {\n    var extent = this._extent;\n    extent[0] = start;\n    extent[1] = end;\n  },\n\n  /**\n   * Convert data to coord. Data is the rank if it has an ordinal scale\n   * @param {number} data\n   * @param  {boolean} clamp\n   * @return {number}\n   */\n  dataToCoord: function dataToCoord(data, clamp) {\n    var extent = this._extent;\n    var scale = this.scale;\n    data = scale.normalize(data);\n\n    if (this.onBand && scale.type === 'ordinal') {\n      extent = extent.slice();\n      fixExtentWithBands(extent, scale.count());\n    }\n\n    return linearMap(data, NORMALIZED_EXTENT, extent, clamp);\n  },\n\n  /**\n   * Convert coord to data. Data is the rank if it has an ordinal scale\n   * @param {number} coord\n   * @param  {boolean} clamp\n   * @return {number}\n   */\n  coordToData: function coordToData(coord, clamp) {\n    var extent = this._extent;\n    var scale = this.scale;\n\n    if (this.onBand && scale.type === 'ordinal') {\n      extent = extent.slice();\n      fixExtentWithBands(extent, scale.count());\n    }\n\n    var t = linearMap(coord, extent, NORMALIZED_EXTENT, clamp);\n    return this.scale.scale(t);\n  },\n\n  /**\n   * Convert pixel point to data in axis\n   * @param {Array.<number>} point\n   * @param  {boolean} clamp\n   * @return {number} data\n   */\n  pointToData: function pointToData(point, clamp) {// Should be implemented in derived class if necessary.\n  },\n\n  /**\n   * Different from `zrUtil.map(axis.getTicks(), axis.dataToCoord, axis)`,\n   * `axis.getTicksCoords` considers `onBand`, which is used by\n   * `boundaryGap:true` of category axis and splitLine and splitArea.\n   * @param {Object} [opt]\n   * @param {Model} [opt.tickModel=axis.model.getModel('axisTick')]\n   * @param {boolean} [opt.clamp] If `true`, the first and the last\n   *        tick must be at the axis end points. Otherwise, clip ticks\n   *        that outside the axis extent.\n   * @return {Array.<Object>} [{\n   *     coord: ...,\n   *     tickValue: ...\n   * }, ...]\n   */\n  getTicksCoords: function getTicksCoords(opt) {\n    opt = opt || {};\n    var tickModel = opt.tickModel || this.getTickModel();\n    var result = createAxisTicks(this, tickModel);\n    var ticks = result.ticks;\n    var ticksCoords = map(ticks, function (tickValue) {\n      return {\n        coord: this.dataToCoord(tickValue),\n        tickValue: tickValue\n      };\n    }, this);\n    var alignWithLabel = tickModel.get('alignWithLabel');\n    fixOnBandTicksCoords(this, ticksCoords, alignWithLabel, opt.clamp);\n    return ticksCoords;\n  },\n\n  /**\n   * @return {Array.<Array.<Object>>} [{ coord: ..., tickValue: ...}]\n   */\n  getMinorTicksCoords: function getMinorTicksCoords() {\n    if (this.scale.type === 'ordinal') {\n      // Category axis doesn't support minor ticks\n      return [];\n    }\n\n    var minorTickModel = this.model.getModel('minorTick');\n    var splitNumber = minorTickModel.get('splitNumber'); // Protection.\n\n    if (!(splitNumber > 0 && splitNumber < 100)) {\n      splitNumber = 5;\n    }\n\n    var minorTicks = this.scale.getMinorTicks(splitNumber);\n    var minorTicksCoords = map(minorTicks, function (minorTicksGroup) {\n      return map(minorTicksGroup, function (minorTick) {\n        return {\n          coord: this.dataToCoord(minorTick),\n          tickValue: minorTick\n        };\n      }, this);\n    }, this);\n    return minorTicksCoords;\n  },\n\n  /**\n   * @return {Array.<Object>} [{\n   *     formattedLabel: string,\n   *     rawLabel: axis.scale.getLabel(tickValue)\n   *     tickValue: number\n   * }, ...]\n   */\n  getViewLabels: function getViewLabels() {\n    return createAxisLabels(this).labels;\n  },\n\n  /**\n   * @return {module:echarts/coord/model/Model}\n   */\n  getLabelModel: function getLabelModel() {\n    return this.model.getModel('axisLabel');\n  },\n\n  /**\n   * Notice here we only get the default tick model. For splitLine\n   * or splitArea, we should pass the splitLineModel or splitAreaModel\n   * manually when calling `getTicksCoords`.\n   * In GL, this method may be overrided to:\n   * `axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));`\n   * @return {module:echarts/coord/model/Model}\n   */\n  getTickModel: function getTickModel() {\n    return this.model.getModel('axisTick');\n  },\n\n  /**\n   * Get width of band\n   * @return {number}\n   */\n  getBandWidth: function getBandWidth() {\n    var axisExtent = this._extent;\n    var dataExtent = this.scale.getExtent();\n    var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0); // Fix #2728, avoid NaN when only one data.\n\n    len === 0 && (len = 1);\n    var size = Math.abs(axisExtent[1] - axisExtent[0]);\n    return Math.abs(size) / len;\n  },\n\n  /**\n   * @abstract\n   * @return {boolean} Is horizontal\n   */\n  isHorizontal: null,\n\n  /**\n   * @abstract\n   * @return {number} Get axis rotate, by degree.\n   */\n  getRotate: null,\n\n  /**\n   * Only be called in category axis.\n   * Can be overrided, consider other axes like in 3D.\n   * @return {number} Auto interval for cateogry axis tick and label\n   */\n  calculateCategoryInterval: function calculateCategoryInterval() {\n    return _calculateCategoryInterval(this);\n  }\n};\n\nfunction fixExtentWithBands(extent, nTick) {\n  var size = extent[1] - extent[0];\n  var len = nTick;\n  var margin = size / len / 2;\n  extent[0] += margin;\n  extent[1] -= margin;\n} // If axis has labels [1, 2, 3, 4]. Bands on the axis are\n// |---1---|---2---|---3---|---4---|.\n// So the displayed ticks and splitLine/splitArea should between\n// each data item, otherwise cause misleading (e.g., split tow bars\n// of a single data item when there are two bar series).\n// Also consider if tickCategoryInterval > 0 and onBand, ticks and\n// splitLine/spliteArea should layout appropriately corresponding\n// to displayed labels. (So we should not use `getBandWidth` in this\n// case).\n\n\nfunction fixOnBandTicksCoords(axis, ticksCoords, alignWithLabel, clamp) {\n  var ticksLen = ticksCoords.length;\n\n  if (!axis.onBand || alignWithLabel || !ticksLen) {\n    return;\n  }\n\n  var axisExtent = axis.getExtent();\n  var last;\n  var diffSize;\n\n  if (ticksLen === 1) {\n    ticksCoords[0].coord = axisExtent[0];\n    last = ticksCoords[1] = {\n      coord: axisExtent[0]\n    };\n  } else {\n    var crossLen = ticksCoords[ticksLen - 1].tickValue - ticksCoords[0].tickValue;\n    var shift = (ticksCoords[ticksLen - 1].coord - ticksCoords[0].coord) / crossLen;\n    each(ticksCoords, function (ticksItem) {\n      ticksItem.coord -= shift / 2;\n    });\n    var dataExtent = axis.scale.getExtent();\n    diffSize = 1 + dataExtent[1] - ticksCoords[ticksLen - 1].tickValue;\n    last = {\n      coord: ticksCoords[ticksLen - 1].coord + shift * diffSize\n    };\n    ticksCoords.push(last);\n  }\n\n  var inverse = axisExtent[0] > axisExtent[1]; // Handling clamp.\n\n  if (littleThan(ticksCoords[0].coord, axisExtent[0])) {\n    clamp ? ticksCoords[0].coord = axisExtent[0] : ticksCoords.shift();\n  }\n\n  if (clamp && littleThan(axisExtent[0], ticksCoords[0].coord)) {\n    ticksCoords.unshift({\n      coord: axisExtent[0]\n    });\n  }\n\n  if (littleThan(axisExtent[1], last.coord)) {\n    clamp ? last.coord = axisExtent[1] : ticksCoords.pop();\n  }\n\n  if (clamp && littleThan(last.coord, axisExtent[1])) {\n    ticksCoords.push({\n      coord: axisExtent[1]\n    });\n  }\n\n  function littleThan(a, b) {\n    // Avoid rounding error cause calculated tick coord different with extent.\n    // It may cause an extra unecessary tick added.\n    a = round(a);\n    b = round(b);\n    return inverse ? a > b : a < b;\n  }\n}\n\nvar _default = Axis;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/coord/Axis.js"],"names":["_util","require","each","map","_number","linearMap","getPixelPrecision","round","_axisTickLabelBuilder","createAxisTicks","createAxisLabels","calculateCategoryInterval","NORMALIZED_EXTENT","Axis","dim","scale","extent","_extent","inverse","onBand","prototype","constructor","contain","coord","min","Math","max","containData","data","getExtent","slice","dataExtent","setExtent","start","end","dataToCoord","clamp","normalize","type","fixExtentWithBands","count","coordToData","t","pointToData","point","getTicksCoords","opt","tickModel","getTickModel","result","ticks","ticksCoords","tickValue","alignWithLabel","get","fixOnBandTicksCoords","getMinorTicksCoords","minorTickModel","model","getModel","splitNumber","minorTicks","getMinorTicks","minorTicksCoords","minorTicksGroup","minorTick","getViewLabels","labels","getLabelModel","getBandWidth","axisExtent","len","size","abs","isHorizontal","getRotate","nTick","margin","axis","ticksLen","length","last","diffSize","crossLen","shift","ticksItem","push","littleThan","unshift","pop","a","b","_default","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _util = require(\"zrender/lib/core/util\");\n\nvar each = _util.each;\nvar map = _util.map;\n\nvar _number = require(\"../util/number\");\n\nvar linearMap = _number.linearMap;\nvar getPixelPrecision = _number.getPixelPrecision;\nvar round = _number.round;\n\nvar _axisTickLabelBuilder = require(\"./axisTickLabelBuilder\");\n\nvar createAxisTicks = _axisTickLabelBuilder.createAxisTicks;\nvar createAxisLabels = _axisTickLabelBuilder.createAxisLabels;\nvar calculateCategoryInterval = _axisTickLabelBuilder.calculateCategoryInterval;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar NORMALIZED_EXTENT = [0, 1];\n/**\n * Base class of Axis.\n * @constructor\n */\n\nvar Axis = function (dim, scale, extent) {\n  /**\n   * Axis dimension. Such as 'x', 'y', 'z', 'angle', 'radius'.\n   * @type {string}\n   */\n  this.dim = dim;\n  /**\n   * Axis scale\n   * @type {module:echarts/coord/scale/*}\n   */\n\n  this.scale = scale;\n  /**\n   * @type {Array.<number>}\n   * @private\n   */\n\n  this._extent = extent || [0, 0];\n  /**\n   * @type {boolean}\n   */\n\n  this.inverse = false;\n  /**\n   * Usually true when axis has a ordinal scale\n   * @type {boolean}\n   */\n\n  this.onBand = false;\n};\n\nAxis.prototype = {\n  constructor: Axis,\n\n  /**\n   * If axis extent contain given coord\n   * @param {number} coord\n   * @return {boolean}\n   */\n  contain: function (coord) {\n    var extent = this._extent;\n    var min = Math.min(extent[0], extent[1]);\n    var max = Math.max(extent[0], extent[1]);\n    return coord >= min && coord <= max;\n  },\n\n  /**\n   * If axis extent contain given data\n   * @param {number} data\n   * @return {boolean}\n   */\n  containData: function (data) {\n    return this.scale.contain(data);\n  },\n\n  /**\n   * Get coord extent.\n   * @return {Array.<number>}\n   */\n  getExtent: function () {\n    return this._extent.slice();\n  },\n\n  /**\n   * Get precision used for formatting\n   * @param {Array.<number>} [dataExtent]\n   * @return {number}\n   */\n  getPixelPrecision: function (dataExtent) {\n    return getPixelPrecision(dataExtent || this.scale.getExtent(), this._extent);\n  },\n\n  /**\n   * Set coord extent\n   * @param {number} start\n   * @param {number} end\n   */\n  setExtent: function (start, end) {\n    var extent = this._extent;\n    extent[0] = start;\n    extent[1] = end;\n  },\n\n  /**\n   * Convert data to coord. Data is the rank if it has an ordinal scale\n   * @param {number} data\n   * @param  {boolean} clamp\n   * @return {number}\n   */\n  dataToCoord: function (data, clamp) {\n    var extent = this._extent;\n    var scale = this.scale;\n    data = scale.normalize(data);\n\n    if (this.onBand && scale.type === 'ordinal') {\n      extent = extent.slice();\n      fixExtentWithBands(extent, scale.count());\n    }\n\n    return linearMap(data, NORMALIZED_EXTENT, extent, clamp);\n  },\n\n  /**\n   * Convert coord to data. Data is the rank if it has an ordinal scale\n   * @param {number} coord\n   * @param  {boolean} clamp\n   * @return {number}\n   */\n  coordToData: function (coord, clamp) {\n    var extent = this._extent;\n    var scale = this.scale;\n\n    if (this.onBand && scale.type === 'ordinal') {\n      extent = extent.slice();\n      fixExtentWithBands(extent, scale.count());\n    }\n\n    var t = linearMap(coord, extent, NORMALIZED_EXTENT, clamp);\n    return this.scale.scale(t);\n  },\n\n  /**\n   * Convert pixel point to data in axis\n   * @param {Array.<number>} point\n   * @param  {boolean} clamp\n   * @return {number} data\n   */\n  pointToData: function (point, clamp) {// Should be implemented in derived class if necessary.\n  },\n\n  /**\n   * Different from `zrUtil.map(axis.getTicks(), axis.dataToCoord, axis)`,\n   * `axis.getTicksCoords` considers `onBand`, which is used by\n   * `boundaryGap:true` of category axis and splitLine and splitArea.\n   * @param {Object} [opt]\n   * @param {Model} [opt.tickModel=axis.model.getModel('axisTick')]\n   * @param {boolean} [opt.clamp] If `true`, the first and the last\n   *        tick must be at the axis end points. Otherwise, clip ticks\n   *        that outside the axis extent.\n   * @return {Array.<Object>} [{\n   *     coord: ...,\n   *     tickValue: ...\n   * }, ...]\n   */\n  getTicksCoords: function (opt) {\n    opt = opt || {};\n    var tickModel = opt.tickModel || this.getTickModel();\n    var result = createAxisTicks(this, tickModel);\n    var ticks = result.ticks;\n    var ticksCoords = map(ticks, function (tickValue) {\n      return {\n        coord: this.dataToCoord(tickValue),\n        tickValue: tickValue\n      };\n    }, this);\n    var alignWithLabel = tickModel.get('alignWithLabel');\n    fixOnBandTicksCoords(this, ticksCoords, alignWithLabel, opt.clamp);\n    return ticksCoords;\n  },\n\n  /**\n   * @return {Array.<Array.<Object>>} [{ coord: ..., tickValue: ...}]\n   */\n  getMinorTicksCoords: function () {\n    if (this.scale.type === 'ordinal') {\n      // Category axis doesn't support minor ticks\n      return [];\n    }\n\n    var minorTickModel = this.model.getModel('minorTick');\n    var splitNumber = minorTickModel.get('splitNumber'); // Protection.\n\n    if (!(splitNumber > 0 && splitNumber < 100)) {\n      splitNumber = 5;\n    }\n\n    var minorTicks = this.scale.getMinorTicks(splitNumber);\n    var minorTicksCoords = map(minorTicks, function (minorTicksGroup) {\n      return map(minorTicksGroup, function (minorTick) {\n        return {\n          coord: this.dataToCoord(minorTick),\n          tickValue: minorTick\n        };\n      }, this);\n    }, this);\n    return minorTicksCoords;\n  },\n\n  /**\n   * @return {Array.<Object>} [{\n   *     formattedLabel: string,\n   *     rawLabel: axis.scale.getLabel(tickValue)\n   *     tickValue: number\n   * }, ...]\n   */\n  getViewLabels: function () {\n    return createAxisLabels(this).labels;\n  },\n\n  /**\n   * @return {module:echarts/coord/model/Model}\n   */\n  getLabelModel: function () {\n    return this.model.getModel('axisLabel');\n  },\n\n  /**\n   * Notice here we only get the default tick model. For splitLine\n   * or splitArea, we should pass the splitLineModel or splitAreaModel\n   * manually when calling `getTicksCoords`.\n   * In GL, this method may be overrided to:\n   * `axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));`\n   * @return {module:echarts/coord/model/Model}\n   */\n  getTickModel: function () {\n    return this.model.getModel('axisTick');\n  },\n\n  /**\n   * Get width of band\n   * @return {number}\n   */\n  getBandWidth: function () {\n    var axisExtent = this._extent;\n    var dataExtent = this.scale.getExtent();\n    var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0); // Fix #2728, avoid NaN when only one data.\n\n    len === 0 && (len = 1);\n    var size = Math.abs(axisExtent[1] - axisExtent[0]);\n    return Math.abs(size) / len;\n  },\n\n  /**\n   * @abstract\n   * @return {boolean} Is horizontal\n   */\n  isHorizontal: null,\n\n  /**\n   * @abstract\n   * @return {number} Get axis rotate, by degree.\n   */\n  getRotate: null,\n\n  /**\n   * Only be called in category axis.\n   * Can be overrided, consider other axes like in 3D.\n   * @return {number} Auto interval for cateogry axis tick and label\n   */\n  calculateCategoryInterval: function () {\n    return calculateCategoryInterval(this);\n  }\n};\n\nfunction fixExtentWithBands(extent, nTick) {\n  var size = extent[1] - extent[0];\n  var len = nTick;\n  var margin = size / len / 2;\n  extent[0] += margin;\n  extent[1] -= margin;\n} // If axis has labels [1, 2, 3, 4]. Bands on the axis are\n// |---1---|---2---|---3---|---4---|.\n// So the displayed ticks and splitLine/splitArea should between\n// each data item, otherwise cause misleading (e.g., split tow bars\n// of a single data item when there are two bar series).\n// Also consider if tickCategoryInterval > 0 and onBand, ticks and\n// splitLine/spliteArea should layout appropriately corresponding\n// to displayed labels. (So we should not use `getBandWidth` in this\n// case).\n\n\nfunction fixOnBandTicksCoords(axis, ticksCoords, alignWithLabel, clamp) {\n  var ticksLen = ticksCoords.length;\n\n  if (!axis.onBand || alignWithLabel || !ticksLen) {\n    return;\n  }\n\n  var axisExtent = axis.getExtent();\n  var last;\n  var diffSize;\n\n  if (ticksLen === 1) {\n    ticksCoords[0].coord = axisExtent[0];\n    last = ticksCoords[1] = {\n      coord: axisExtent[0]\n    };\n  } else {\n    var crossLen = ticksCoords[ticksLen - 1].tickValue - ticksCoords[0].tickValue;\n    var shift = (ticksCoords[ticksLen - 1].coord - ticksCoords[0].coord) / crossLen;\n    each(ticksCoords, function (ticksItem) {\n      ticksItem.coord -= shift / 2;\n    });\n    var dataExtent = axis.scale.getExtent();\n    diffSize = 1 + dataExtent[1] - ticksCoords[ticksLen - 1].tickValue;\n    last = {\n      coord: ticksCoords[ticksLen - 1].coord + shift * diffSize\n    };\n    ticksCoords.push(last);\n  }\n\n  var inverse = axisExtent[0] > axisExtent[1]; // Handling clamp.\n\n  if (littleThan(ticksCoords[0].coord, axisExtent[0])) {\n    clamp ? ticksCoords[0].coord = axisExtent[0] : ticksCoords.shift();\n  }\n\n  if (clamp && littleThan(axisExtent[0], ticksCoords[0].coord)) {\n    ticksCoords.unshift({\n      coord: axisExtent[0]\n    });\n  }\n\n  if (littleThan(axisExtent[1], last.coord)) {\n    clamp ? last.coord = axisExtent[1] : ticksCoords.pop();\n  }\n\n  if (clamp && littleThan(last.coord, axisExtent[1])) {\n    ticksCoords.push({\n      coord: axisExtent[1]\n    });\n  }\n\n  function littleThan(a, b) {\n    // Avoid rounding error cause calculated tick coord different with extent.\n    // It may cause an extra unecessary tick added.\n    a = round(a);\n    b = round(b);\n    return inverse ? a > b : a < b;\n  }\n}\n\nvar _default = Axis;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}