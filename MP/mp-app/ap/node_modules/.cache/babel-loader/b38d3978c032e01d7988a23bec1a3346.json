{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar Scale = require(\"./Scale\");\n\nvar numberUtil = require(\"../util/number\");\n\nvar IntervalScale = require(\"./Interval\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Log scale\n * @module echarts/scale/Log\n */\n// Use some method of IntervalScale\n\n\nvar scaleProto = Scale.prototype;\nvar intervalScaleProto = IntervalScale.prototype;\nvar getPrecisionSafe = numberUtil.getPrecisionSafe;\nvar roundingErrorFix = numberUtil.round;\nvar mathFloor = Math.floor;\nvar mathCeil = Math.ceil;\nvar mathPow = Math.pow;\nvar mathLog = Math.log;\nvar LogScale = Scale.extend({\n  type: 'log',\n  base: 10,\n  $constructor: function $constructor() {\n    Scale.apply(this, arguments);\n    this._originalScale = new IntervalScale();\n  },\n\n  /**\n   * @param {boolean} [expandToNicedExtent=false] If expand the ticks to niced extent.\n   * @return {Array.<number>}\n   */\n  getTicks: function getTicks(expandToNicedExtent) {\n    var originalScale = this._originalScale;\n    var extent = this._extent;\n    var originalExtent = originalScale.getExtent();\n    return zrUtil.map(intervalScaleProto.getTicks.call(this, expandToNicedExtent), function (val) {\n      var powVal = numberUtil.round(mathPow(this.base, val)); // Fix #4158\n\n      powVal = val === extent[0] && originalScale.__fixMin ? fixRoundingError(powVal, originalExtent[0]) : powVal;\n      powVal = val === extent[1] && originalScale.__fixMax ? fixRoundingError(powVal, originalExtent[1]) : powVal;\n      return powVal;\n    }, this);\n  },\n\n  /**\n   * @param {number} splitNumber\n   * @return {Array.<Array.<number>>}\n   */\n  getMinorTicks: intervalScaleProto.getMinorTicks,\n\n  /**\n   * @param {number} val\n   * @return {string}\n   */\n  getLabel: intervalScaleProto.getLabel,\n\n  /**\n   * @param  {number} val\n   * @return {number}\n   */\n  scale: function scale(val) {\n    val = scaleProto.scale.call(this, val);\n    return mathPow(this.base, val);\n  },\n\n  /**\n   * @param {number} start\n   * @param {number} end\n   */\n  setExtent: function setExtent(start, end) {\n    var base = this.base;\n    start = mathLog(start) / mathLog(base);\n    end = mathLog(end) / mathLog(base);\n    intervalScaleProto.setExtent.call(this, start, end);\n  },\n\n  /**\n   * @return {number} end\n   */\n  getExtent: function getExtent() {\n    var base = this.base;\n    var extent = scaleProto.getExtent.call(this);\n    extent[0] = mathPow(base, extent[0]);\n    extent[1] = mathPow(base, extent[1]); // Fix #4158\n\n    var originalScale = this._originalScale;\n    var originalExtent = originalScale.getExtent();\n    originalScale.__fixMin && (extent[0] = fixRoundingError(extent[0], originalExtent[0]));\n    originalScale.__fixMax && (extent[1] = fixRoundingError(extent[1], originalExtent[1]));\n    return extent;\n  },\n\n  /**\n   * @param  {Array.<number>} extent\n   */\n  unionExtent: function unionExtent(extent) {\n    this._originalScale.unionExtent(extent);\n\n    var base = this.base;\n    extent[0] = mathLog(extent[0]) / mathLog(base);\n    extent[1] = mathLog(extent[1]) / mathLog(base);\n    scaleProto.unionExtent.call(this, extent);\n  },\n\n  /**\n   * @override\n   */\n  unionExtentFromData: function unionExtentFromData(data, dim) {\n    // TODO\n    // filter value that <= 0\n    this.unionExtent(data.getApproximateExtent(dim));\n  },\n\n  /**\n   * Update interval and extent of intervals for nice ticks\n   * @param  {number} [approxTickNum = 10] Given approx tick number\n   */\n  niceTicks: function niceTicks(approxTickNum) {\n    approxTickNum = approxTickNum || 10;\n    var extent = this._extent;\n    var span = extent[1] - extent[0];\n\n    if (span === Infinity || span <= 0) {\n      return;\n    }\n\n    var interval = numberUtil.quantity(span);\n    var err = approxTickNum / span * interval; // Filter ticks to get closer to the desired count.\n\n    if (err <= 0.5) {\n      interval *= 10;\n    } // Interval should be integer\n\n\n    while (!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0) {\n      interval *= 10;\n    }\n\n    var niceExtent = [numberUtil.round(mathCeil(extent[0] / interval) * interval), numberUtil.round(mathFloor(extent[1] / interval) * interval)];\n    this._interval = interval;\n    this._niceExtent = niceExtent;\n  },\n\n  /**\n   * Nice extent.\n   * @override\n   */\n  niceExtent: function niceExtent(opt) {\n    intervalScaleProto.niceExtent.call(this, opt);\n    var originalScale = this._originalScale;\n    originalScale.__fixMin = opt.fixMin;\n    originalScale.__fixMax = opt.fixMax;\n  }\n});\nzrUtil.each(['contain', 'normalize'], function (methodName) {\n  LogScale.prototype[methodName] = function (val) {\n    val = mathLog(val) / mathLog(this.base);\n    return scaleProto[methodName].call(this, val);\n  };\n});\n\nLogScale.create = function () {\n  return new LogScale();\n};\n\nfunction fixRoundingError(val, originalVal) {\n  return roundingErrorFix(val, getPrecisionSafe(originalVal));\n}\n\nvar _default = LogScale;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/scale/Log.js"],"names":["zrUtil","require","Scale","numberUtil","IntervalScale","scaleProto","prototype","intervalScaleProto","getPrecisionSafe","roundingErrorFix","round","mathFloor","Math","floor","mathCeil","ceil","mathPow","pow","mathLog","log","LogScale","extend","type","base","$constructor","apply","arguments","_originalScale","getTicks","expandToNicedExtent","originalScale","extent","_extent","originalExtent","getExtent","map","call","val","powVal","__fixMin","fixRoundingError","__fixMax","getMinorTicks","getLabel","scale","setExtent","start","end","unionExtent","unionExtentFromData","data","dim","getApproximateExtent","niceTicks","approxTickNum","span","Infinity","interval","quantity","err","isNaN","abs","niceExtent","_interval","_niceExtent","opt","fixMin","fixMax","each","methodName","create","originalVal","_default","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar Scale = require(\"./Scale\");\n\nvar numberUtil = require(\"../util/number\");\n\nvar IntervalScale = require(\"./Interval\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Log scale\n * @module echarts/scale/Log\n */\n// Use some method of IntervalScale\nvar scaleProto = Scale.prototype;\nvar intervalScaleProto = IntervalScale.prototype;\nvar getPrecisionSafe = numberUtil.getPrecisionSafe;\nvar roundingErrorFix = numberUtil.round;\nvar mathFloor = Math.floor;\nvar mathCeil = Math.ceil;\nvar mathPow = Math.pow;\nvar mathLog = Math.log;\nvar LogScale = Scale.extend({\n  type: 'log',\n  base: 10,\n  $constructor: function () {\n    Scale.apply(this, arguments);\n    this._originalScale = new IntervalScale();\n  },\n\n  /**\n   * @param {boolean} [expandToNicedExtent=false] If expand the ticks to niced extent.\n   * @return {Array.<number>}\n   */\n  getTicks: function (expandToNicedExtent) {\n    var originalScale = this._originalScale;\n    var extent = this._extent;\n    var originalExtent = originalScale.getExtent();\n    return zrUtil.map(intervalScaleProto.getTicks.call(this, expandToNicedExtent), function (val) {\n      var powVal = numberUtil.round(mathPow(this.base, val)); // Fix #4158\n\n      powVal = val === extent[0] && originalScale.__fixMin ? fixRoundingError(powVal, originalExtent[0]) : powVal;\n      powVal = val === extent[1] && originalScale.__fixMax ? fixRoundingError(powVal, originalExtent[1]) : powVal;\n      return powVal;\n    }, this);\n  },\n\n  /**\n   * @param {number} splitNumber\n   * @return {Array.<Array.<number>>}\n   */\n  getMinorTicks: intervalScaleProto.getMinorTicks,\n\n  /**\n   * @param {number} val\n   * @return {string}\n   */\n  getLabel: intervalScaleProto.getLabel,\n\n  /**\n   * @param  {number} val\n   * @return {number}\n   */\n  scale: function (val) {\n    val = scaleProto.scale.call(this, val);\n    return mathPow(this.base, val);\n  },\n\n  /**\n   * @param {number} start\n   * @param {number} end\n   */\n  setExtent: function (start, end) {\n    var base = this.base;\n    start = mathLog(start) / mathLog(base);\n    end = mathLog(end) / mathLog(base);\n    intervalScaleProto.setExtent.call(this, start, end);\n  },\n\n  /**\n   * @return {number} end\n   */\n  getExtent: function () {\n    var base = this.base;\n    var extent = scaleProto.getExtent.call(this);\n    extent[0] = mathPow(base, extent[0]);\n    extent[1] = mathPow(base, extent[1]); // Fix #4158\n\n    var originalScale = this._originalScale;\n    var originalExtent = originalScale.getExtent();\n    originalScale.__fixMin && (extent[0] = fixRoundingError(extent[0], originalExtent[0]));\n    originalScale.__fixMax && (extent[1] = fixRoundingError(extent[1], originalExtent[1]));\n    return extent;\n  },\n\n  /**\n   * @param  {Array.<number>} extent\n   */\n  unionExtent: function (extent) {\n    this._originalScale.unionExtent(extent);\n\n    var base = this.base;\n    extent[0] = mathLog(extent[0]) / mathLog(base);\n    extent[1] = mathLog(extent[1]) / mathLog(base);\n    scaleProto.unionExtent.call(this, extent);\n  },\n\n  /**\n   * @override\n   */\n  unionExtentFromData: function (data, dim) {\n    // TODO\n    // filter value that <= 0\n    this.unionExtent(data.getApproximateExtent(dim));\n  },\n\n  /**\n   * Update interval and extent of intervals for nice ticks\n   * @param  {number} [approxTickNum = 10] Given approx tick number\n   */\n  niceTicks: function (approxTickNum) {\n    approxTickNum = approxTickNum || 10;\n    var extent = this._extent;\n    var span = extent[1] - extent[0];\n\n    if (span === Infinity || span <= 0) {\n      return;\n    }\n\n    var interval = numberUtil.quantity(span);\n    var err = approxTickNum / span * interval; // Filter ticks to get closer to the desired count.\n\n    if (err <= 0.5) {\n      interval *= 10;\n    } // Interval should be integer\n\n\n    while (!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0) {\n      interval *= 10;\n    }\n\n    var niceExtent = [numberUtil.round(mathCeil(extent[0] / interval) * interval), numberUtil.round(mathFloor(extent[1] / interval) * interval)];\n    this._interval = interval;\n    this._niceExtent = niceExtent;\n  },\n\n  /**\n   * Nice extent.\n   * @override\n   */\n  niceExtent: function (opt) {\n    intervalScaleProto.niceExtent.call(this, opt);\n    var originalScale = this._originalScale;\n    originalScale.__fixMin = opt.fixMin;\n    originalScale.__fixMax = opt.fixMax;\n  }\n});\nzrUtil.each(['contain', 'normalize'], function (methodName) {\n  LogScale.prototype[methodName] = function (val) {\n    val = mathLog(val) / mathLog(this.base);\n    return scaleProto[methodName].call(this, val);\n  };\n});\n\nLogScale.create = function () {\n  return new LogScale();\n};\n\nfunction fixRoundingError(val, originalVal) {\n  return roundingErrorFix(val, getPrecisionSafe(originalVal));\n}\n\nvar _default = LogScale;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}