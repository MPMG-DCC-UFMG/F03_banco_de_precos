{"ast":null,"code":"var windingLine = require(\"./windingLine\");\n\nvar EPSILON = 1e-8;\n\nfunction isAroundEqual(a, b) {\n  return Math.abs(a - b) < EPSILON;\n}\n\nfunction contain(points, x, y) {\n  var w = 0;\n  var p = points[0];\n\n  if (!p) {\n    return false;\n  }\n\n  for (var i = 1; i < points.length; i++) {\n    var p2 = points[i];\n    w += windingLine(p[0], p[1], p2[0], p2[1], x, y);\n    p = p2;\n  } // Close polygon\n\n\n  var p0 = points[0];\n\n  if (!isAroundEqual(p[0], p0[0]) || !isAroundEqual(p[1], p0[1])) {\n    w += windingLine(p[0], p[1], p0[0], p0[1], x, y);\n  }\n\n  return w !== 0;\n}\n\nexports.contain = contain;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/zrender/lib/contain/polygon.js"],"names":["windingLine","require","EPSILON","isAroundEqual","a","b","Math","abs","contain","points","x","y","w","p","i","length","p2","p0","exports"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAIC,OAAO,GAAG,IAAd;;AAEA,SAASC,aAAT,CAAuBC,CAAvB,EAA0BC,CAA1B,EAA6B;AAC3B,SAAOC,IAAI,CAACC,GAAL,CAASH,CAAC,GAAGC,CAAb,IAAkBH,OAAzB;AACD;;AAED,SAASM,OAAT,CAAiBC,MAAjB,EAAyBC,CAAzB,EAA4BC,CAA5B,EAA+B;AAC7B,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAGJ,MAAM,CAAC,CAAD,CAAd;;AAEA,MAAI,CAACI,CAAL,EAAQ;AACN,WAAO,KAAP;AACD;;AAED,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACM,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,QAAIE,EAAE,GAAGP,MAAM,CAACK,CAAD,CAAf;AACAF,IAAAA,CAAC,IAAIZ,WAAW,CAACa,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,EAAaG,EAAE,CAAC,CAAD,CAAf,EAAoBA,EAAE,CAAC,CAAD,CAAtB,EAA2BN,CAA3B,EAA8BC,CAA9B,CAAhB;AACAE,IAAAA,CAAC,GAAGG,EAAJ;AACD,GAZ4B,CAY3B;;;AAGF,MAAIC,EAAE,GAAGR,MAAM,CAAC,CAAD,CAAf;;AAEA,MAAI,CAACN,aAAa,CAACU,CAAC,CAAC,CAAD,CAAF,EAAOI,EAAE,CAAC,CAAD,CAAT,CAAd,IAA+B,CAACd,aAAa,CAACU,CAAC,CAAC,CAAD,CAAF,EAAOI,EAAE,CAAC,CAAD,CAAT,CAAjD,EAAgE;AAC9DL,IAAAA,CAAC,IAAIZ,WAAW,CAACa,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,EAAaI,EAAE,CAAC,CAAD,CAAf,EAAoBA,EAAE,CAAC,CAAD,CAAtB,EAA2BP,CAA3B,EAA8BC,CAA9B,CAAhB;AACD;;AAED,SAAOC,CAAC,KAAK,CAAb;AACD;;AAEDM,OAAO,CAACV,OAAR,GAAkBA,OAAlB","sourcesContent":["var windingLine = require(\"./windingLine\");\n\nvar EPSILON = 1e-8;\n\nfunction isAroundEqual(a, b) {\n  return Math.abs(a - b) < EPSILON;\n}\n\nfunction contain(points, x, y) {\n  var w = 0;\n  var p = points[0];\n\n  if (!p) {\n    return false;\n  }\n\n  for (var i = 1; i < points.length; i++) {\n    var p2 = points[i];\n    w += windingLine(p[0], p[1], p2[0], p2[1], x, y);\n    p = p2;\n  } // Close polygon\n\n\n  var p0 = points[0];\n\n  if (!isAroundEqual(p[0], p0[0]) || !isAroundEqual(p[1], p0[1])) {\n    w += windingLine(p[0], p[1], p0[0], p0[1], x, y);\n  }\n\n  return w !== 0;\n}\n\nexports.contain = contain;"]},"metadata":{},"sourceType":"script"}