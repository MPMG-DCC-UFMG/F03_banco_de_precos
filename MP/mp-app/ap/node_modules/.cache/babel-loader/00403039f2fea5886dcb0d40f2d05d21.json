{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar BaseBarSeries = require(\"./BaseBarSeries\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar _default = BaseBarSeries.extend({\n  type: 'series.bar',\n  dependencies: ['grid', 'polar'],\n  brushSelector: 'rect',\n\n  /**\n   * @override\n   */\n  getProgressive: function getProgressive() {\n    // Do not support progressive in normal mode.\n    return this.get('large') ? this.get('progressive') : false;\n  },\n\n  /**\n   * @override\n   */\n  getProgressiveThreshold: function getProgressiveThreshold() {\n    // Do not support progressive in normal mode.\n    var progressiveThreshold = this.get('progressiveThreshold');\n    var largeThreshold = this.get('largeThreshold');\n\n    if (largeThreshold > progressiveThreshold) {\n      progressiveThreshold = largeThreshold;\n    }\n\n    return progressiveThreshold;\n  },\n  defaultOption: {\n    // If clipped\n    // Only available on cartesian2d\n    clip: true,\n    // If use caps on two sides of bars\n    // Only available on tangential polar bar\n    roundCap: false,\n    showBackground: false,\n    backgroundStyle: {\n      color: 'rgba(180, 180, 180, 0.2)',\n      borderColor: null,\n      borderWidth: 0,\n      borderType: 'solid',\n      borderRadius: 0,\n      shadowBlur: 0,\n      shadowColor: null,\n      shadowOffsetX: 0,\n      shadowOffsetY: 0,\n      opacity: 1\n    }\n  }\n});\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/chart/bar/BarSeries.js"],"names":["BaseBarSeries","require","_default","extend","type","dependencies","brushSelector","getProgressive","get","getProgressiveThreshold","progressiveThreshold","largeThreshold","defaultOption","clip","roundCap","showBackground","backgroundStyle","color","borderColor","borderWidth","borderType","borderRadius","shadowBlur","shadowColor","shadowOffsetX","shadowOffsetY","opacity","module","exports"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,QAAQ,GAAGF,aAAa,CAACG,MAAd,CAAqB;AAClCC,EAAAA,IAAI,EAAE,YAD4B;AAElCC,EAAAA,YAAY,EAAE,CAAC,MAAD,EAAS,OAAT,CAFoB;AAGlCC,EAAAA,aAAa,EAAE,MAHmB;;AAKlC;AACF;AACA;AACEC,EAAAA,cAAc,EAAE,0BAAY;AAC1B;AACA,WAAO,KAAKC,GAAL,CAAS,OAAT,IAAoB,KAAKA,GAAL,CAAS,aAAT,CAApB,GAA8C,KAArD;AACD,GAXiC;;AAalC;AACF;AACA;AACEC,EAAAA,uBAAuB,EAAE,mCAAY;AACnC;AACA,QAAIC,oBAAoB,GAAG,KAAKF,GAAL,CAAS,sBAAT,CAA3B;AACA,QAAIG,cAAc,GAAG,KAAKH,GAAL,CAAS,gBAAT,CAArB;;AAEA,QAAIG,cAAc,GAAGD,oBAArB,EAA2C;AACzCA,MAAAA,oBAAoB,GAAGC,cAAvB;AACD;;AAED,WAAOD,oBAAP;AACD,GA1BiC;AA2BlCE,EAAAA,aAAa,EAAE;AACb;AACA;AACAC,IAAAA,IAAI,EAAE,IAHO;AAIb;AACA;AACAC,IAAAA,QAAQ,EAAE,KANG;AAObC,IAAAA,cAAc,EAAE,KAPH;AAQbC,IAAAA,eAAe,EAAE;AACfC,MAAAA,KAAK,EAAE,0BADQ;AAEfC,MAAAA,WAAW,EAAE,IAFE;AAGfC,MAAAA,WAAW,EAAE,CAHE;AAIfC,MAAAA,UAAU,EAAE,OAJG;AAKfC,MAAAA,YAAY,EAAE,CALC;AAMfC,MAAAA,UAAU,EAAE,CANG;AAOfC,MAAAA,WAAW,EAAE,IAPE;AAQfC,MAAAA,aAAa,EAAE,CARA;AASfC,MAAAA,aAAa,EAAE,CATA;AAUfC,MAAAA,OAAO,EAAE;AAVM;AARJ;AA3BmB,CAArB,CAAf;;AAkDAC,MAAM,CAACC,OAAP,GAAiB1B,QAAjB","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar BaseBarSeries = require(\"./BaseBarSeries\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _default = BaseBarSeries.extend({\n  type: 'series.bar',\n  dependencies: ['grid', 'polar'],\n  brushSelector: 'rect',\n\n  /**\n   * @override\n   */\n  getProgressive: function () {\n    // Do not support progressive in normal mode.\n    return this.get('large') ? this.get('progressive') : false;\n  },\n\n  /**\n   * @override\n   */\n  getProgressiveThreshold: function () {\n    // Do not support progressive in normal mode.\n    var progressiveThreshold = this.get('progressiveThreshold');\n    var largeThreshold = this.get('largeThreshold');\n\n    if (largeThreshold > progressiveThreshold) {\n      progressiveThreshold = largeThreshold;\n    }\n\n    return progressiveThreshold;\n  },\n  defaultOption: {\n    // If clipped\n    // Only available on cartesian2d\n    clip: true,\n    // If use caps on two sides of bars\n    // Only available on tangential polar bar\n    roundCap: false,\n    showBackground: false,\n    backgroundStyle: {\n      color: 'rgba(180, 180, 180, 0.2)',\n      borderColor: null,\n      borderWidth: 0,\n      borderType: 'solid',\n      borderRadius: 0,\n      shadowBlur: 0,\n      shadowColor: null,\n      shadowOffsetX: 0,\n      shadowOffsetY: 0,\n      opacity: 1\n    }\n  }\n});\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}