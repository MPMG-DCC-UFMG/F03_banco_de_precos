{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar formatUtil = require(\"../../util/format\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar AXIS_DIMS = ['x', 'y', 'z', 'radius', 'angle', 'single']; // Supported coords.\n\nvar COORDS = ['cartesian2d', 'polar', 'singleAxis'];\n/**\n * @param {string} coordType\n * @return {boolean}\n */\n\nfunction isCoordSupported(coordType) {\n  return zrUtil.indexOf(COORDS, coordType) >= 0;\n}\n/**\n * Create \"each\" method to iterate names.\n *\n * @pubilc\n * @param  {Array.<string>} names\n * @param  {Array.<string>=} attrs\n * @return {Function}\n */\n\n\nfunction createNameEach(names, attrs) {\n  names = names.slice();\n  var capitalNames = zrUtil.map(names, formatUtil.capitalFirst);\n  attrs = (attrs || []).slice();\n  var capitalAttrs = zrUtil.map(attrs, formatUtil.capitalFirst);\n  return function (callback, context) {\n    zrUtil.each(names, function (name, index) {\n      var nameObj = {\n        name: name,\n        capital: capitalNames[index]\n      };\n\n      for (var j = 0; j < attrs.length; j++) {\n        nameObj[attrs[j]] = name + capitalAttrs[j];\n      }\n\n      callback.call(context, nameObj);\n    });\n  };\n}\n/**\n * Iterate each dimension name.\n *\n * @public\n * @param {Function} callback The parameter is like:\n *                            {\n *                                name: 'angle',\n *                                capital: 'Angle',\n *                                axis: 'angleAxis',\n *                                axisIndex: 'angleAixs',\n *                                index: 'angleIndex'\n *                            }\n * @param {Object} context\n */\n\n\nvar eachAxisDim = createNameEach(AXIS_DIMS, ['axisIndex', 'axis', 'index', 'id']);\n/**\n * If tow dataZoomModels has the same axis controlled, we say that they are 'linked'.\n * dataZoomModels and 'links' make up one or more graphics.\n * This function finds the graphic where the source dataZoomModel is in.\n *\n * @public\n * @param {Function} forEachNode Node iterator.\n * @param {Function} forEachEdgeType edgeType iterator\n * @param {Function} edgeIdGetter Giving node and edgeType, return an array of edge id.\n * @return {Function} Input: sourceNode, Output: Like {nodes: [], dims: {}}\n */\n\nfunction createLinkedNodesFinder(forEachNode, forEachEdgeType, edgeIdGetter) {\n  return function (sourceNode) {\n    var result = {\n      nodes: [],\n      records: {} // key: edgeType.name, value: Object (key: edge id, value: boolean).\n\n    };\n    forEachEdgeType(function (edgeType) {\n      result.records[edgeType.name] = {};\n    });\n\n    if (!sourceNode) {\n      return result;\n    }\n\n    absorb(sourceNode, result);\n    var existsLink;\n\n    do {\n      existsLink = false;\n      forEachNode(processSingleNode);\n    } while (existsLink);\n\n    function processSingleNode(node) {\n      if (!isNodeAbsorded(node, result) && isLinked(node, result)) {\n        absorb(node, result);\n        existsLink = true;\n      }\n    }\n\n    return result;\n  };\n\n  function isNodeAbsorded(node, result) {\n    return zrUtil.indexOf(result.nodes, node) >= 0;\n  }\n\n  function isLinked(node, result) {\n    var hasLink = false;\n    forEachEdgeType(function (edgeType) {\n      zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {\n        result.records[edgeType.name][edgeId] && (hasLink = true);\n      });\n    });\n    return hasLink;\n  }\n\n  function absorb(node, result) {\n    result.nodes.push(node);\n    forEachEdgeType(function (edgeType) {\n      zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {\n        result.records[edgeType.name][edgeId] = true;\n      });\n    });\n  }\n}\n\nexports.isCoordSupported = isCoordSupported;\nexports.createNameEach = createNameEach;\nexports.eachAxisDim = eachAxisDim;\nexports.createLinkedNodesFinder = createLinkedNodesFinder;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/component/dataZoom/helper.js"],"names":["zrUtil","require","formatUtil","AXIS_DIMS","COORDS","isCoordSupported","coordType","indexOf","createNameEach","names","attrs","slice","capitalNames","map","capitalFirst","capitalAttrs","callback","context","each","name","index","nameObj","capital","j","length","call","eachAxisDim","createLinkedNodesFinder","forEachNode","forEachEdgeType","edgeIdGetter","sourceNode","result","nodes","records","edgeType","absorb","existsLink","processSingleNode","node","isNodeAbsorded","isLinked","hasLink","edgeId","push","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar formatUtil = require(\"../../util/format\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar AXIS_DIMS = ['x', 'y', 'z', 'radius', 'angle', 'single']; // Supported coords.\n\nvar COORDS = ['cartesian2d', 'polar', 'singleAxis'];\n/**\n * @param {string} coordType\n * @return {boolean}\n */\n\nfunction isCoordSupported(coordType) {\n  return zrUtil.indexOf(COORDS, coordType) >= 0;\n}\n/**\n * Create \"each\" method to iterate names.\n *\n * @pubilc\n * @param  {Array.<string>} names\n * @param  {Array.<string>=} attrs\n * @return {Function}\n */\n\n\nfunction createNameEach(names, attrs) {\n  names = names.slice();\n  var capitalNames = zrUtil.map(names, formatUtil.capitalFirst);\n  attrs = (attrs || []).slice();\n  var capitalAttrs = zrUtil.map(attrs, formatUtil.capitalFirst);\n  return function (callback, context) {\n    zrUtil.each(names, function (name, index) {\n      var nameObj = {\n        name: name,\n        capital: capitalNames[index]\n      };\n\n      for (var j = 0; j < attrs.length; j++) {\n        nameObj[attrs[j]] = name + capitalAttrs[j];\n      }\n\n      callback.call(context, nameObj);\n    });\n  };\n}\n/**\n * Iterate each dimension name.\n *\n * @public\n * @param {Function} callback The parameter is like:\n *                            {\n *                                name: 'angle',\n *                                capital: 'Angle',\n *                                axis: 'angleAxis',\n *                                axisIndex: 'angleAixs',\n *                                index: 'angleIndex'\n *                            }\n * @param {Object} context\n */\n\n\nvar eachAxisDim = createNameEach(AXIS_DIMS, ['axisIndex', 'axis', 'index', 'id']);\n/**\n * If tow dataZoomModels has the same axis controlled, we say that they are 'linked'.\n * dataZoomModels and 'links' make up one or more graphics.\n * This function finds the graphic where the source dataZoomModel is in.\n *\n * @public\n * @param {Function} forEachNode Node iterator.\n * @param {Function} forEachEdgeType edgeType iterator\n * @param {Function} edgeIdGetter Giving node and edgeType, return an array of edge id.\n * @return {Function} Input: sourceNode, Output: Like {nodes: [], dims: {}}\n */\n\nfunction createLinkedNodesFinder(forEachNode, forEachEdgeType, edgeIdGetter) {\n  return function (sourceNode) {\n    var result = {\n      nodes: [],\n      records: {} // key: edgeType.name, value: Object (key: edge id, value: boolean).\n\n    };\n    forEachEdgeType(function (edgeType) {\n      result.records[edgeType.name] = {};\n    });\n\n    if (!sourceNode) {\n      return result;\n    }\n\n    absorb(sourceNode, result);\n    var existsLink;\n\n    do {\n      existsLink = false;\n      forEachNode(processSingleNode);\n    } while (existsLink);\n\n    function processSingleNode(node) {\n      if (!isNodeAbsorded(node, result) && isLinked(node, result)) {\n        absorb(node, result);\n        existsLink = true;\n      }\n    }\n\n    return result;\n  };\n\n  function isNodeAbsorded(node, result) {\n    return zrUtil.indexOf(result.nodes, node) >= 0;\n  }\n\n  function isLinked(node, result) {\n    var hasLink = false;\n    forEachEdgeType(function (edgeType) {\n      zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {\n        result.records[edgeType.name][edgeId] && (hasLink = true);\n      });\n    });\n    return hasLink;\n  }\n\n  function absorb(node, result) {\n    result.nodes.push(node);\n    forEachEdgeType(function (edgeType) {\n      zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {\n        result.records[edgeType.name][edgeId] = true;\n      });\n    });\n  }\n}\n\nexports.isCoordSupported = isCoordSupported;\nexports.createNameEach = createNameEach;\nexports.eachAxisDim = eachAxisDim;\nexports.createLinkedNodesFinder = createLinkedNodesFinder;"]},"metadata":{},"sourceType":"script"}