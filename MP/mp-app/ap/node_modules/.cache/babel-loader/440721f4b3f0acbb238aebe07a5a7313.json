{"ast":null,"code":"var easingFuncs = require(\"./easing\");\n/**\n * 动画主控制器\n * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件\n * @config life(1000) 动画时长\n * @config delay(0) 动画延迟时间\n * @config loop(true)\n * @config gap(0) 循环的间隔时间\n * @config onframe\n * @config easing(optional)\n * @config ondestroy(optional)\n * @config onrestart(optional)\n *\n * TODO pause\n */\n\n\nfunction Clip(options) {\n  this._target = options.target; // 生命周期\n\n  this._life = options.life || 1000; // 延时\n\n  this._delay = options.delay || 0; // 开始时间\n  // this._startTime = new Date().getTime() + this._delay;// 单位毫秒\n\n  this._initialized = false; // 是否循环\n\n  this.loop = options.loop == null ? false : options.loop;\n  this.gap = options.gap || 0;\n  this.easing = options.easing || 'Linear';\n  this.onframe = options.onframe;\n  this.ondestroy = options.ondestroy;\n  this.onrestart = options.onrestart;\n  this._pausedTime = 0;\n  this._paused = false;\n}\n\nClip.prototype = {\n  constructor: Clip,\n  step: function step(globalTime, deltaTime) {\n    // Set startTime on first step, or _startTime may has milleseconds different between clips\n    // PENDING\n    if (!this._initialized) {\n      this._startTime = globalTime + this._delay;\n      this._initialized = true;\n    }\n\n    if (this._paused) {\n      this._pausedTime += deltaTime;\n      return;\n    }\n\n    var percent = (globalTime - this._startTime - this._pausedTime) / this._life; // 还没开始\n\n    if (percent < 0) {\n      return;\n    }\n\n    percent = Math.min(percent, 1);\n    var easing = this.easing;\n    var easingFunc = typeof easing === 'string' ? easingFuncs[easing] : easing;\n    var schedule = typeof easingFunc === 'function' ? easingFunc(percent) : percent;\n    this.fire('frame', schedule); // 结束\n\n    if (percent === 1) {\n      if (this.loop) {\n        this.restart(globalTime); // 重新开始周期\n        // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件\n\n        return 'restart';\n      } // 动画完成将这个控制器标识为待删除\n      // 在Animation.update中进行批量删除\n\n\n      this._needsRemove = true;\n      return 'destroy';\n    }\n\n    return null;\n  },\n  restart: function restart(globalTime) {\n    var remainder = (globalTime - this._startTime - this._pausedTime) % this._life;\n    this._startTime = globalTime - remainder + this.gap;\n    this._pausedTime = 0;\n    this._needsRemove = false;\n  },\n  fire: function fire(eventType, arg) {\n    eventType = 'on' + eventType;\n\n    if (this[eventType]) {\n      this[eventType](this._target, arg);\n    }\n  },\n  pause: function pause() {\n    this._paused = true;\n  },\n  resume: function resume() {\n    this._paused = false;\n  }\n};\nvar _default = Clip;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/zrender/lib/animation/Clip.js"],"names":["easingFuncs","require","Clip","options","_target","target","_life","life","_delay","delay","_initialized","loop","gap","easing","onframe","ondestroy","onrestart","_pausedTime","_paused","prototype","constructor","step","globalTime","deltaTime","_startTime","percent","Math","min","easingFunc","schedule","fire","restart","_needsRemove","remainder","eventType","arg","pause","resume","_default","module","exports"],"mappings":"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","sourcesContent":["var easingFuncs = require(\"./easing\");\n\n/**\n * 动画主控制器\n * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件\n * @config life(1000) 动画时长\n * @config delay(0) 动画延迟时间\n * @config loop(true)\n * @config gap(0) 循环的间隔时间\n * @config onframe\n * @config easing(optional)\n * @config ondestroy(optional)\n * @config onrestart(optional)\n *\n * TODO pause\n */\nfunction Clip(options) {\n  this._target = options.target; // 生命周期\n\n  this._life = options.life || 1000; // 延时\n\n  this._delay = options.delay || 0; // 开始时间\n  // this._startTime = new Date().getTime() + this._delay;// 单位毫秒\n\n  this._initialized = false; // 是否循环\n\n  this.loop = options.loop == null ? false : options.loop;\n  this.gap = options.gap || 0;\n  this.easing = options.easing || 'Linear';\n  this.onframe = options.onframe;\n  this.ondestroy = options.ondestroy;\n  this.onrestart = options.onrestart;\n  this._pausedTime = 0;\n  this._paused = false;\n}\n\nClip.prototype = {\n  constructor: Clip,\n  step: function (globalTime, deltaTime) {\n    // Set startTime on first step, or _startTime may has milleseconds different between clips\n    // PENDING\n    if (!this._initialized) {\n      this._startTime = globalTime + this._delay;\n      this._initialized = true;\n    }\n\n    if (this._paused) {\n      this._pausedTime += deltaTime;\n      return;\n    }\n\n    var percent = (globalTime - this._startTime - this._pausedTime) / this._life; // 还没开始\n\n    if (percent < 0) {\n      return;\n    }\n\n    percent = Math.min(percent, 1);\n    var easing = this.easing;\n    var easingFunc = typeof easing === 'string' ? easingFuncs[easing] : easing;\n    var schedule = typeof easingFunc === 'function' ? easingFunc(percent) : percent;\n    this.fire('frame', schedule); // 结束\n\n    if (percent === 1) {\n      if (this.loop) {\n        this.restart(globalTime); // 重新开始周期\n        // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件\n\n        return 'restart';\n      } // 动画完成将这个控制器标识为待删除\n      // 在Animation.update中进行批量删除\n\n\n      this._needsRemove = true;\n      return 'destroy';\n    }\n\n    return null;\n  },\n  restart: function (globalTime) {\n    var remainder = (globalTime - this._startTime - this._pausedTime) % this._life;\n    this._startTime = globalTime - remainder + this.gap;\n    this._pausedTime = 0;\n    this._needsRemove = false;\n  },\n  fire: function (eventType, arg) {\n    eventType = 'on' + eventType;\n\n    if (this[eventType]) {\n      this[eventType](this._target, arg);\n    }\n  },\n  pause: function () {\n    this._paused = true;\n  },\n  resume: function () {\n    this._paused = false;\n  }\n};\nvar _default = Clip;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}