{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar BaseAxisPointer = require(\"./BaseAxisPointer\");\n\nvar viewHelper = require(\"./viewHelper\");\n\nvar singleAxisHelper = require(\"../../coord/single/singleAxisHelper\");\n\nvar AxisView = require(\"../axis/AxisView\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar XY = ['x', 'y'];\nvar WH = ['width', 'height'];\nvar SingleAxisPointer = BaseAxisPointer.extend({\n  /**\n   * @override\n   */\n  makeElOption: function makeElOption(elOption, value, axisModel, axisPointerModel, api) {\n    var axis = axisModel.axis;\n    var coordSys = axis.coordinateSystem;\n    var otherExtent = getGlobalExtent(coordSys, 1 - getPointDimIndex(axis));\n    var pixelValue = coordSys.dataToPoint(value)[0];\n    var axisPointerType = axisPointerModel.get('type');\n\n    if (axisPointerType && axisPointerType !== 'none') {\n      var elStyle = viewHelper.buildElStyle(axisPointerModel);\n      var pointerOption = pointerShapeBuilder[axisPointerType](axis, pixelValue, otherExtent);\n      pointerOption.style = elStyle;\n      elOption.graphicKey = pointerOption.type;\n      elOption.pointer = pointerOption;\n    }\n\n    var layoutInfo = singleAxisHelper.layout(axisModel);\n    viewHelper.buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api);\n  },\n\n  /**\n   * @override\n   */\n  getHandleTransform: function getHandleTransform(value, axisModel, axisPointerModel) {\n    var layoutInfo = singleAxisHelper.layout(axisModel, {\n      labelInside: false\n    });\n    layoutInfo.labelMargin = axisPointerModel.get('handle.margin');\n    return {\n      position: viewHelper.getTransformedPosition(axisModel.axis, value, layoutInfo),\n      rotation: layoutInfo.rotation + (layoutInfo.labelDirection < 0 ? Math.PI : 0)\n    };\n  },\n\n  /**\n   * @override\n   */\n  updateHandleTransform: function updateHandleTransform(transform, delta, axisModel, axisPointerModel) {\n    var axis = axisModel.axis;\n    var coordSys = axis.coordinateSystem;\n    var dimIndex = getPointDimIndex(axis);\n    var axisExtent = getGlobalExtent(coordSys, dimIndex);\n    var currPosition = transform.position;\n    currPosition[dimIndex] += delta[dimIndex];\n    currPosition[dimIndex] = Math.min(axisExtent[1], currPosition[dimIndex]);\n    currPosition[dimIndex] = Math.max(axisExtent[0], currPosition[dimIndex]);\n    var otherExtent = getGlobalExtent(coordSys, 1 - dimIndex);\n    var cursorOtherValue = (otherExtent[1] + otherExtent[0]) / 2;\n    var cursorPoint = [cursorOtherValue, cursorOtherValue];\n    cursorPoint[dimIndex] = currPosition[dimIndex];\n    return {\n      position: currPosition,\n      rotation: transform.rotation,\n      cursorPoint: cursorPoint,\n      tooltipOption: {\n        verticalAlign: 'middle'\n      }\n    };\n  }\n});\nvar pointerShapeBuilder = {\n  line: function line(axis, pixelValue, otherExtent) {\n    var targetShape = viewHelper.makeLineShape([pixelValue, otherExtent[0]], [pixelValue, otherExtent[1]], getPointDimIndex(axis));\n    return {\n      type: 'Line',\n      subPixelOptimize: true,\n      shape: targetShape\n    };\n  },\n  shadow: function shadow(axis, pixelValue, otherExtent) {\n    var bandWidth = axis.getBandWidth();\n    var span = otherExtent[1] - otherExtent[0];\n    return {\n      type: 'Rect',\n      shape: viewHelper.makeRectShape([pixelValue - bandWidth / 2, otherExtent[0]], [bandWidth, span], getPointDimIndex(axis))\n    };\n  }\n};\n\nfunction getPointDimIndex(axis) {\n  return axis.isHorizontal() ? 0 : 1;\n}\n\nfunction getGlobalExtent(coordSys, dimIndex) {\n  var rect = coordSys.getRect();\n  return [rect[XY[dimIndex]], rect[XY[dimIndex]] + rect[WH[dimIndex]]];\n}\n\nAxisView.registerAxisPointerClass('SingleAxisPointer', SingleAxisPointer);\nvar _default = SingleAxisPointer;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/component/axisPointer/SingleAxisPointer.js"],"names":["BaseAxisPointer","require","viewHelper","singleAxisHelper","AxisView","XY","WH","SingleAxisPointer","extend","makeElOption","elOption","value","axisModel","axisPointerModel","api","axis","coordSys","coordinateSystem","otherExtent","getGlobalExtent","getPointDimIndex","pixelValue","dataToPoint","axisPointerType","get","elStyle","buildElStyle","pointerOption","pointerShapeBuilder","style","graphicKey","type","pointer","layoutInfo","layout","buildCartesianSingleLabelElOption","getHandleTransform","labelInside","labelMargin","position","getTransformedPosition","rotation","labelDirection","Math","PI","updateHandleTransform","transform","delta","dimIndex","axisExtent","currPosition","min","max","cursorOtherValue","cursorPoint","tooltipOption","verticalAlign","line","targetShape","makeLineShape","subPixelOptimize","shape","shadow","bandWidth","getBandWidth","span","makeRectShape","isHorizontal","rect","getRect","registerAxisPointerClass","_default","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar BaseAxisPointer = require(\"./BaseAxisPointer\");\n\nvar viewHelper = require(\"./viewHelper\");\n\nvar singleAxisHelper = require(\"../../coord/single/singleAxisHelper\");\n\nvar AxisView = require(\"../axis/AxisView\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar XY = ['x', 'y'];\nvar WH = ['width', 'height'];\nvar SingleAxisPointer = BaseAxisPointer.extend({\n  /**\n   * @override\n   */\n  makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {\n    var axis = axisModel.axis;\n    var coordSys = axis.coordinateSystem;\n    var otherExtent = getGlobalExtent(coordSys, 1 - getPointDimIndex(axis));\n    var pixelValue = coordSys.dataToPoint(value)[0];\n    var axisPointerType = axisPointerModel.get('type');\n\n    if (axisPointerType && axisPointerType !== 'none') {\n      var elStyle = viewHelper.buildElStyle(axisPointerModel);\n      var pointerOption = pointerShapeBuilder[axisPointerType](axis, pixelValue, otherExtent);\n      pointerOption.style = elStyle;\n      elOption.graphicKey = pointerOption.type;\n      elOption.pointer = pointerOption;\n    }\n\n    var layoutInfo = singleAxisHelper.layout(axisModel);\n    viewHelper.buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api);\n  },\n\n  /**\n   * @override\n   */\n  getHandleTransform: function (value, axisModel, axisPointerModel) {\n    var layoutInfo = singleAxisHelper.layout(axisModel, {\n      labelInside: false\n    });\n    layoutInfo.labelMargin = axisPointerModel.get('handle.margin');\n    return {\n      position: viewHelper.getTransformedPosition(axisModel.axis, value, layoutInfo),\n      rotation: layoutInfo.rotation + (layoutInfo.labelDirection < 0 ? Math.PI : 0)\n    };\n  },\n\n  /**\n   * @override\n   */\n  updateHandleTransform: function (transform, delta, axisModel, axisPointerModel) {\n    var axis = axisModel.axis;\n    var coordSys = axis.coordinateSystem;\n    var dimIndex = getPointDimIndex(axis);\n    var axisExtent = getGlobalExtent(coordSys, dimIndex);\n    var currPosition = transform.position;\n    currPosition[dimIndex] += delta[dimIndex];\n    currPosition[dimIndex] = Math.min(axisExtent[1], currPosition[dimIndex]);\n    currPosition[dimIndex] = Math.max(axisExtent[0], currPosition[dimIndex]);\n    var otherExtent = getGlobalExtent(coordSys, 1 - dimIndex);\n    var cursorOtherValue = (otherExtent[1] + otherExtent[0]) / 2;\n    var cursorPoint = [cursorOtherValue, cursorOtherValue];\n    cursorPoint[dimIndex] = currPosition[dimIndex];\n    return {\n      position: currPosition,\n      rotation: transform.rotation,\n      cursorPoint: cursorPoint,\n      tooltipOption: {\n        verticalAlign: 'middle'\n      }\n    };\n  }\n});\nvar pointerShapeBuilder = {\n  line: function (axis, pixelValue, otherExtent) {\n    var targetShape = viewHelper.makeLineShape([pixelValue, otherExtent[0]], [pixelValue, otherExtent[1]], getPointDimIndex(axis));\n    return {\n      type: 'Line',\n      subPixelOptimize: true,\n      shape: targetShape\n    };\n  },\n  shadow: function (axis, pixelValue, otherExtent) {\n    var bandWidth = axis.getBandWidth();\n    var span = otherExtent[1] - otherExtent[0];\n    return {\n      type: 'Rect',\n      shape: viewHelper.makeRectShape([pixelValue - bandWidth / 2, otherExtent[0]], [bandWidth, span], getPointDimIndex(axis))\n    };\n  }\n};\n\nfunction getPointDimIndex(axis) {\n  return axis.isHorizontal() ? 0 : 1;\n}\n\nfunction getGlobalExtent(coordSys, dimIndex) {\n  var rect = coordSys.getRect();\n  return [rect[XY[dimIndex]], rect[XY[dimIndex]] + rect[WH[dimIndex]]];\n}\n\nAxisView.registerAxisPointerClass('SingleAxisPointer', SingleAxisPointer);\nvar _default = SingleAxisPointer;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}