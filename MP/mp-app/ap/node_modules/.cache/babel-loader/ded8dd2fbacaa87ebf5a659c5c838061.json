{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar AxisBuilder = require(\"./AxisBuilder\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar singleAxisHelper = require(\"../../coord/single/singleAxisHelper\");\n\nvar AxisView = require(\"./AxisView\");\n\nvar _axisSplitHelper = require(\"./axisSplitHelper\");\n\nvar rectCoordAxisBuildSplitArea = _axisSplitHelper.rectCoordAxisBuildSplitArea;\nvar rectCoordAxisHandleRemove = _axisSplitHelper.rectCoordAxisHandleRemove;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\nvar selfBuilderAttrs = ['splitArea', 'splitLine'];\nvar SingleAxisView = AxisView.extend({\n  type: 'singleAxis',\n  axisPointerClass: 'SingleAxisPointer',\n  render: function render(axisModel, ecModel, api, payload) {\n    var group = this.group;\n    group.removeAll();\n    var oldAxisGroup = this._axisGroup;\n    this._axisGroup = new graphic.Group();\n    var layout = singleAxisHelper.layout(axisModel);\n    var axisBuilder = new AxisBuilder(axisModel, layout);\n    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n    group.add(this._axisGroup);\n    group.add(axisBuilder.getGroup());\n    zrUtil.each(selfBuilderAttrs, function (name) {\n      if (axisModel.get(name + '.show')) {\n        this['_' + name](axisModel);\n      }\n    }, this);\n    graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);\n    SingleAxisView.superCall(this, 'render', axisModel, ecModel, api, payload);\n  },\n  remove: function remove() {\n    rectCoordAxisHandleRemove(this);\n  },\n  _splitLine: function _splitLine(axisModel) {\n    var axis = axisModel.axis;\n\n    if (axis.scale.isBlank()) {\n      return;\n    }\n\n    var splitLineModel = axisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineWidth = lineStyleModel.get('width');\n    var lineColors = lineStyleModel.get('color');\n    lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n    var gridRect = axisModel.coordinateSystem.getRect();\n    var isHorizontal = axis.isHorizontal();\n    var splitLines = [];\n    var lineCount = 0;\n    var ticksCoords = axis.getTicksCoords({\n      tickModel: splitLineModel\n    });\n    var p1 = [];\n    var p2 = [];\n\n    for (var i = 0; i < ticksCoords.length; ++i) {\n      var tickCoord = axis.toGlobalCoord(ticksCoords[i].coord);\n\n      if (isHorizontal) {\n        p1[0] = tickCoord;\n        p1[1] = gridRect.y;\n        p2[0] = tickCoord;\n        p2[1] = gridRect.y + gridRect.height;\n      } else {\n        p1[0] = gridRect.x;\n        p1[1] = tickCoord;\n        p2[0] = gridRect.x + gridRect.width;\n        p2[1] = tickCoord;\n      }\n\n      var colorIndex = lineCount++ % lineColors.length;\n      splitLines[colorIndex] = splitLines[colorIndex] || [];\n      splitLines[colorIndex].push(new graphic.Line({\n        subPixelOptimize: true,\n        shape: {\n          x1: p1[0],\n          y1: p1[1],\n          x2: p2[0],\n          y2: p2[1]\n        },\n        style: {\n          lineWidth: lineWidth\n        },\n        silent: true\n      }));\n    }\n\n    for (var i = 0; i < splitLines.length; ++i) {\n      this.group.add(graphic.mergePath(splitLines[i], {\n        style: {\n          stroke: lineColors[i % lineColors.length],\n          lineDash: lineStyleModel.getLineDash(lineWidth),\n          lineWidth: lineWidth\n        },\n        silent: true\n      }));\n    }\n  },\n  _splitArea: function _splitArea(axisModel) {\n    rectCoordAxisBuildSplitArea(this, this._axisGroup, axisModel, axisModel);\n  }\n});\nvar _default = SingleAxisView;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/component/axis/SingleAxisView.js"],"names":["zrUtil","require","AxisBuilder","graphic","singleAxisHelper","AxisView","_axisSplitHelper","rectCoordAxisBuildSplitArea","rectCoordAxisHandleRemove","axisBuilderAttrs","selfBuilderAttrs","SingleAxisView","extend","type","axisPointerClass","render","axisModel","ecModel","api","payload","group","removeAll","oldAxisGroup","_axisGroup","Group","layout","axisBuilder","each","add","getGroup","name","get","groupTransition","superCall","remove","_splitLine","axis","scale","isBlank","splitLineModel","getModel","lineStyleModel","lineWidth","lineColors","Array","gridRect","coordinateSystem","getRect","isHorizontal","splitLines","lineCount","ticksCoords","getTicksCoords","tickModel","p1","p2","i","length","tickCoord","toGlobalCoord","coord","y","height","x","width","colorIndex","push","Line","subPixelOptimize","shape","x1","y1","x2","y2","style","silent","mergePath","stroke","lineDash","getLineDash","_splitArea","_default","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar AxisBuilder = require(\"./AxisBuilder\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar singleAxisHelper = require(\"../../coord/single/singleAxisHelper\");\n\nvar AxisView = require(\"./AxisView\");\n\nvar _axisSplitHelper = require(\"./axisSplitHelper\");\n\nvar rectCoordAxisBuildSplitArea = _axisSplitHelper.rectCoordAxisBuildSplitArea;\nvar rectCoordAxisHandleRemove = _axisSplitHelper.rectCoordAxisHandleRemove;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\nvar selfBuilderAttrs = ['splitArea', 'splitLine'];\nvar SingleAxisView = AxisView.extend({\n  type: 'singleAxis',\n  axisPointerClass: 'SingleAxisPointer',\n  render: function (axisModel, ecModel, api, payload) {\n    var group = this.group;\n    group.removeAll();\n    var oldAxisGroup = this._axisGroup;\n    this._axisGroup = new graphic.Group();\n    var layout = singleAxisHelper.layout(axisModel);\n    var axisBuilder = new AxisBuilder(axisModel, layout);\n    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n    group.add(this._axisGroup);\n    group.add(axisBuilder.getGroup());\n    zrUtil.each(selfBuilderAttrs, function (name) {\n      if (axisModel.get(name + '.show')) {\n        this['_' + name](axisModel);\n      }\n    }, this);\n    graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);\n    SingleAxisView.superCall(this, 'render', axisModel, ecModel, api, payload);\n  },\n  remove: function () {\n    rectCoordAxisHandleRemove(this);\n  },\n  _splitLine: function (axisModel) {\n    var axis = axisModel.axis;\n\n    if (axis.scale.isBlank()) {\n      return;\n    }\n\n    var splitLineModel = axisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineWidth = lineStyleModel.get('width');\n    var lineColors = lineStyleModel.get('color');\n    lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n    var gridRect = axisModel.coordinateSystem.getRect();\n    var isHorizontal = axis.isHorizontal();\n    var splitLines = [];\n    var lineCount = 0;\n    var ticksCoords = axis.getTicksCoords({\n      tickModel: splitLineModel\n    });\n    var p1 = [];\n    var p2 = [];\n\n    for (var i = 0; i < ticksCoords.length; ++i) {\n      var tickCoord = axis.toGlobalCoord(ticksCoords[i].coord);\n\n      if (isHorizontal) {\n        p1[0] = tickCoord;\n        p1[1] = gridRect.y;\n        p2[0] = tickCoord;\n        p2[1] = gridRect.y + gridRect.height;\n      } else {\n        p1[0] = gridRect.x;\n        p1[1] = tickCoord;\n        p2[0] = gridRect.x + gridRect.width;\n        p2[1] = tickCoord;\n      }\n\n      var colorIndex = lineCount++ % lineColors.length;\n      splitLines[colorIndex] = splitLines[colorIndex] || [];\n      splitLines[colorIndex].push(new graphic.Line({\n        subPixelOptimize: true,\n        shape: {\n          x1: p1[0],\n          y1: p1[1],\n          x2: p2[0],\n          y2: p2[1]\n        },\n        style: {\n          lineWidth: lineWidth\n        },\n        silent: true\n      }));\n    }\n\n    for (var i = 0; i < splitLines.length; ++i) {\n      this.group.add(graphic.mergePath(splitLines[i], {\n        style: {\n          stroke: lineColors[i % lineColors.length],\n          lineDash: lineStyleModel.getLineDash(lineWidth),\n          lineWidth: lineWidth\n        },\n        silent: true\n      }));\n    }\n  },\n  _splitArea: function (axisModel) {\n    rectCoordAxisBuildSplitArea(this, this._axisGroup, axisModel, axisModel);\n  }\n});\nvar _default = SingleAxisView;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}