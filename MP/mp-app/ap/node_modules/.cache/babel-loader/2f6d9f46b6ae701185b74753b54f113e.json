{"ast":null,"code":"import _regeneratorRuntime from \"/home/johnatan/MP/mp-app/ap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/johnatan/MP/mp-app/ap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Mock from '../mock';\nimport jwt from 'jsonwebtoken';\nvar JWT_SECRET = 'jwt_secret_key';\nvar JWT_VALIDITY = '7 days';\nvar userList = [{\n  id: 1,\n  role: 'SA',\n  name: 'Jason Alexander',\n  username: 'jason_alexander',\n  email: 'jason@ui-lib.com',\n  avatar: '/assets/images/johnatan.jpg',\n  age: 30\n}]; // FOLLOWING CODES ARE MOCK SERVER IMPLEMENTATION\n// YOU NEED TO BUILD YOUR OWN SERVER\n// IF YOU NEED HELP ABOUT SERVER SIDE IMPLEMENTATION\n// CONTACT US AT support@ui-lib.com\n\nMock.onPost('/api/auth/login').reply( /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(config) {\n    var _JSON$parse, email, user, accessToken;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return new Promise(function (resolve) {\n              return setTimeout(resolve, 1000);\n            });\n\n          case 3:\n            _JSON$parse = JSON.parse(config.data), email = _JSON$parse.email;\n            user = userList.find(function (u) {\n              return u.email === email;\n            });\n\n            if (user) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\", [400, {\n              message: 'Invalid email or password'\n            }]);\n\n          case 7:\n            accessToken = jwt.sign({\n              userId: user.id\n            }, JWT_SECRET, {\n              expiresIn: JWT_VALIDITY\n            });\n            return _context.abrupt(\"return\", [200, {\n              accessToken: accessToken,\n              user: {\n                id: user.id,\n                avatar: user.avatar,\n                email: user.email,\n                name: user.name,\n                role: user.role\n              }\n            }]);\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n            return _context.abrupt(\"return\", [500, {\n              message: 'Internal server error'\n            }]);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 11]]);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\nMock.onPost('/api/auth/register').reply(function (config) {\n  try {\n    var _JSON$parse2 = JSON.parse(config.data),\n        email = _JSON$parse2.email,\n        username = _JSON$parse2.username;\n\n    var user = userList.find(function (u) {\n      return u.email === email;\n    });\n\n    if (user) {\n      return [400, {\n        message: 'User already exists!'\n      }];\n    }\n\n    var newUser = {\n      id: 2,\n      role: 'GUEST',\n      name: '',\n      username: username,\n      email: email,\n      avatar: '/assets/images/face-6.jpg',\n      age: 25\n    };\n    userList.push(newUser);\n    var accessToken = jwt.sign({\n      userId: newUser.id\n    }, JWT_SECRET, {\n      expiresIn: JWT_VALIDITY\n    });\n    return [200, {\n      accessToken: accessToken,\n      user: {\n        id: newUser.id,\n        avatar: newUser.avatar,\n        email: newUser.email,\n        name: newUser.name,\n        username: newUser.username,\n        role: newUser.role\n      }\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Internal server error'\n    }];\n  }\n});\nMock.onGet('/api/auth/profile').reply(function (config) {\n  try {\n    var Authorization = config.headers.Authorization;\n    console.log(config.headers);\n\n    if (!Authorization) {\n      return [401, {\n        message: 'Invalid Authorization token'\n      }];\n    }\n\n    var accessToken = Authorization.split(' ')[1];\n\n    var _jwt$verify = jwt.verify(accessToken, JWT_SECRET),\n        userId = _jwt$verify.userId;\n\n    var user = userList.find(function (u) {\n      return u.id === userId;\n    });\n\n    if (!user) {\n      return [401, {\n        message: 'Invalid authorization token'\n      }];\n    }\n\n    return [200, {\n      user: {\n        id: user.id,\n        avatar: user.avatar,\n        email: user.email,\n        name: user.name,\n        role: user.role\n      }\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Internal server error'\n    }];\n  }\n});","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/src/fake-db/db/auth.js"],"names":["Mock","jwt","JWT_SECRET","JWT_VALIDITY","userList","id","role","name","username","email","avatar","age","onPost","reply","config","Promise","resolve","setTimeout","JSON","parse","data","user","find","u","message","accessToken","sign","userId","expiresIn","console","error","newUser","push","err","onGet","Authorization","headers","log","split","verify"],"mappings":"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","sourcesContent":["import Mock from '../mock'\nimport jwt from 'jsonwebtoken'\n\nconst JWT_SECRET = 'jwt_secret_key'\nconst JWT_VALIDITY = '7 days'\n\nconst userList = [\n    {\n        id: 1,\n        role: 'SA',\n        name: 'Jason Alexander',\n        username: 'jason_alexander',\n        email: 'jason@ui-lib.com',\n        avatar: '/assets/images/johnatan.jpg',\n        age: 30,\n    },\n]\n\n// FOLLOWING CODES ARE MOCK SERVER IMPLEMENTATION\n// YOU NEED TO BUILD YOUR OWN SERVER\n// IF YOU NEED HELP ABOUT SERVER SIDE IMPLEMENTATION\n// CONTACT US AT support@ui-lib.com\n\nMock.onPost('/api/auth/login').reply(async (config) => {\n    try {\n        await new Promise((resolve) => setTimeout(resolve, 1000))\n\n        const { email } = JSON.parse(config.data)\n        const user = userList.find((u) => u.email === email)\n\n        if (!user) {\n            return [400, { message: 'Invalid email or password' }]\n        }\n        const accessToken = jwt.sign({ userId: user.id }, JWT_SECRET, {\n            expiresIn: JWT_VALIDITY,\n        })\n\n        return [\n            200,\n            {\n                accessToken,\n                user: {\n                    id: user.id,\n                    avatar: user.avatar,\n                    email: user.email,\n                    name: user.name,\n                    role: user.role,\n                },\n            },\n        ]\n    } catch (err) {\n        console.error(err)\n        return [500, { message: 'Internal server error' }]\n    }\n})\n\nMock.onPost('/api/auth/register').reply((config) => {\n    try {\n        const { email, username } = JSON.parse(config.data)\n        const user = userList.find((u) => u.email === email)\n\n        if (user) {\n            return [400, { message: 'User already exists!' }]\n        }\n        const newUser = {\n            id: 2,\n            role: 'GUEST',\n            name: '',\n            username: username,\n            email: email,\n            avatar: '/assets/images/face-6.jpg',\n            age: 25,\n        }\n        userList.push(newUser)\n\n        const accessToken = jwt.sign({ userId: newUser.id }, JWT_SECRET, {\n            expiresIn: JWT_VALIDITY,\n        })\n\n        return [\n            200,\n            {\n                accessToken,\n                user: {\n                    id: newUser.id,\n                    avatar: newUser.avatar,\n                    email: newUser.email,\n                    name: newUser.name,\n                    username: newUser.username,\n                    role: newUser.role,\n                },\n            },\n        ]\n    } catch (err) {\n        console.error(err)\n        return [500, { message: 'Internal server error' }]\n    }\n})\n\nMock.onGet('/api/auth/profile').reply((config) => {\n    try {\n        const { Authorization } = config.headers\n        console.log(config.headers)\n        if (!Authorization) {\n            return [401, { message: 'Invalid Authorization token' }]\n        }\n\n        const accessToken = Authorization.split(' ')[1]\n        const { userId } = jwt.verify(accessToken, JWT_SECRET)\n        const user = userList.find((u) => u.id === userId)\n\n        if (!user) {\n            return [401, { message: 'Invalid authorization token' }]\n        }\n\n        return [\n            200,\n            {\n                user: {\n                    id: user.id,\n                    avatar: user.avatar,\n                    email: user.email,\n                    name: user.name,\n                    role: user.role,\n                },\n            },\n        ]\n    } catch (err) {\n        console.error(err)\n        return [500, { message: 'Internal server error' }]\n    }\n})\n"]},"metadata":{},"sourceType":"module"}