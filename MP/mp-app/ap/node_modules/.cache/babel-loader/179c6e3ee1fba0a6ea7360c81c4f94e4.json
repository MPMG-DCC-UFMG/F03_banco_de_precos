{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar SeriesModel = require(\"../../model/Series\");\n\nvar Tree = require(\"../../data/Tree\");\n\nvar _format = require(\"../../util/format\");\n\nvar encodeHTML = _format.encodeHTML;\n\nvar Model = require(\"../../model/Model\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar _default = SeriesModel.extend({\n  type: 'series.tree',\n  layoutInfo: null,\n  // can support the position parameters 'left', 'top','right','bottom', 'width',\n  // 'height' in the setOption() with 'merge' mode normal.\n  layoutMode: 'box',\n\n  /**\n   * Init a tree data structure from data in option series\n   * @param  {Object} option  the object used to config echarts view\n   * @return {module:echarts/data/List} storage initial data\n   */\n  getInitialData: function getInitialData(option) {\n    //create an virtual root\n    var root = {\n      name: option.name,\n      children: option.data\n    };\n    var leaves = option.leaves || {};\n    var leavesModel = new Model(leaves, this, this.ecModel);\n    var tree = Tree.createTree(root, this, beforeLink);\n\n    function beforeLink(nodeData) {\n      nodeData.wrapMethod('getItemModel', function (model, idx) {\n        var node = tree.getNodeByDataIndex(idx);\n\n        if (!node.children.length || !node.isExpand) {\n          model.parentModel = leavesModel;\n        }\n\n        return model;\n      });\n    }\n\n    var treeDepth = 0;\n    tree.eachNode('preorder', function (node) {\n      if (node.depth > treeDepth) {\n        treeDepth = node.depth;\n      }\n    });\n    var expandAndCollapse = option.expandAndCollapse;\n    var expandTreeDepth = expandAndCollapse && option.initialTreeDepth >= 0 ? option.initialTreeDepth : treeDepth;\n    tree.root.eachNode('preorder', function (node) {\n      var item = node.hostTree.data.getRawDataItem(node.dataIndex); // Add item.collapsed != null, because users can collapse node original in the series.data.\n\n      node.isExpand = item && item.collapsed != null ? !item.collapsed : node.depth <= expandTreeDepth;\n    });\n    return tree.data;\n  },\n\n  /**\n   * Make the configuration 'orient' backward compatibly, with 'horizontal = LR', 'vertical = TB'.\n   * @returns {string} orient\n   */\n  getOrient: function getOrient() {\n    var orient = this.get('orient');\n\n    if (orient === 'horizontal') {\n      orient = 'LR';\n    } else if (orient === 'vertical') {\n      orient = 'TB';\n    }\n\n    return orient;\n  },\n  setZoom: function setZoom(zoom) {\n    this.option.zoom = zoom;\n  },\n  setCenter: function setCenter(center) {\n    this.option.center = center;\n  },\n\n  /**\n   * @override\n   * @param {number} dataIndex\n   */\n  formatTooltip: function formatTooltip(dataIndex) {\n    var tree = this.getData().tree;\n    var realRoot = tree.root.children[0];\n    var node = tree.getNodeByDataIndex(dataIndex);\n    var value = node.getValue();\n    var name = node.name;\n\n    while (node && node !== realRoot) {\n      name = node.parentNode.name + '.' + name;\n      node = node.parentNode;\n    }\n\n    return encodeHTML(name + (isNaN(value) || value == null ? '' : ' : ' + value));\n  },\n  defaultOption: {\n    zlevel: 0,\n    z: 2,\n    coordinateSystem: 'view',\n    // the position of the whole view\n    left: '12%',\n    top: '12%',\n    right: '12%',\n    bottom: '12%',\n    // the layout of the tree, two value can be selected, 'orthogonal' or 'radial'\n    layout: 'orthogonal',\n    // value can be 'polyline'\n    edgeShape: 'curve',\n    edgeForkPosition: '50%',\n    // true | false | 'move' | 'scale', see module:component/helper/RoamController.\n    roam: false,\n    // Symbol size scale ratio in roam\n    nodeScaleRatio: 0.4,\n    // Default on center of graph\n    center: null,\n    zoom: 1,\n    // The orient of orthoginal layout, can be setted to 'LR', 'TB', 'RL', 'BT'.\n    // and the backward compatibility configuration 'horizontal = LR', 'vertical = TB'.\n    orient: 'LR',\n    symbol: 'emptyCircle',\n    symbolSize: 7,\n    expandAndCollapse: true,\n    initialTreeDepth: 2,\n    lineStyle: {\n      color: '#ccc',\n      width: 1.5,\n      curveness: 0.5\n    },\n    itemStyle: {\n      color: 'lightsteelblue',\n      borderColor: '#c23531',\n      borderWidth: 1.5\n    },\n    label: {\n      show: true,\n      color: '#555'\n    },\n    leaves: {\n      label: {\n        show: true\n      }\n    },\n    animationEasing: 'linear',\n    animationDuration: 700,\n    animationDurationUpdate: 1000\n  }\n});\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/chart/tree/TreeSeries.js"],"names":["SeriesModel","require","Tree","_format","encodeHTML","Model","_default","extend","type","layoutInfo","layoutMode","getInitialData","option","root","name","children","data","leaves","leavesModel","ecModel","tree","createTree","beforeLink","nodeData","wrapMethod","model","idx","node","getNodeByDataIndex","length","isExpand","parentModel","treeDepth","eachNode","depth","expandAndCollapse","expandTreeDepth","initialTreeDepth","item","hostTree","getRawDataItem","dataIndex","collapsed","getOrient","orient","get","setZoom","zoom","setCenter","center","formatTooltip","getData","realRoot","value","getValue","parentNode","isNaN","defaultOption","zlevel","z","coordinateSystem","left","top","right","bottom","layout","edgeShape","edgeForkPosition","roam","nodeScaleRatio","symbol","symbolSize","lineStyle","color","width","curveness","itemStyle","borderColor","borderWidth","label","show","animationEasing","animationDuration","animationDurationUpdate","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar SeriesModel = require(\"../../model/Series\");\n\nvar Tree = require(\"../../data/Tree\");\n\nvar _format = require(\"../../util/format\");\n\nvar encodeHTML = _format.encodeHTML;\n\nvar Model = require(\"../../model/Model\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _default = SeriesModel.extend({\n  type: 'series.tree',\n  layoutInfo: null,\n  // can support the position parameters 'left', 'top','right','bottom', 'width',\n  // 'height' in the setOption() with 'merge' mode normal.\n  layoutMode: 'box',\n\n  /**\n   * Init a tree data structure from data in option series\n   * @param  {Object} option  the object used to config echarts view\n   * @return {module:echarts/data/List} storage initial data\n   */\n  getInitialData: function (option) {\n    //create an virtual root\n    var root = {\n      name: option.name,\n      children: option.data\n    };\n    var leaves = option.leaves || {};\n    var leavesModel = new Model(leaves, this, this.ecModel);\n    var tree = Tree.createTree(root, this, beforeLink);\n\n    function beforeLink(nodeData) {\n      nodeData.wrapMethod('getItemModel', function (model, idx) {\n        var node = tree.getNodeByDataIndex(idx);\n\n        if (!node.children.length || !node.isExpand) {\n          model.parentModel = leavesModel;\n        }\n\n        return model;\n      });\n    }\n\n    var treeDepth = 0;\n    tree.eachNode('preorder', function (node) {\n      if (node.depth > treeDepth) {\n        treeDepth = node.depth;\n      }\n    });\n    var expandAndCollapse = option.expandAndCollapse;\n    var expandTreeDepth = expandAndCollapse && option.initialTreeDepth >= 0 ? option.initialTreeDepth : treeDepth;\n    tree.root.eachNode('preorder', function (node) {\n      var item = node.hostTree.data.getRawDataItem(node.dataIndex); // Add item.collapsed != null, because users can collapse node original in the series.data.\n\n      node.isExpand = item && item.collapsed != null ? !item.collapsed : node.depth <= expandTreeDepth;\n    });\n    return tree.data;\n  },\n\n  /**\n   * Make the configuration 'orient' backward compatibly, with 'horizontal = LR', 'vertical = TB'.\n   * @returns {string} orient\n   */\n  getOrient: function () {\n    var orient = this.get('orient');\n\n    if (orient === 'horizontal') {\n      orient = 'LR';\n    } else if (orient === 'vertical') {\n      orient = 'TB';\n    }\n\n    return orient;\n  },\n  setZoom: function (zoom) {\n    this.option.zoom = zoom;\n  },\n  setCenter: function (center) {\n    this.option.center = center;\n  },\n\n  /**\n   * @override\n   * @param {number} dataIndex\n   */\n  formatTooltip: function (dataIndex) {\n    var tree = this.getData().tree;\n    var realRoot = tree.root.children[0];\n    var node = tree.getNodeByDataIndex(dataIndex);\n    var value = node.getValue();\n    var name = node.name;\n\n    while (node && node !== realRoot) {\n      name = node.parentNode.name + '.' + name;\n      node = node.parentNode;\n    }\n\n    return encodeHTML(name + (isNaN(value) || value == null ? '' : ' : ' + value));\n  },\n  defaultOption: {\n    zlevel: 0,\n    z: 2,\n    coordinateSystem: 'view',\n    // the position of the whole view\n    left: '12%',\n    top: '12%',\n    right: '12%',\n    bottom: '12%',\n    // the layout of the tree, two value can be selected, 'orthogonal' or 'radial'\n    layout: 'orthogonal',\n    // value can be 'polyline'\n    edgeShape: 'curve',\n    edgeForkPosition: '50%',\n    // true | false | 'move' | 'scale', see module:component/helper/RoamController.\n    roam: false,\n    // Symbol size scale ratio in roam\n    nodeScaleRatio: 0.4,\n    // Default on center of graph\n    center: null,\n    zoom: 1,\n    // The orient of orthoginal layout, can be setted to 'LR', 'TB', 'RL', 'BT'.\n    // and the backward compatibility configuration 'horizontal = LR', 'vertical = TB'.\n    orient: 'LR',\n    symbol: 'emptyCircle',\n    symbolSize: 7,\n    expandAndCollapse: true,\n    initialTreeDepth: 2,\n    lineStyle: {\n      color: '#ccc',\n      width: 1.5,\n      curveness: 0.5\n    },\n    itemStyle: {\n      color: 'lightsteelblue',\n      borderColor: '#c23531',\n      borderWidth: 1.5\n    },\n    label: {\n      show: true,\n      color: '#555'\n    },\n    leaves: {\n      label: {\n        show: true\n      }\n    },\n    animationEasing: 'linear',\n    animationDuration: 700,\n    animationDurationUpdate: 1000\n  }\n});\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}