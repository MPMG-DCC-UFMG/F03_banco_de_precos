{"ast":null,"code":"var PathProxy = require(\"../core/PathProxy\");\n\nvar _vector = require(\"../core/vector\");\n\nvar v2ApplyTransform = _vector.applyTransform;\nvar CMD = PathProxy.CMD;\nvar points = [[], [], []];\nvar mathSqrt = Math.sqrt;\nvar mathAtan2 = Math.atan2;\n\nfunction _default(path, m) {\n  var data = path.data;\n  var cmd;\n  var nPoint;\n  var i;\n  var j;\n  var k;\n  var p;\n  var M = CMD.M;\n  var C = CMD.C;\n  var L = CMD.L;\n  var R = CMD.R;\n  var A = CMD.A;\n  var Q = CMD.Q;\n\n  for (i = 0, j = 0; i < data.length;) {\n    cmd = data[i++];\n    j = i;\n    nPoint = 0;\n\n    switch (cmd) {\n      case M:\n        nPoint = 1;\n        break;\n\n      case L:\n        nPoint = 1;\n        break;\n\n      case C:\n        nPoint = 3;\n        break;\n\n      case Q:\n        nPoint = 2;\n        break;\n\n      case A:\n        var x = m[4];\n        var y = m[5];\n        var sx = mathSqrt(m[0] * m[0] + m[1] * m[1]);\n        var sy = mathSqrt(m[2] * m[2] + m[3] * m[3]);\n        var angle = mathAtan2(-m[1] / sy, m[0] / sx); // cx\n\n        data[i] *= sx;\n        data[i++] += x; // cy\n\n        data[i] *= sy;\n        data[i++] += y; // Scale rx and ry\n        // FIXME Assume psi is 0 here\n\n        data[i++] *= sx;\n        data[i++] *= sy; // Start angle\n\n        data[i++] += angle; // end angle\n\n        data[i++] += angle; // FIXME psi\n\n        i += 2;\n        j = i;\n        break;\n\n      case R:\n        // x0, y0\n        p[0] = data[i++];\n        p[1] = data[i++];\n        v2ApplyTransform(p, p, m);\n        data[j++] = p[0];\n        data[j++] = p[1]; // x1, y1\n\n        p[0] += data[i++];\n        p[1] += data[i++];\n        v2ApplyTransform(p, p, m);\n        data[j++] = p[0];\n        data[j++] = p[1];\n    }\n\n    for (k = 0; k < nPoint; k++) {\n      var p = points[k];\n      p[0] = data[i++];\n      p[1] = data[i++];\n      v2ApplyTransform(p, p, m); // Write back\n\n      data[j++] = p[0];\n      data[j++] = p[1];\n    }\n  }\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/zrender/lib/tool/transformPath.js"],"names":["PathProxy","require","_vector","v2ApplyTransform","applyTransform","CMD","points","mathSqrt","Math","sqrt","mathAtan2","atan2","_default","path","m","data","cmd","nPoint","i","j","k","p","M","C","L","R","A","Q","length","x","y","sx","sy","angle","module","exports"],"mappings":"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","sourcesContent":["var PathProxy = require(\"../core/PathProxy\");\n\nvar _vector = require(\"../core/vector\");\n\nvar v2ApplyTransform = _vector.applyTransform;\nvar CMD = PathProxy.CMD;\nvar points = [[], [], []];\nvar mathSqrt = Math.sqrt;\nvar mathAtan2 = Math.atan2;\n\nfunction _default(path, m) {\n  var data = path.data;\n  var cmd;\n  var nPoint;\n  var i;\n  var j;\n  var k;\n  var p;\n  var M = CMD.M;\n  var C = CMD.C;\n  var L = CMD.L;\n  var R = CMD.R;\n  var A = CMD.A;\n  var Q = CMD.Q;\n\n  for (i = 0, j = 0; i < data.length;) {\n    cmd = data[i++];\n    j = i;\n    nPoint = 0;\n\n    switch (cmd) {\n      case M:\n        nPoint = 1;\n        break;\n\n      case L:\n        nPoint = 1;\n        break;\n\n      case C:\n        nPoint = 3;\n        break;\n\n      case Q:\n        nPoint = 2;\n        break;\n\n      case A:\n        var x = m[4];\n        var y = m[5];\n        var sx = mathSqrt(m[0] * m[0] + m[1] * m[1]);\n        var sy = mathSqrt(m[2] * m[2] + m[3] * m[3]);\n        var angle = mathAtan2(-m[1] / sy, m[0] / sx); // cx\n\n        data[i] *= sx;\n        data[i++] += x; // cy\n\n        data[i] *= sy;\n        data[i++] += y; // Scale rx and ry\n        // FIXME Assume psi is 0 here\n\n        data[i++] *= sx;\n        data[i++] *= sy; // Start angle\n\n        data[i++] += angle; // end angle\n\n        data[i++] += angle; // FIXME psi\n\n        i += 2;\n        j = i;\n        break;\n\n      case R:\n        // x0, y0\n        p[0] = data[i++];\n        p[1] = data[i++];\n        v2ApplyTransform(p, p, m);\n        data[j++] = p[0];\n        data[j++] = p[1]; // x1, y1\n\n        p[0] += data[i++];\n        p[1] += data[i++];\n        v2ApplyTransform(p, p, m);\n        data[j++] = p[0];\n        data[j++] = p[1];\n    }\n\n    for (k = 0; k < nPoint; k++) {\n      var p = points[k];\n      p[0] = data[i++];\n      p[1] = data[i++];\n      v2ApplyTransform(p, p, m); // Write back\n\n      data[j++] = p[0];\n      data[j++] = p[1];\n    }\n  }\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}