{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar echarts = require(\"../../echarts\");\n\nvar helper = require(\"../helper/treeHelper\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * @file Sunburst action\n */\n\n\nvar ROOT_TO_NODE_ACTION = 'sunburstRootToNode';\necharts.registerAction({\n  type: ROOT_TO_NODE_ACTION,\n  update: 'updateView'\n}, function (payload, ecModel) {\n  ecModel.eachComponent({\n    mainType: 'series',\n    subType: 'sunburst',\n    query: payload\n  }, handleRootToNode);\n\n  function handleRootToNode(model, index) {\n    var targetInfo = helper.retrieveTargetInfo(payload, [ROOT_TO_NODE_ACTION], model);\n\n    if (targetInfo) {\n      var originViewRoot = model.getViewRoot();\n\n      if (originViewRoot) {\n        payload.direction = helper.aboveViewRoot(originViewRoot, targetInfo.node) ? 'rollUp' : 'drillDown';\n      }\n\n      model.resetViewRoot(targetInfo.node);\n    }\n  }\n});\nvar HIGHLIGHT_ACTION = 'sunburstHighlight';\necharts.registerAction({\n  type: HIGHLIGHT_ACTION,\n  update: 'updateView'\n}, function (payload, ecModel) {\n  ecModel.eachComponent({\n    mainType: 'series',\n    subType: 'sunburst',\n    query: payload\n  }, handleHighlight);\n\n  function handleHighlight(model, index) {\n    var targetInfo = helper.retrieveTargetInfo(payload, [HIGHLIGHT_ACTION], model);\n\n    if (targetInfo) {\n      payload.highlight = targetInfo.node;\n    }\n  }\n});\nvar UNHIGHLIGHT_ACTION = 'sunburstUnhighlight';\necharts.registerAction({\n  type: UNHIGHLIGHT_ACTION,\n  update: 'updateView'\n}, function (payload, ecModel) {\n  ecModel.eachComponent({\n    mainType: 'series',\n    subType: 'sunburst',\n    query: payload\n  }, handleUnhighlight);\n\n  function handleUnhighlight(model, index) {\n    payload.unhighlight = true;\n  }\n});","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/chart/sunburst/sunburstAction.js"],"names":["echarts","require","helper","ROOT_TO_NODE_ACTION","registerAction","type","update","payload","ecModel","eachComponent","mainType","subType","query","handleRootToNode","model","index","targetInfo","retrieveTargetInfo","originViewRoot","getViewRoot","direction","aboveViewRoot","node","resetViewRoot","HIGHLIGHT_ACTION","handleHighlight","highlight","UNHIGHLIGHT_ACTION","handleUnhighlight","unhighlight"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,eAAD,CAArB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,sBAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,IAAIE,mBAAmB,GAAG,oBAA1B;AACAH,OAAO,CAACI,cAAR,CAAuB;AACrBC,EAAAA,IAAI,EAAEF,mBADe;AAErBG,EAAAA,MAAM,EAAE;AAFa,CAAvB,EAGG,UAAUC,OAAV,EAAmBC,OAAnB,EAA4B;AAC7BA,EAAAA,OAAO,CAACC,aAAR,CAAsB;AACpBC,IAAAA,QAAQ,EAAE,QADU;AAEpBC,IAAAA,OAAO,EAAE,UAFW;AAGpBC,IAAAA,KAAK,EAAEL;AAHa,GAAtB,EAIGM,gBAJH;;AAMA,WAASA,gBAAT,CAA0BC,KAA1B,EAAiCC,KAAjC,EAAwC;AACtC,QAAIC,UAAU,GAAGd,MAAM,CAACe,kBAAP,CAA0BV,OAA1B,EAAmC,CAACJ,mBAAD,CAAnC,EAA0DW,KAA1D,CAAjB;;AAEA,QAAIE,UAAJ,EAAgB;AACd,UAAIE,cAAc,GAAGJ,KAAK,CAACK,WAAN,EAArB;;AAEA,UAAID,cAAJ,EAAoB;AAClBX,QAAAA,OAAO,CAACa,SAAR,GAAoBlB,MAAM,CAACmB,aAAP,CAAqBH,cAArB,EAAqCF,UAAU,CAACM,IAAhD,IAAwD,QAAxD,GAAmE,WAAvF;AACD;;AAEDR,MAAAA,KAAK,CAACS,aAAN,CAAoBP,UAAU,CAACM,IAA/B;AACD;AACF;AACF,CAvBD;AAwBA,IAAIE,gBAAgB,GAAG,mBAAvB;AACAxB,OAAO,CAACI,cAAR,CAAuB;AACrBC,EAAAA,IAAI,EAAEmB,gBADe;AAErBlB,EAAAA,MAAM,EAAE;AAFa,CAAvB,EAGG,UAAUC,OAAV,EAAmBC,OAAnB,EAA4B;AAC7BA,EAAAA,OAAO,CAACC,aAAR,CAAsB;AACpBC,IAAAA,QAAQ,EAAE,QADU;AAEpBC,IAAAA,OAAO,EAAE,UAFW;AAGpBC,IAAAA,KAAK,EAAEL;AAHa,GAAtB,EAIGkB,eAJH;;AAMA,WAASA,eAAT,CAAyBX,KAAzB,EAAgCC,KAAhC,EAAuC;AACrC,QAAIC,UAAU,GAAGd,MAAM,CAACe,kBAAP,CAA0BV,OAA1B,EAAmC,CAACiB,gBAAD,CAAnC,EAAuDV,KAAvD,CAAjB;;AAEA,QAAIE,UAAJ,EAAgB;AACdT,MAAAA,OAAO,CAACmB,SAAR,GAAoBV,UAAU,CAACM,IAA/B;AACD;AACF;AACF,CAjBD;AAkBA,IAAIK,kBAAkB,GAAG,qBAAzB;AACA3B,OAAO,CAACI,cAAR,CAAuB;AACrBC,EAAAA,IAAI,EAAEsB,kBADe;AAErBrB,EAAAA,MAAM,EAAE;AAFa,CAAvB,EAGG,UAAUC,OAAV,EAAmBC,OAAnB,EAA4B;AAC7BA,EAAAA,OAAO,CAACC,aAAR,CAAsB;AACpBC,IAAAA,QAAQ,EAAE,QADU;AAEpBC,IAAAA,OAAO,EAAE,UAFW;AAGpBC,IAAAA,KAAK,EAAEL;AAHa,GAAtB,EAIGqB,iBAJH;;AAMA,WAASA,iBAAT,CAA2Bd,KAA3B,EAAkCC,KAAlC,EAAyC;AACvCR,IAAAA,OAAO,CAACsB,WAAR,GAAsB,IAAtB;AACD;AACF,CAbD","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar echarts = require(\"../../echarts\");\n\nvar helper = require(\"../helper/treeHelper\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * @file Sunburst action\n */\nvar ROOT_TO_NODE_ACTION = 'sunburstRootToNode';\necharts.registerAction({\n  type: ROOT_TO_NODE_ACTION,\n  update: 'updateView'\n}, function (payload, ecModel) {\n  ecModel.eachComponent({\n    mainType: 'series',\n    subType: 'sunburst',\n    query: payload\n  }, handleRootToNode);\n\n  function handleRootToNode(model, index) {\n    var targetInfo = helper.retrieveTargetInfo(payload, [ROOT_TO_NODE_ACTION], model);\n\n    if (targetInfo) {\n      var originViewRoot = model.getViewRoot();\n\n      if (originViewRoot) {\n        payload.direction = helper.aboveViewRoot(originViewRoot, targetInfo.node) ? 'rollUp' : 'drillDown';\n      }\n\n      model.resetViewRoot(targetInfo.node);\n    }\n  }\n});\nvar HIGHLIGHT_ACTION = 'sunburstHighlight';\necharts.registerAction({\n  type: HIGHLIGHT_ACTION,\n  update: 'updateView'\n}, function (payload, ecModel) {\n  ecModel.eachComponent({\n    mainType: 'series',\n    subType: 'sunburst',\n    query: payload\n  }, handleHighlight);\n\n  function handleHighlight(model, index) {\n    var targetInfo = helper.retrieveTargetInfo(payload, [HIGHLIGHT_ACTION], model);\n\n    if (targetInfo) {\n      payload.highlight = targetInfo.node;\n    }\n  }\n});\nvar UNHIGHLIGHT_ACTION = 'sunburstUnhighlight';\necharts.registerAction({\n  type: UNHIGHLIGHT_ACTION,\n  update: 'updateView'\n}, function (payload, ecModel) {\n  ecModel.eachComponent({\n    mainType: 'series',\n    subType: 'sunburst',\n    query: payload\n  }, handleUnhighlight);\n\n  function handleUnhighlight(model, index) {\n    payload.unhighlight = true;\n  }\n});"]},"metadata":{},"sourceType":"script"}