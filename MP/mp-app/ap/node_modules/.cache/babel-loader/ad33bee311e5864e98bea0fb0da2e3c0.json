{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar Eventful = require(\"zrender/lib/mixin/Eventful\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar interactionMutex = require(\"./interactionMutex\");\n\nvar DataDiffer = require(\"../../data/DataDiffer\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar curry = zrUtil.curry;\nvar each = zrUtil.each;\nvar map = zrUtil.map;\nvar mathMin = Math.min;\nvar mathMax = Math.max;\nvar mathPow = Math.pow;\nvar COVER_Z = 10000;\nvar UNSELECT_THRESHOLD = 6;\nvar MIN_RESIZE_LINE_WIDTH = 6;\nvar MUTEX_RESOURCE_KEY = 'globalPan';\nvar DIRECTION_MAP = {\n  w: [0, 0],\n  e: [0, 1],\n  n: [1, 0],\n  s: [1, 1]\n};\nvar CURSOR_MAP = {\n  w: 'ew',\n  e: 'ew',\n  n: 'ns',\n  s: 'ns',\n  ne: 'nesw',\n  sw: 'nesw',\n  nw: 'nwse',\n  se: 'nwse'\n};\nvar DEFAULT_BRUSH_OPT = {\n  brushStyle: {\n    lineWidth: 2,\n    stroke: 'rgba(0,0,0,0.3)',\n    fill: 'rgba(0,0,0,0.1)'\n  },\n  transformable: true,\n  brushMode: 'single',\n  removeOnClick: false\n};\nvar baseUID = 0;\n/**\n * @alias module:echarts/component/helper/BrushController\n * @constructor\n * @mixin {module:zrender/mixin/Eventful}\n * @event module:echarts/component/helper/BrushController#brush\n *        params:\n *            areas: Array.<Array>, coord relates to container group,\n *                                    If no container specified, to global.\n *            opt {\n *                isEnd: boolean,\n *                removeOnClick: boolean\n *            }\n *\n * @param {module:zrender/zrender~ZRender} zr\n */\n\nfunction BrushController(zr) {\n  Eventful.call(this);\n  /**\n   * @type {module:zrender/zrender~ZRender}\n   * @private\n   */\n\n  this._zr = zr;\n  /**\n   * @type {module:zrender/container/Group}\n   * @readOnly\n   */\n\n  this.group = new graphic.Group();\n  /**\n   * Only for drawing (after enabledBrush).\n   *     'line', 'rect', 'polygon' or false\n   *     If passing false/null/undefined, disable brush.\n   *     If passing 'auto', determined by panel.defaultBrushType\n   * @private\n   * @type {string}\n   */\n\n  this._brushType;\n  /**\n   * Only for drawing (after enabledBrush).\n   *\n   * @private\n   * @type {Object}\n   */\n\n  this._brushOption;\n  /**\n   * @private\n   * @type {Object}\n   */\n\n  this._panels;\n  /**\n   * @private\n   * @type {Array.<nubmer>}\n   */\n\n  this._track = [];\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this._dragging;\n  /**\n   * @private\n   * @type {Array}\n   */\n\n  this._covers = [];\n  /**\n   * @private\n   * @type {moudule:zrender/container/Group}\n   */\n\n  this._creatingCover;\n  /**\n   * `true` means global panel\n   * @private\n   * @type {module:zrender/container/Group|boolean}\n   */\n\n  this._creatingPanel;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this._enableGlobalPan;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  /**\n   * @private\n   * @type {string}\n   */\n\n  this._uid = 'brushController_' + baseUID++;\n  /**\n   * @private\n   * @type {Object}\n   */\n\n  this._handlers = {};\n  each(pointerHandlers, function (handler, eventName) {\n    this._handlers[eventName] = zrUtil.bind(handler, this);\n  }, this);\n}\n\nBrushController.prototype = {\n  constructor: BrushController,\n\n  /**\n   * If set to null/undefined/false, select disabled.\n   * @param {Object} brushOption\n   * @param {string|boolean} brushOption.brushType 'line', 'rect', 'polygon' or false\n   *                          If passing false/null/undefined, disable brush.\n   *                          If passing 'auto', determined by panel.defaultBrushType.\n   *                              ('auto' can not be used in global panel)\n   * @param {number} [brushOption.brushMode='single'] 'single' or 'multiple'\n   * @param {boolean} [brushOption.transformable=true]\n   * @param {boolean} [brushOption.removeOnClick=false]\n   * @param {Object} [brushOption.brushStyle]\n   * @param {number} [brushOption.brushStyle.width]\n   * @param {number} [brushOption.brushStyle.lineWidth]\n   * @param {string} [brushOption.brushStyle.stroke]\n   * @param {string} [brushOption.brushStyle.fill]\n   * @param {number} [brushOption.z]\n   */\n  enableBrush: function enableBrush(brushOption) {\n    this._brushType && doDisableBrush(this);\n    brushOption.brushType && doEnableBrush(this, brushOption);\n    return this;\n  },\n\n  /**\n   * @param {Array.<Object>} panelOpts If not pass, it is global brush.\n   *        Each items: {\n   *            panelId, // mandatory.\n   *            clipPath, // mandatory. function.\n   *            isTargetByCursor, // mandatory. function.\n   *            defaultBrushType, // optional, only used when brushType is 'auto'.\n   *            getLinearBrushOtherExtent, // optional. function.\n   *        }\n   */\n  setPanels: function setPanels(panelOpts) {\n    if (panelOpts && panelOpts.length) {\n      var panels = this._panels = {};\n      zrUtil.each(panelOpts, function (panelOpts) {\n        panels[panelOpts.panelId] = zrUtil.clone(panelOpts);\n      });\n    } else {\n      this._panels = null;\n    }\n\n    return this;\n  },\n\n  /**\n   * @param {Object} [opt]\n   * @return {boolean} [opt.enableGlobalPan=false]\n   */\n  mount: function mount(opt) {\n    opt = opt || {};\n    this._enableGlobalPan = opt.enableGlobalPan;\n    var thisGroup = this.group;\n\n    this._zr.add(thisGroup);\n\n    thisGroup.attr({\n      position: opt.position || [0, 0],\n      rotation: opt.rotation || 0,\n      scale: opt.scale || [1, 1]\n    });\n    this._transform = thisGroup.getLocalTransform();\n    return this;\n  },\n  eachCover: function eachCover(cb, context) {\n    each(this._covers, cb, context);\n  },\n\n  /**\n   * Update covers.\n   * @param {Array.<Object>} brushOptionList Like:\n   *        [\n   *            {id: 'xx', brushType: 'line', range: [23, 44], brushStyle, transformable},\n   *            {id: 'yy', brushType: 'rect', range: [[23, 44], [23, 54]]},\n   *            ...\n   *        ]\n   *        `brushType` is required in each cover info. (can not be 'auto')\n   *        `id` is not mandatory.\n   *        `brushStyle`, `transformable` is not mandatory, use DEFAULT_BRUSH_OPT by default.\n   *        If brushOptionList is null/undefined, all covers removed.\n   */\n  updateCovers: function updateCovers(brushOptionList) {\n    brushOptionList = zrUtil.map(brushOptionList, function (brushOption) {\n      return zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);\n    });\n    var tmpIdPrefix = '\\0-brush-index-';\n    var oldCovers = this._covers;\n    var newCovers = this._covers = [];\n    var controller = this;\n    var creatingCover = this._creatingCover;\n    new DataDiffer(oldCovers, brushOptionList, oldGetKey, getKey).add(addOrUpdate).update(addOrUpdate).remove(remove).execute();\n    return this;\n\n    function getKey(brushOption, index) {\n      return (brushOption.id != null ? brushOption.id : tmpIdPrefix + index) + '-' + brushOption.brushType;\n    }\n\n    function oldGetKey(cover, index) {\n      return getKey(cover.__brushOption, index);\n    }\n\n    function addOrUpdate(newIndex, oldIndex) {\n      var newBrushOption = brushOptionList[newIndex]; // Consider setOption in event listener of brushSelect,\n      // where updating cover when creating should be forbiden.\n\n      if (oldIndex != null && oldCovers[oldIndex] === creatingCover) {\n        newCovers[newIndex] = oldCovers[oldIndex];\n      } else {\n        var cover = newCovers[newIndex] = oldIndex != null ? (oldCovers[oldIndex].__brushOption = newBrushOption, oldCovers[oldIndex]) : endCreating(controller, createCover(controller, newBrushOption));\n        updateCoverAfterCreation(controller, cover);\n      }\n    }\n\n    function remove(oldIndex) {\n      if (oldCovers[oldIndex] !== creatingCover) {\n        controller.group.remove(oldCovers[oldIndex]);\n      }\n    }\n  },\n  unmount: function unmount() {\n    this.enableBrush(false); // container may 'removeAll' outside.\n\n    clearCovers(this);\n\n    this._zr.remove(this.group);\n\n    return this;\n  },\n  dispose: function dispose() {\n    this.unmount();\n    this.off();\n  }\n};\nzrUtil.mixin(BrushController, Eventful);\n\nfunction doEnableBrush(controller, brushOption) {\n  var zr = controller._zr; // Consider roam, which takes globalPan too.\n\n  if (!controller._enableGlobalPan) {\n    interactionMutex.take(zr, MUTEX_RESOURCE_KEY, controller._uid);\n  }\n\n  mountHandlers(zr, controller._handlers);\n  controller._brushType = brushOption.brushType;\n  controller._brushOption = zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);\n}\n\nfunction doDisableBrush(controller) {\n  var zr = controller._zr;\n  interactionMutex.release(zr, MUTEX_RESOURCE_KEY, controller._uid);\n  unmountHandlers(zr, controller._handlers);\n  controller._brushType = controller._brushOption = null;\n}\n\nfunction mountHandlers(zr, handlers) {\n  each(handlers, function (handler, eventName) {\n    zr.on(eventName, handler);\n  });\n}\n\nfunction unmountHandlers(zr, handlers) {\n  each(handlers, function (handler, eventName) {\n    zr.off(eventName, handler);\n  });\n}\n\nfunction createCover(controller, brushOption) {\n  var cover = coverRenderers[brushOption.brushType].createCover(controller, brushOption);\n  cover.__brushOption = brushOption;\n  updateZ(cover, brushOption);\n  controller.group.add(cover);\n  return cover;\n}\n\nfunction endCreating(controller, creatingCover) {\n  var coverRenderer = getCoverRenderer(creatingCover);\n\n  if (coverRenderer.endCreating) {\n    coverRenderer.endCreating(controller, creatingCover);\n    updateZ(creatingCover, creatingCover.__brushOption);\n  }\n\n  return creatingCover;\n}\n\nfunction updateCoverShape(controller, cover) {\n  var brushOption = cover.__brushOption;\n  getCoverRenderer(cover).updateCoverShape(controller, cover, brushOption.range, brushOption);\n}\n\nfunction updateZ(cover, brushOption) {\n  var z = brushOption.z;\n  z == null && (z = COVER_Z);\n  cover.traverse(function (el) {\n    el.z = z;\n    el.z2 = z; // Consider in given container.\n  });\n}\n\nfunction updateCoverAfterCreation(controller, cover) {\n  getCoverRenderer(cover).updateCommon(controller, cover);\n  updateCoverShape(controller, cover);\n}\n\nfunction getCoverRenderer(cover) {\n  return coverRenderers[cover.__brushOption.brushType];\n} // return target panel or `true` (means global panel)\n\n\nfunction getPanelByPoint(controller, e, localCursorPoint) {\n  var panels = controller._panels;\n\n  if (!panels) {\n    return true; // Global panel\n  }\n\n  var panel;\n  var transform = controller._transform;\n  each(panels, function (pn) {\n    pn.isTargetByCursor(e, localCursorPoint, transform) && (panel = pn);\n  });\n  return panel;\n} // Return a panel or true\n\n\nfunction getPanelByCover(controller, cover) {\n  var panels = controller._panels;\n\n  if (!panels) {\n    return true; // Global panel\n  }\n\n  var panelId = cover.__brushOption.panelId; // User may give cover without coord sys info,\n  // which is then treated as global panel.\n\n  return panelId != null ? panels[panelId] : true;\n}\n\nfunction clearCovers(controller) {\n  var covers = controller._covers;\n  var originalLength = covers.length;\n  each(covers, function (cover) {\n    controller.group.remove(cover);\n  }, controller);\n  covers.length = 0;\n  return !!originalLength;\n}\n\nfunction trigger(controller, opt) {\n  var areas = map(controller._covers, function (cover) {\n    var brushOption = cover.__brushOption;\n    var range = zrUtil.clone(brushOption.range);\n    return {\n      brushType: brushOption.brushType,\n      panelId: brushOption.panelId,\n      range: range\n    };\n  });\n  controller.trigger('brush', areas, {\n    isEnd: !!opt.isEnd,\n    removeOnClick: !!opt.removeOnClick\n  });\n}\n\nfunction shouldShowCover(controller) {\n  var track = controller._track;\n\n  if (!track.length) {\n    return false;\n  }\n\n  var p2 = track[track.length - 1];\n  var p1 = track[0];\n  var dx = p2[0] - p1[0];\n  var dy = p2[1] - p1[1];\n  var dist = mathPow(dx * dx + dy * dy, 0.5);\n  return dist > UNSELECT_THRESHOLD;\n}\n\nfunction getTrackEnds(track) {\n  var tail = track.length - 1;\n  tail < 0 && (tail = 0);\n  return [track[0], track[tail]];\n}\n\nfunction createBaseRectCover(doDrift, controller, brushOption, edgeNames) {\n  var cover = new graphic.Group();\n  cover.add(new graphic.Rect({\n    name: 'main',\n    style: makeStyle(brushOption),\n    silent: true,\n    draggable: true,\n    cursor: 'move',\n    drift: curry(doDrift, controller, cover, 'nswe'),\n    ondragend: curry(trigger, controller, {\n      isEnd: true\n    })\n  }));\n  each(edgeNames, function (name) {\n    cover.add(new graphic.Rect({\n      name: name,\n      style: {\n        opacity: 0\n      },\n      draggable: true,\n      silent: true,\n      invisible: true,\n      drift: curry(doDrift, controller, cover, name),\n      ondragend: curry(trigger, controller, {\n        isEnd: true\n      })\n    }));\n  });\n  return cover;\n}\n\nfunction updateBaseRect(controller, cover, localRange, brushOption) {\n  var lineWidth = brushOption.brushStyle.lineWidth || 0;\n  var handleSize = mathMax(lineWidth, MIN_RESIZE_LINE_WIDTH);\n  var x = localRange[0][0];\n  var y = localRange[1][0];\n  var xa = x - lineWidth / 2;\n  var ya = y - lineWidth / 2;\n  var x2 = localRange[0][1];\n  var y2 = localRange[1][1];\n  var x2a = x2 - handleSize + lineWidth / 2;\n  var y2a = y2 - handleSize + lineWidth / 2;\n  var width = x2 - x;\n  var height = y2 - y;\n  var widtha = width + lineWidth;\n  var heighta = height + lineWidth;\n  updateRectShape(controller, cover, 'main', x, y, width, height);\n\n  if (brushOption.transformable) {\n    updateRectShape(controller, cover, 'w', xa, ya, handleSize, heighta);\n    updateRectShape(controller, cover, 'e', x2a, ya, handleSize, heighta);\n    updateRectShape(controller, cover, 'n', xa, ya, widtha, handleSize);\n    updateRectShape(controller, cover, 's', xa, y2a, widtha, handleSize);\n    updateRectShape(controller, cover, 'nw', xa, ya, handleSize, handleSize);\n    updateRectShape(controller, cover, 'ne', x2a, ya, handleSize, handleSize);\n    updateRectShape(controller, cover, 'sw', xa, y2a, handleSize, handleSize);\n    updateRectShape(controller, cover, 'se', x2a, y2a, handleSize, handleSize);\n  }\n}\n\nfunction updateCommon(controller, cover) {\n  var brushOption = cover.__brushOption;\n  var transformable = brushOption.transformable;\n  var mainEl = cover.childAt(0);\n  mainEl.useStyle(makeStyle(brushOption));\n  mainEl.attr({\n    silent: !transformable,\n    cursor: transformable ? 'move' : 'default'\n  });\n  each(['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw'], function (name) {\n    var el = cover.childOfName(name);\n    var globalDir = getGlobalDirection(controller, name);\n    el && el.attr({\n      silent: !transformable,\n      invisible: !transformable,\n      cursor: transformable ? CURSOR_MAP[globalDir] + '-resize' : null\n    });\n  });\n}\n\nfunction updateRectShape(controller, cover, name, x, y, w, h) {\n  var el = cover.childOfName(name);\n  el && el.setShape(pointsToRect(clipByPanel(controller, cover, [[x, y], [x + w, y + h]])));\n}\n\nfunction makeStyle(brushOption) {\n  return zrUtil.defaults({\n    strokeNoScale: true\n  }, brushOption.brushStyle);\n}\n\nfunction formatRectRange(x, y, x2, y2) {\n  var min = [mathMin(x, x2), mathMin(y, y2)];\n  var max = [mathMax(x, x2), mathMax(y, y2)];\n  return [[min[0], max[0]], // x range\n  [min[1], max[1]] // y range\n  ];\n}\n\nfunction getTransform(controller) {\n  return graphic.getTransform(controller.group);\n}\n\nfunction getGlobalDirection(controller, localDirection) {\n  if (localDirection.length > 1) {\n    localDirection = localDirection.split('');\n    var globalDir = [getGlobalDirection(controller, localDirection[0]), getGlobalDirection(controller, localDirection[1])];\n    (globalDir[0] === 'e' || globalDir[0] === 'w') && globalDir.reverse();\n    return globalDir.join('');\n  } else {\n    var map = {\n      w: 'left',\n      e: 'right',\n      n: 'top',\n      s: 'bottom'\n    };\n    var inverseMap = {\n      left: 'w',\n      right: 'e',\n      top: 'n',\n      bottom: 's'\n    };\n    var globalDir = graphic.transformDirection(map[localDirection], getTransform(controller));\n    return inverseMap[globalDir];\n  }\n}\n\nfunction driftRect(toRectRange, fromRectRange, controller, cover, name, dx, dy, e) {\n  var brushOption = cover.__brushOption;\n  var rectRange = toRectRange(brushOption.range);\n  var localDelta = toLocalDelta(controller, dx, dy);\n  each(name.split(''), function (namePart) {\n    var ind = DIRECTION_MAP[namePart];\n    rectRange[ind[0]][ind[1]] += localDelta[ind[0]];\n  });\n  brushOption.range = fromRectRange(formatRectRange(rectRange[0][0], rectRange[1][0], rectRange[0][1], rectRange[1][1]));\n  updateCoverAfterCreation(controller, cover);\n  trigger(controller, {\n    isEnd: false\n  });\n}\n\nfunction driftPolygon(controller, cover, dx, dy, e) {\n  var range = cover.__brushOption.range;\n  var localDelta = toLocalDelta(controller, dx, dy);\n  each(range, function (point) {\n    point[0] += localDelta[0];\n    point[1] += localDelta[1];\n  });\n  updateCoverAfterCreation(controller, cover);\n  trigger(controller, {\n    isEnd: false\n  });\n}\n\nfunction toLocalDelta(controller, dx, dy) {\n  var thisGroup = controller.group;\n  var localD = thisGroup.transformCoordToLocal(dx, dy);\n  var localZero = thisGroup.transformCoordToLocal(0, 0);\n  return [localD[0] - localZero[0], localD[1] - localZero[1]];\n}\n\nfunction clipByPanel(controller, cover, data) {\n  var panel = getPanelByCover(controller, cover);\n  return panel && panel !== true ? panel.clipPath(data, controller._transform) : zrUtil.clone(data);\n}\n\nfunction pointsToRect(points) {\n  var xmin = mathMin(points[0][0], points[1][0]);\n  var ymin = mathMin(points[0][1], points[1][1]);\n  var xmax = mathMax(points[0][0], points[1][0]);\n  var ymax = mathMax(points[0][1], points[1][1]);\n  return {\n    x: xmin,\n    y: ymin,\n    width: xmax - xmin,\n    height: ymax - ymin\n  };\n}\n\nfunction resetCursor(controller, e, localCursorPoint) {\n  if ( // Check active\n  !controller._brushType // resetCursor should be always called when mouse is in zr area,\n  // but not called when mouse is out of zr area to avoid bad influence\n  // if `mousemove`, `mouseup` are triggered from `document` event.\n  || isOutsideZrArea(controller, e)) {\n    return;\n  }\n\n  var zr = controller._zr;\n  var covers = controller._covers;\n  var currPanel = getPanelByPoint(controller, e, localCursorPoint); // Check whether in covers.\n\n  if (!controller._dragging) {\n    for (var i = 0; i < covers.length; i++) {\n      var brushOption = covers[i].__brushOption;\n\n      if (currPanel && (currPanel === true || brushOption.panelId === currPanel.panelId) && coverRenderers[brushOption.brushType].contain(covers[i], localCursorPoint[0], localCursorPoint[1])) {\n        // Use cursor style set on cover.\n        return;\n      }\n    }\n  }\n\n  currPanel && zr.setCursorStyle('crosshair');\n}\n\nfunction preventDefault(e) {\n  var rawE = e.event;\n  rawE.preventDefault && rawE.preventDefault();\n}\n\nfunction mainShapeContain(cover, x, y) {\n  return cover.childOfName('main').contain(x, y);\n}\n\nfunction updateCoverByMouse(controller, e, localCursorPoint, isEnd) {\n  var creatingCover = controller._creatingCover;\n  var panel = controller._creatingPanel;\n  var thisBrushOption = controller._brushOption;\n  var eventParams;\n\n  controller._track.push(localCursorPoint.slice());\n\n  if (shouldShowCover(controller) || creatingCover) {\n    if (panel && !creatingCover) {\n      thisBrushOption.brushMode === 'single' && clearCovers(controller);\n      var brushOption = zrUtil.clone(thisBrushOption);\n      brushOption.brushType = determineBrushType(brushOption.brushType, panel);\n      brushOption.panelId = panel === true ? null : panel.panelId;\n      creatingCover = controller._creatingCover = createCover(controller, brushOption);\n\n      controller._covers.push(creatingCover);\n    }\n\n    if (creatingCover) {\n      var coverRenderer = coverRenderers[determineBrushType(controller._brushType, panel)];\n      var coverBrushOption = creatingCover.__brushOption;\n      coverBrushOption.range = coverRenderer.getCreatingRange(clipByPanel(controller, creatingCover, controller._track));\n\n      if (isEnd) {\n        endCreating(controller, creatingCover);\n        coverRenderer.updateCommon(controller, creatingCover);\n      }\n\n      updateCoverShape(controller, creatingCover);\n      eventParams = {\n        isEnd: isEnd\n      };\n    }\n  } else if (isEnd && thisBrushOption.brushMode === 'single' && thisBrushOption.removeOnClick) {\n    // Help user to remove covers easily, only by a tiny drag, in 'single' mode.\n    // But a single click do not clear covers, because user may have casual\n    // clicks (for example, click on other component and do not expect covers\n    // disappear).\n    // Only some cover removed, trigger action, but not every click trigger action.\n    if (getPanelByPoint(controller, e, localCursorPoint) && clearCovers(controller)) {\n      eventParams = {\n        isEnd: isEnd,\n        removeOnClick: true\n      };\n    }\n  }\n\n  return eventParams;\n}\n\nfunction determineBrushType(brushType, panel) {\n  if (brushType === 'auto') {\n    return panel.defaultBrushType;\n  }\n\n  return brushType;\n}\n\nvar pointerHandlers = {\n  mousedown: function mousedown(e) {\n    if (this._dragging) {\n      // In case some browser do not support globalOut,\n      // and release mose out side the browser.\n      handleDragEnd(this, e);\n    } else if (!e.target || !e.target.draggable) {\n      preventDefault(e);\n      var localCursorPoint = this.group.transformCoordToLocal(e.offsetX, e.offsetY);\n      this._creatingCover = null;\n      var panel = this._creatingPanel = getPanelByPoint(this, e, localCursorPoint);\n\n      if (panel) {\n        this._dragging = true;\n        this._track = [localCursorPoint.slice()];\n      }\n    }\n  },\n  mousemove: function mousemove(e) {\n    var x = e.offsetX;\n    var y = e.offsetY;\n    var localCursorPoint = this.group.transformCoordToLocal(x, y);\n    resetCursor(this, e, localCursorPoint);\n\n    if (this._dragging) {\n      preventDefault(e);\n      var eventParams = updateCoverByMouse(this, e, localCursorPoint, false);\n      eventParams && trigger(this, eventParams);\n    }\n  },\n  mouseup: function mouseup(e) {\n    handleDragEnd(this, e);\n  }\n};\n\nfunction handleDragEnd(controller, e) {\n  if (controller._dragging) {\n    preventDefault(e);\n    var x = e.offsetX;\n    var y = e.offsetY;\n    var localCursorPoint = controller.group.transformCoordToLocal(x, y);\n    var eventParams = updateCoverByMouse(controller, e, localCursorPoint, true);\n    controller._dragging = false;\n    controller._track = [];\n    controller._creatingCover = null; // trigger event shoule be at final, after procedure will be nested.\n\n    eventParams && trigger(controller, eventParams);\n  }\n}\n\nfunction isOutsideZrArea(controller, x, y) {\n  var zr = controller._zr;\n  return x < 0 || x > zr.getWidth() || y < 0 || y > zr.getHeight();\n}\n/**\n * key: brushType\n * @type {Object}\n */\n\n\nvar coverRenderers = {\n  lineX: getLineRenderer(0),\n  lineY: getLineRenderer(1),\n  rect: {\n    createCover: function createCover(controller, brushOption) {\n      return createBaseRectCover(curry(driftRect, function (range) {\n        return range;\n      }, function (range) {\n        return range;\n      }), controller, brushOption, ['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw']);\n    },\n    getCreatingRange: function getCreatingRange(localTrack) {\n      var ends = getTrackEnds(localTrack);\n      return formatRectRange(ends[1][0], ends[1][1], ends[0][0], ends[0][1]);\n    },\n    updateCoverShape: function updateCoverShape(controller, cover, localRange, brushOption) {\n      updateBaseRect(controller, cover, localRange, brushOption);\n    },\n    updateCommon: updateCommon,\n    contain: mainShapeContain\n  },\n  polygon: {\n    createCover: function createCover(controller, brushOption) {\n      var cover = new graphic.Group(); // Do not use graphic.Polygon because graphic.Polyline do not close the\n      // border of the shape when drawing, which is a better experience for user.\n\n      cover.add(new graphic.Polyline({\n        name: 'main',\n        style: makeStyle(brushOption),\n        silent: true\n      }));\n      return cover;\n    },\n    getCreatingRange: function getCreatingRange(localTrack) {\n      return localTrack;\n    },\n    endCreating: function endCreating(controller, cover) {\n      cover.remove(cover.childAt(0)); // Use graphic.Polygon close the shape.\n\n      cover.add(new graphic.Polygon({\n        name: 'main',\n        draggable: true,\n        drift: curry(driftPolygon, controller, cover),\n        ondragend: curry(trigger, controller, {\n          isEnd: true\n        })\n      }));\n    },\n    updateCoverShape: function updateCoverShape(controller, cover, localRange, brushOption) {\n      cover.childAt(0).setShape({\n        points: clipByPanel(controller, cover, localRange)\n      });\n    },\n    updateCommon: updateCommon,\n    contain: mainShapeContain\n  }\n};\n\nfunction getLineRenderer(xyIndex) {\n  return {\n    createCover: function createCover(controller, brushOption) {\n      return createBaseRectCover(curry(driftRect, function (range) {\n        var rectRange = [range, [0, 100]];\n        xyIndex && rectRange.reverse();\n        return rectRange;\n      }, function (rectRange) {\n        return rectRange[xyIndex];\n      }), controller, brushOption, [['w', 'e'], ['n', 's']][xyIndex]);\n    },\n    getCreatingRange: function getCreatingRange(localTrack) {\n      var ends = getTrackEnds(localTrack);\n      var min = mathMin(ends[0][xyIndex], ends[1][xyIndex]);\n      var max = mathMax(ends[0][xyIndex], ends[1][xyIndex]);\n      return [min, max];\n    },\n    updateCoverShape: function updateCoverShape(controller, cover, localRange, brushOption) {\n      var otherExtent; // If brushWidth not specified, fit the panel.\n\n      var panel = getPanelByCover(controller, cover);\n\n      if (panel !== true && panel.getLinearBrushOtherExtent) {\n        otherExtent = panel.getLinearBrushOtherExtent(xyIndex, controller._transform);\n      } else {\n        var zr = controller._zr;\n        otherExtent = [0, [zr.getWidth(), zr.getHeight()][1 - xyIndex]];\n      }\n\n      var rectRange = [localRange, otherExtent];\n      xyIndex && rectRange.reverse();\n      updateBaseRect(controller, cover, rectRange, brushOption);\n    },\n    updateCommon: updateCommon,\n    contain: mainShapeContain\n  };\n}\n\nvar _default = BrushController;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/component/helper/BrushController.js"],"names":["_config","require","__DEV__","zrUtil","Eventful","graphic","interactionMutex","DataDiffer","curry","each","map","mathMin","Math","min","mathMax","max","mathPow","pow","COVER_Z","UNSELECT_THRESHOLD","MIN_RESIZE_LINE_WIDTH","MUTEX_RESOURCE_KEY","DIRECTION_MAP","w","e","n","s","CURSOR_MAP","ne","sw","nw","se","DEFAULT_BRUSH_OPT","brushStyle","lineWidth","stroke","fill","transformable","brushMode","removeOnClick","baseUID","BrushController","zr","call","_zr","group","Group","_brushType","_brushOption","_panels","_track","_dragging","_covers","_creatingCover","_creatingPanel","_enableGlobalPan","_uid","_handlers","pointerHandlers","handler","eventName","bind","prototype","constructor","enableBrush","brushOption","doDisableBrush","brushType","doEnableBrush","setPanels","panelOpts","length","panels","panelId","clone","mount","opt","enableGlobalPan","thisGroup","add","attr","position","rotation","scale","_transform","getLocalTransform","eachCover","cb","context","updateCovers","brushOptionList","merge","tmpIdPrefix","oldCovers","newCovers","controller","creatingCover","oldGetKey","getKey","addOrUpdate","update","remove","execute","index","id","cover","__brushOption","newIndex","oldIndex","newBrushOption","endCreating","createCover","updateCoverAfterCreation","unmount","clearCovers","dispose","off","mixin","take","mountHandlers","release","unmountHandlers","handlers","on","coverRenderers","updateZ","coverRenderer","getCoverRenderer","updateCoverShape","range","z","traverse","el","z2","updateCommon","getPanelByPoint","localCursorPoint","panel","transform","pn","isTargetByCursor","getPanelByCover","covers","originalLength","trigger","areas","isEnd","shouldShowCover","track","p2","p1","dx","dy","dist","getTrackEnds","tail","createBaseRectCover","doDrift","edgeNames","Rect","name","style","makeStyle","silent","draggable","cursor","drift","ondragend","opacity","invisible","updateBaseRect","localRange","handleSize","x","y","xa","ya","x2","y2","x2a","y2a","width","height","widtha","heighta","updateRectShape","mainEl","childAt","useStyle","childOfName","globalDir","getGlobalDirection","h","setShape","pointsToRect","clipByPanel","defaults","strokeNoScale","formatRectRange","getTransform","localDirection","split","reverse","join","inverseMap","left","right","top","bottom","transformDirection","driftRect","toRectRange","fromRectRange","rectRange","localDelta","toLocalDelta","namePart","ind","driftPolygon","point","localD","transformCoordToLocal","localZero","data","clipPath","points","xmin","ymin","xmax","ymax","resetCursor","isOutsideZrArea","currPanel","i","contain","setCursorStyle","preventDefault","rawE","event","mainShapeContain","updateCoverByMouse","thisBrushOption","eventParams","push","slice","determineBrushType","coverBrushOption","getCreatingRange","defaultBrushType","mousedown","handleDragEnd","target","offsetX","offsetY","mousemove","mouseup","getWidth","getHeight","lineX","getLineRenderer","lineY","rect","localTrack","ends","polygon","Polyline","Polygon","xyIndex","otherExtent","getLinearBrushOtherExtent","_default","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar Eventful = require(\"zrender/lib/mixin/Eventful\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar interactionMutex = require(\"./interactionMutex\");\n\nvar DataDiffer = require(\"../../data/DataDiffer\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar curry = zrUtil.curry;\nvar each = zrUtil.each;\nvar map = zrUtil.map;\nvar mathMin = Math.min;\nvar mathMax = Math.max;\nvar mathPow = Math.pow;\nvar COVER_Z = 10000;\nvar UNSELECT_THRESHOLD = 6;\nvar MIN_RESIZE_LINE_WIDTH = 6;\nvar MUTEX_RESOURCE_KEY = 'globalPan';\nvar DIRECTION_MAP = {\n  w: [0, 0],\n  e: [0, 1],\n  n: [1, 0],\n  s: [1, 1]\n};\nvar CURSOR_MAP = {\n  w: 'ew',\n  e: 'ew',\n  n: 'ns',\n  s: 'ns',\n  ne: 'nesw',\n  sw: 'nesw',\n  nw: 'nwse',\n  se: 'nwse'\n};\nvar DEFAULT_BRUSH_OPT = {\n  brushStyle: {\n    lineWidth: 2,\n    stroke: 'rgba(0,0,0,0.3)',\n    fill: 'rgba(0,0,0,0.1)'\n  },\n  transformable: true,\n  brushMode: 'single',\n  removeOnClick: false\n};\nvar baseUID = 0;\n/**\n * @alias module:echarts/component/helper/BrushController\n * @constructor\n * @mixin {module:zrender/mixin/Eventful}\n * @event module:echarts/component/helper/BrushController#brush\n *        params:\n *            areas: Array.<Array>, coord relates to container group,\n *                                    If no container specified, to global.\n *            opt {\n *                isEnd: boolean,\n *                removeOnClick: boolean\n *            }\n *\n * @param {module:zrender/zrender~ZRender} zr\n */\n\nfunction BrushController(zr) {\n  Eventful.call(this);\n  /**\n   * @type {module:zrender/zrender~ZRender}\n   * @private\n   */\n\n  this._zr = zr;\n  /**\n   * @type {module:zrender/container/Group}\n   * @readOnly\n   */\n\n  this.group = new graphic.Group();\n  /**\n   * Only for drawing (after enabledBrush).\n   *     'line', 'rect', 'polygon' or false\n   *     If passing false/null/undefined, disable brush.\n   *     If passing 'auto', determined by panel.defaultBrushType\n   * @private\n   * @type {string}\n   */\n\n  this._brushType;\n  /**\n   * Only for drawing (after enabledBrush).\n   *\n   * @private\n   * @type {Object}\n   */\n\n  this._brushOption;\n  /**\n   * @private\n   * @type {Object}\n   */\n\n  this._panels;\n  /**\n   * @private\n   * @type {Array.<nubmer>}\n   */\n\n  this._track = [];\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this._dragging;\n  /**\n   * @private\n   * @type {Array}\n   */\n\n  this._covers = [];\n  /**\n   * @private\n   * @type {moudule:zrender/container/Group}\n   */\n\n  this._creatingCover;\n  /**\n   * `true` means global panel\n   * @private\n   * @type {module:zrender/container/Group|boolean}\n   */\n\n  this._creatingPanel;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this._enableGlobalPan;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this._uid = 'brushController_' + baseUID++;\n  /**\n   * @private\n   * @type {Object}\n   */\n\n  this._handlers = {};\n  each(pointerHandlers, function (handler, eventName) {\n    this._handlers[eventName] = zrUtil.bind(handler, this);\n  }, this);\n}\n\nBrushController.prototype = {\n  constructor: BrushController,\n\n  /**\n   * If set to null/undefined/false, select disabled.\n   * @param {Object} brushOption\n   * @param {string|boolean} brushOption.brushType 'line', 'rect', 'polygon' or false\n   *                          If passing false/null/undefined, disable brush.\n   *                          If passing 'auto', determined by panel.defaultBrushType.\n   *                              ('auto' can not be used in global panel)\n   * @param {number} [brushOption.brushMode='single'] 'single' or 'multiple'\n   * @param {boolean} [brushOption.transformable=true]\n   * @param {boolean} [brushOption.removeOnClick=false]\n   * @param {Object} [brushOption.brushStyle]\n   * @param {number} [brushOption.brushStyle.width]\n   * @param {number} [brushOption.brushStyle.lineWidth]\n   * @param {string} [brushOption.brushStyle.stroke]\n   * @param {string} [brushOption.brushStyle.fill]\n   * @param {number} [brushOption.z]\n   */\n  enableBrush: function (brushOption) {\n    this._brushType && doDisableBrush(this);\n    brushOption.brushType && doEnableBrush(this, brushOption);\n    return this;\n  },\n\n  /**\n   * @param {Array.<Object>} panelOpts If not pass, it is global brush.\n   *        Each items: {\n   *            panelId, // mandatory.\n   *            clipPath, // mandatory. function.\n   *            isTargetByCursor, // mandatory. function.\n   *            defaultBrushType, // optional, only used when brushType is 'auto'.\n   *            getLinearBrushOtherExtent, // optional. function.\n   *        }\n   */\n  setPanels: function (panelOpts) {\n    if (panelOpts && panelOpts.length) {\n      var panels = this._panels = {};\n      zrUtil.each(panelOpts, function (panelOpts) {\n        panels[panelOpts.panelId] = zrUtil.clone(panelOpts);\n      });\n    } else {\n      this._panels = null;\n    }\n\n    return this;\n  },\n\n  /**\n   * @param {Object} [opt]\n   * @return {boolean} [opt.enableGlobalPan=false]\n   */\n  mount: function (opt) {\n    opt = opt || {};\n    this._enableGlobalPan = opt.enableGlobalPan;\n    var thisGroup = this.group;\n\n    this._zr.add(thisGroup);\n\n    thisGroup.attr({\n      position: opt.position || [0, 0],\n      rotation: opt.rotation || 0,\n      scale: opt.scale || [1, 1]\n    });\n    this._transform = thisGroup.getLocalTransform();\n    return this;\n  },\n  eachCover: function (cb, context) {\n    each(this._covers, cb, context);\n  },\n\n  /**\n   * Update covers.\n   * @param {Array.<Object>} brushOptionList Like:\n   *        [\n   *            {id: 'xx', brushType: 'line', range: [23, 44], brushStyle, transformable},\n   *            {id: 'yy', brushType: 'rect', range: [[23, 44], [23, 54]]},\n   *            ...\n   *        ]\n   *        `brushType` is required in each cover info. (can not be 'auto')\n   *        `id` is not mandatory.\n   *        `brushStyle`, `transformable` is not mandatory, use DEFAULT_BRUSH_OPT by default.\n   *        If brushOptionList is null/undefined, all covers removed.\n   */\n  updateCovers: function (brushOptionList) {\n    brushOptionList = zrUtil.map(brushOptionList, function (brushOption) {\n      return zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);\n    });\n    var tmpIdPrefix = '\\0-brush-index-';\n    var oldCovers = this._covers;\n    var newCovers = this._covers = [];\n    var controller = this;\n    var creatingCover = this._creatingCover;\n    new DataDiffer(oldCovers, brushOptionList, oldGetKey, getKey).add(addOrUpdate).update(addOrUpdate).remove(remove).execute();\n    return this;\n\n    function getKey(brushOption, index) {\n      return (brushOption.id != null ? brushOption.id : tmpIdPrefix + index) + '-' + brushOption.brushType;\n    }\n\n    function oldGetKey(cover, index) {\n      return getKey(cover.__brushOption, index);\n    }\n\n    function addOrUpdate(newIndex, oldIndex) {\n      var newBrushOption = brushOptionList[newIndex]; // Consider setOption in event listener of brushSelect,\n      // where updating cover when creating should be forbiden.\n\n      if (oldIndex != null && oldCovers[oldIndex] === creatingCover) {\n        newCovers[newIndex] = oldCovers[oldIndex];\n      } else {\n        var cover = newCovers[newIndex] = oldIndex != null ? (oldCovers[oldIndex].__brushOption = newBrushOption, oldCovers[oldIndex]) : endCreating(controller, createCover(controller, newBrushOption));\n        updateCoverAfterCreation(controller, cover);\n      }\n    }\n\n    function remove(oldIndex) {\n      if (oldCovers[oldIndex] !== creatingCover) {\n        controller.group.remove(oldCovers[oldIndex]);\n      }\n    }\n  },\n  unmount: function () {\n    this.enableBrush(false); // container may 'removeAll' outside.\n\n    clearCovers(this);\n\n    this._zr.remove(this.group);\n\n    return this;\n  },\n  dispose: function () {\n    this.unmount();\n    this.off();\n  }\n};\nzrUtil.mixin(BrushController, Eventful);\n\nfunction doEnableBrush(controller, brushOption) {\n  var zr = controller._zr; // Consider roam, which takes globalPan too.\n\n  if (!controller._enableGlobalPan) {\n    interactionMutex.take(zr, MUTEX_RESOURCE_KEY, controller._uid);\n  }\n\n  mountHandlers(zr, controller._handlers);\n  controller._brushType = brushOption.brushType;\n  controller._brushOption = zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);\n}\n\nfunction doDisableBrush(controller) {\n  var zr = controller._zr;\n  interactionMutex.release(zr, MUTEX_RESOURCE_KEY, controller._uid);\n  unmountHandlers(zr, controller._handlers);\n  controller._brushType = controller._brushOption = null;\n}\n\nfunction mountHandlers(zr, handlers) {\n  each(handlers, function (handler, eventName) {\n    zr.on(eventName, handler);\n  });\n}\n\nfunction unmountHandlers(zr, handlers) {\n  each(handlers, function (handler, eventName) {\n    zr.off(eventName, handler);\n  });\n}\n\nfunction createCover(controller, brushOption) {\n  var cover = coverRenderers[brushOption.brushType].createCover(controller, brushOption);\n  cover.__brushOption = brushOption;\n  updateZ(cover, brushOption);\n  controller.group.add(cover);\n  return cover;\n}\n\nfunction endCreating(controller, creatingCover) {\n  var coverRenderer = getCoverRenderer(creatingCover);\n\n  if (coverRenderer.endCreating) {\n    coverRenderer.endCreating(controller, creatingCover);\n    updateZ(creatingCover, creatingCover.__brushOption);\n  }\n\n  return creatingCover;\n}\n\nfunction updateCoverShape(controller, cover) {\n  var brushOption = cover.__brushOption;\n  getCoverRenderer(cover).updateCoverShape(controller, cover, brushOption.range, brushOption);\n}\n\nfunction updateZ(cover, brushOption) {\n  var z = brushOption.z;\n  z == null && (z = COVER_Z);\n  cover.traverse(function (el) {\n    el.z = z;\n    el.z2 = z; // Consider in given container.\n  });\n}\n\nfunction updateCoverAfterCreation(controller, cover) {\n  getCoverRenderer(cover).updateCommon(controller, cover);\n  updateCoverShape(controller, cover);\n}\n\nfunction getCoverRenderer(cover) {\n  return coverRenderers[cover.__brushOption.brushType];\n} // return target panel or `true` (means global panel)\n\n\nfunction getPanelByPoint(controller, e, localCursorPoint) {\n  var panels = controller._panels;\n\n  if (!panels) {\n    return true; // Global panel\n  }\n\n  var panel;\n  var transform = controller._transform;\n  each(panels, function (pn) {\n    pn.isTargetByCursor(e, localCursorPoint, transform) && (panel = pn);\n  });\n  return panel;\n} // Return a panel or true\n\n\nfunction getPanelByCover(controller, cover) {\n  var panels = controller._panels;\n\n  if (!panels) {\n    return true; // Global panel\n  }\n\n  var panelId = cover.__brushOption.panelId; // User may give cover without coord sys info,\n  // which is then treated as global panel.\n\n  return panelId != null ? panels[panelId] : true;\n}\n\nfunction clearCovers(controller) {\n  var covers = controller._covers;\n  var originalLength = covers.length;\n  each(covers, function (cover) {\n    controller.group.remove(cover);\n  }, controller);\n  covers.length = 0;\n  return !!originalLength;\n}\n\nfunction trigger(controller, opt) {\n  var areas = map(controller._covers, function (cover) {\n    var brushOption = cover.__brushOption;\n    var range = zrUtil.clone(brushOption.range);\n    return {\n      brushType: brushOption.brushType,\n      panelId: brushOption.panelId,\n      range: range\n    };\n  });\n  controller.trigger('brush', areas, {\n    isEnd: !!opt.isEnd,\n    removeOnClick: !!opt.removeOnClick\n  });\n}\n\nfunction shouldShowCover(controller) {\n  var track = controller._track;\n\n  if (!track.length) {\n    return false;\n  }\n\n  var p2 = track[track.length - 1];\n  var p1 = track[0];\n  var dx = p2[0] - p1[0];\n  var dy = p2[1] - p1[1];\n  var dist = mathPow(dx * dx + dy * dy, 0.5);\n  return dist > UNSELECT_THRESHOLD;\n}\n\nfunction getTrackEnds(track) {\n  var tail = track.length - 1;\n  tail < 0 && (tail = 0);\n  return [track[0], track[tail]];\n}\n\nfunction createBaseRectCover(doDrift, controller, brushOption, edgeNames) {\n  var cover = new graphic.Group();\n  cover.add(new graphic.Rect({\n    name: 'main',\n    style: makeStyle(brushOption),\n    silent: true,\n    draggable: true,\n    cursor: 'move',\n    drift: curry(doDrift, controller, cover, 'nswe'),\n    ondragend: curry(trigger, controller, {\n      isEnd: true\n    })\n  }));\n  each(edgeNames, function (name) {\n    cover.add(new graphic.Rect({\n      name: name,\n      style: {\n        opacity: 0\n      },\n      draggable: true,\n      silent: true,\n      invisible: true,\n      drift: curry(doDrift, controller, cover, name),\n      ondragend: curry(trigger, controller, {\n        isEnd: true\n      })\n    }));\n  });\n  return cover;\n}\n\nfunction updateBaseRect(controller, cover, localRange, brushOption) {\n  var lineWidth = brushOption.brushStyle.lineWidth || 0;\n  var handleSize = mathMax(lineWidth, MIN_RESIZE_LINE_WIDTH);\n  var x = localRange[0][0];\n  var y = localRange[1][0];\n  var xa = x - lineWidth / 2;\n  var ya = y - lineWidth / 2;\n  var x2 = localRange[0][1];\n  var y2 = localRange[1][1];\n  var x2a = x2 - handleSize + lineWidth / 2;\n  var y2a = y2 - handleSize + lineWidth / 2;\n  var width = x2 - x;\n  var height = y2 - y;\n  var widtha = width + lineWidth;\n  var heighta = height + lineWidth;\n  updateRectShape(controller, cover, 'main', x, y, width, height);\n\n  if (brushOption.transformable) {\n    updateRectShape(controller, cover, 'w', xa, ya, handleSize, heighta);\n    updateRectShape(controller, cover, 'e', x2a, ya, handleSize, heighta);\n    updateRectShape(controller, cover, 'n', xa, ya, widtha, handleSize);\n    updateRectShape(controller, cover, 's', xa, y2a, widtha, handleSize);\n    updateRectShape(controller, cover, 'nw', xa, ya, handleSize, handleSize);\n    updateRectShape(controller, cover, 'ne', x2a, ya, handleSize, handleSize);\n    updateRectShape(controller, cover, 'sw', xa, y2a, handleSize, handleSize);\n    updateRectShape(controller, cover, 'se', x2a, y2a, handleSize, handleSize);\n  }\n}\n\nfunction updateCommon(controller, cover) {\n  var brushOption = cover.__brushOption;\n  var transformable = brushOption.transformable;\n  var mainEl = cover.childAt(0);\n  mainEl.useStyle(makeStyle(brushOption));\n  mainEl.attr({\n    silent: !transformable,\n    cursor: transformable ? 'move' : 'default'\n  });\n  each(['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw'], function (name) {\n    var el = cover.childOfName(name);\n    var globalDir = getGlobalDirection(controller, name);\n    el && el.attr({\n      silent: !transformable,\n      invisible: !transformable,\n      cursor: transformable ? CURSOR_MAP[globalDir] + '-resize' : null\n    });\n  });\n}\n\nfunction updateRectShape(controller, cover, name, x, y, w, h) {\n  var el = cover.childOfName(name);\n  el && el.setShape(pointsToRect(clipByPanel(controller, cover, [[x, y], [x + w, y + h]])));\n}\n\nfunction makeStyle(brushOption) {\n  return zrUtil.defaults({\n    strokeNoScale: true\n  }, brushOption.brushStyle);\n}\n\nfunction formatRectRange(x, y, x2, y2) {\n  var min = [mathMin(x, x2), mathMin(y, y2)];\n  var max = [mathMax(x, x2), mathMax(y, y2)];\n  return [[min[0], max[0]], // x range\n  [min[1], max[1]] // y range\n  ];\n}\n\nfunction getTransform(controller) {\n  return graphic.getTransform(controller.group);\n}\n\nfunction getGlobalDirection(controller, localDirection) {\n  if (localDirection.length > 1) {\n    localDirection = localDirection.split('');\n    var globalDir = [getGlobalDirection(controller, localDirection[0]), getGlobalDirection(controller, localDirection[1])];\n    (globalDir[0] === 'e' || globalDir[0] === 'w') && globalDir.reverse();\n    return globalDir.join('');\n  } else {\n    var map = {\n      w: 'left',\n      e: 'right',\n      n: 'top',\n      s: 'bottom'\n    };\n    var inverseMap = {\n      left: 'w',\n      right: 'e',\n      top: 'n',\n      bottom: 's'\n    };\n    var globalDir = graphic.transformDirection(map[localDirection], getTransform(controller));\n    return inverseMap[globalDir];\n  }\n}\n\nfunction driftRect(toRectRange, fromRectRange, controller, cover, name, dx, dy, e) {\n  var brushOption = cover.__brushOption;\n  var rectRange = toRectRange(brushOption.range);\n  var localDelta = toLocalDelta(controller, dx, dy);\n  each(name.split(''), function (namePart) {\n    var ind = DIRECTION_MAP[namePart];\n    rectRange[ind[0]][ind[1]] += localDelta[ind[0]];\n  });\n  brushOption.range = fromRectRange(formatRectRange(rectRange[0][0], rectRange[1][0], rectRange[0][1], rectRange[1][1]));\n  updateCoverAfterCreation(controller, cover);\n  trigger(controller, {\n    isEnd: false\n  });\n}\n\nfunction driftPolygon(controller, cover, dx, dy, e) {\n  var range = cover.__brushOption.range;\n  var localDelta = toLocalDelta(controller, dx, dy);\n  each(range, function (point) {\n    point[0] += localDelta[0];\n    point[1] += localDelta[1];\n  });\n  updateCoverAfterCreation(controller, cover);\n  trigger(controller, {\n    isEnd: false\n  });\n}\n\nfunction toLocalDelta(controller, dx, dy) {\n  var thisGroup = controller.group;\n  var localD = thisGroup.transformCoordToLocal(dx, dy);\n  var localZero = thisGroup.transformCoordToLocal(0, 0);\n  return [localD[0] - localZero[0], localD[1] - localZero[1]];\n}\n\nfunction clipByPanel(controller, cover, data) {\n  var panel = getPanelByCover(controller, cover);\n  return panel && panel !== true ? panel.clipPath(data, controller._transform) : zrUtil.clone(data);\n}\n\nfunction pointsToRect(points) {\n  var xmin = mathMin(points[0][0], points[1][0]);\n  var ymin = mathMin(points[0][1], points[1][1]);\n  var xmax = mathMax(points[0][0], points[1][0]);\n  var ymax = mathMax(points[0][1], points[1][1]);\n  return {\n    x: xmin,\n    y: ymin,\n    width: xmax - xmin,\n    height: ymax - ymin\n  };\n}\n\nfunction resetCursor(controller, e, localCursorPoint) {\n  if ( // Check active\n  !controller._brushType // resetCursor should be always called when mouse is in zr area,\n  // but not called when mouse is out of zr area to avoid bad influence\n  // if `mousemove`, `mouseup` are triggered from `document` event.\n  || isOutsideZrArea(controller, e)) {\n    return;\n  }\n\n  var zr = controller._zr;\n  var covers = controller._covers;\n  var currPanel = getPanelByPoint(controller, e, localCursorPoint); // Check whether in covers.\n\n  if (!controller._dragging) {\n    for (var i = 0; i < covers.length; i++) {\n      var brushOption = covers[i].__brushOption;\n\n      if (currPanel && (currPanel === true || brushOption.panelId === currPanel.panelId) && coverRenderers[brushOption.brushType].contain(covers[i], localCursorPoint[0], localCursorPoint[1])) {\n        // Use cursor style set on cover.\n        return;\n      }\n    }\n  }\n\n  currPanel && zr.setCursorStyle('crosshair');\n}\n\nfunction preventDefault(e) {\n  var rawE = e.event;\n  rawE.preventDefault && rawE.preventDefault();\n}\n\nfunction mainShapeContain(cover, x, y) {\n  return cover.childOfName('main').contain(x, y);\n}\n\nfunction updateCoverByMouse(controller, e, localCursorPoint, isEnd) {\n  var creatingCover = controller._creatingCover;\n  var panel = controller._creatingPanel;\n  var thisBrushOption = controller._brushOption;\n  var eventParams;\n\n  controller._track.push(localCursorPoint.slice());\n\n  if (shouldShowCover(controller) || creatingCover) {\n    if (panel && !creatingCover) {\n      thisBrushOption.brushMode === 'single' && clearCovers(controller);\n      var brushOption = zrUtil.clone(thisBrushOption);\n      brushOption.brushType = determineBrushType(brushOption.brushType, panel);\n      brushOption.panelId = panel === true ? null : panel.panelId;\n      creatingCover = controller._creatingCover = createCover(controller, brushOption);\n\n      controller._covers.push(creatingCover);\n    }\n\n    if (creatingCover) {\n      var coverRenderer = coverRenderers[determineBrushType(controller._brushType, panel)];\n      var coverBrushOption = creatingCover.__brushOption;\n      coverBrushOption.range = coverRenderer.getCreatingRange(clipByPanel(controller, creatingCover, controller._track));\n\n      if (isEnd) {\n        endCreating(controller, creatingCover);\n        coverRenderer.updateCommon(controller, creatingCover);\n      }\n\n      updateCoverShape(controller, creatingCover);\n      eventParams = {\n        isEnd: isEnd\n      };\n    }\n  } else if (isEnd && thisBrushOption.brushMode === 'single' && thisBrushOption.removeOnClick) {\n    // Help user to remove covers easily, only by a tiny drag, in 'single' mode.\n    // But a single click do not clear covers, because user may have casual\n    // clicks (for example, click on other component and do not expect covers\n    // disappear).\n    // Only some cover removed, trigger action, but not every click trigger action.\n    if (getPanelByPoint(controller, e, localCursorPoint) && clearCovers(controller)) {\n      eventParams = {\n        isEnd: isEnd,\n        removeOnClick: true\n      };\n    }\n  }\n\n  return eventParams;\n}\n\nfunction determineBrushType(brushType, panel) {\n  if (brushType === 'auto') {\n    return panel.defaultBrushType;\n  }\n\n  return brushType;\n}\n\nvar pointerHandlers = {\n  mousedown: function (e) {\n    if (this._dragging) {\n      // In case some browser do not support globalOut,\n      // and release mose out side the browser.\n      handleDragEnd(this, e);\n    } else if (!e.target || !e.target.draggable) {\n      preventDefault(e);\n      var localCursorPoint = this.group.transformCoordToLocal(e.offsetX, e.offsetY);\n      this._creatingCover = null;\n      var panel = this._creatingPanel = getPanelByPoint(this, e, localCursorPoint);\n\n      if (panel) {\n        this._dragging = true;\n        this._track = [localCursorPoint.slice()];\n      }\n    }\n  },\n  mousemove: function (e) {\n    var x = e.offsetX;\n    var y = e.offsetY;\n    var localCursorPoint = this.group.transformCoordToLocal(x, y);\n    resetCursor(this, e, localCursorPoint);\n\n    if (this._dragging) {\n      preventDefault(e);\n      var eventParams = updateCoverByMouse(this, e, localCursorPoint, false);\n      eventParams && trigger(this, eventParams);\n    }\n  },\n  mouseup: function (e) {\n    handleDragEnd(this, e);\n  }\n};\n\nfunction handleDragEnd(controller, e) {\n  if (controller._dragging) {\n    preventDefault(e);\n    var x = e.offsetX;\n    var y = e.offsetY;\n    var localCursorPoint = controller.group.transformCoordToLocal(x, y);\n    var eventParams = updateCoverByMouse(controller, e, localCursorPoint, true);\n    controller._dragging = false;\n    controller._track = [];\n    controller._creatingCover = null; // trigger event shoule be at final, after procedure will be nested.\n\n    eventParams && trigger(controller, eventParams);\n  }\n}\n\nfunction isOutsideZrArea(controller, x, y) {\n  var zr = controller._zr;\n  return x < 0 || x > zr.getWidth() || y < 0 || y > zr.getHeight();\n}\n/**\n * key: brushType\n * @type {Object}\n */\n\n\nvar coverRenderers = {\n  lineX: getLineRenderer(0),\n  lineY: getLineRenderer(1),\n  rect: {\n    createCover: function (controller, brushOption) {\n      return createBaseRectCover(curry(driftRect, function (range) {\n        return range;\n      }, function (range) {\n        return range;\n      }), controller, brushOption, ['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw']);\n    },\n    getCreatingRange: function (localTrack) {\n      var ends = getTrackEnds(localTrack);\n      return formatRectRange(ends[1][0], ends[1][1], ends[0][0], ends[0][1]);\n    },\n    updateCoverShape: function (controller, cover, localRange, brushOption) {\n      updateBaseRect(controller, cover, localRange, brushOption);\n    },\n    updateCommon: updateCommon,\n    contain: mainShapeContain\n  },\n  polygon: {\n    createCover: function (controller, brushOption) {\n      var cover = new graphic.Group(); // Do not use graphic.Polygon because graphic.Polyline do not close the\n      // border of the shape when drawing, which is a better experience for user.\n\n      cover.add(new graphic.Polyline({\n        name: 'main',\n        style: makeStyle(brushOption),\n        silent: true\n      }));\n      return cover;\n    },\n    getCreatingRange: function (localTrack) {\n      return localTrack;\n    },\n    endCreating: function (controller, cover) {\n      cover.remove(cover.childAt(0)); // Use graphic.Polygon close the shape.\n\n      cover.add(new graphic.Polygon({\n        name: 'main',\n        draggable: true,\n        drift: curry(driftPolygon, controller, cover),\n        ondragend: curry(trigger, controller, {\n          isEnd: true\n        })\n      }));\n    },\n    updateCoverShape: function (controller, cover, localRange, brushOption) {\n      cover.childAt(0).setShape({\n        points: clipByPanel(controller, cover, localRange)\n      });\n    },\n    updateCommon: updateCommon,\n    contain: mainShapeContain\n  }\n};\n\nfunction getLineRenderer(xyIndex) {\n  return {\n    createCover: function (controller, brushOption) {\n      return createBaseRectCover(curry(driftRect, function (range) {\n        var rectRange = [range, [0, 100]];\n        xyIndex && rectRange.reverse();\n        return rectRange;\n      }, function (rectRange) {\n        return rectRange[xyIndex];\n      }), controller, brushOption, [['w', 'e'], ['n', 's']][xyIndex]);\n    },\n    getCreatingRange: function (localTrack) {\n      var ends = getTrackEnds(localTrack);\n      var min = mathMin(ends[0][xyIndex], ends[1][xyIndex]);\n      var max = mathMax(ends[0][xyIndex], ends[1][xyIndex]);\n      return [min, max];\n    },\n    updateCoverShape: function (controller, cover, localRange, brushOption) {\n      var otherExtent; // If brushWidth not specified, fit the panel.\n\n      var panel = getPanelByCover(controller, cover);\n\n      if (panel !== true && panel.getLinearBrushOtherExtent) {\n        otherExtent = panel.getLinearBrushOtherExtent(xyIndex, controller._transform);\n      } else {\n        var zr = controller._zr;\n        otherExtent = [0, [zr.getWidth(), zr.getHeight()][1 - xyIndex]];\n      }\n\n      var rectRange = [localRange, otherExtent];\n      xyIndex && rectRange.reverse();\n      updateBaseRect(controller, cover, rectRange, brushOption);\n    },\n    updateCommon: updateCommon,\n    contain: mainShapeContain\n  };\n}\n\nvar _default = BrushController;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}