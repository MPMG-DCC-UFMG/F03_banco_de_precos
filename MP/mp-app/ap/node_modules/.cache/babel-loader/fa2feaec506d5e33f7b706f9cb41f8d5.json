{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar AxisBuilder = require(\"./AxisBuilder\");\n\nvar AxisView = require(\"./AxisView\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\nvar selfBuilderAttrs = ['splitLine', 'splitArea', 'minorSplitLine'];\n\nvar _default = AxisView.extend({\n  type: 'radiusAxis',\n  axisPointerClass: 'PolarAxisPointer',\n  render: function render(radiusAxisModel, ecModel) {\n    this.group.removeAll();\n\n    if (!radiusAxisModel.get('show')) {\n      return;\n    }\n\n    var radiusAxis = radiusAxisModel.axis;\n    var polar = radiusAxis.polar;\n    var angleAxis = polar.getAngleAxis();\n    var ticksCoords = radiusAxis.getTicksCoords();\n    var minorTicksCoords = radiusAxis.getMinorTicksCoords();\n    var axisAngle = angleAxis.getExtent()[0];\n    var radiusExtent = radiusAxis.getExtent();\n    var layout = layoutAxis(polar, radiusAxisModel, axisAngle);\n    var axisBuilder = new AxisBuilder(radiusAxisModel, layout);\n    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n    this.group.add(axisBuilder.getGroup());\n    zrUtil.each(selfBuilderAttrs, function (name) {\n      if (radiusAxisModel.get(name + '.show') && !radiusAxis.scale.isBlank()) {\n        this['_' + name](radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords, minorTicksCoords);\n      }\n    }, this);\n  },\n\n  /**\n   * @private\n   */\n  _splitLine: function _splitLine(radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {\n    var splitLineModel = radiusAxisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineColors = lineStyleModel.get('color');\n    var lineCount = 0;\n    lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n    var splitLines = [];\n\n    for (var i = 0; i < ticksCoords.length; i++) {\n      var colorIndex = lineCount++ % lineColors.length;\n      splitLines[colorIndex] = splitLines[colorIndex] || [];\n      splitLines[colorIndex].push(new graphic.Circle({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r: ticksCoords[i].coord\n        }\n      }));\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitLines.length; i++) {\n      this.group.add(graphic.mergePath(splitLines[i], {\n        style: zrUtil.defaults({\n          stroke: lineColors[i % lineColors.length],\n          fill: null\n        }, lineStyleModel.getLineStyle()),\n        silent: true\n      }));\n    }\n  },\n\n  /**\n   * @private\n   */\n  _minorSplitLine: function _minorSplitLine(radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords, minorTicksCoords) {\n    if (!minorTicksCoords.length) {\n      return;\n    }\n\n    var minorSplitLineModel = radiusAxisModel.getModel('minorSplitLine');\n    var lineStyleModel = minorSplitLineModel.getModel('lineStyle');\n    var lines = [];\n\n    for (var i = 0; i < minorTicksCoords.length; i++) {\n      for (var k = 0; k < minorTicksCoords[i].length; k++) {\n        lines.push(new graphic.Circle({\n          shape: {\n            cx: polar.cx,\n            cy: polar.cy,\n            r: minorTicksCoords[i][k].coord\n          }\n        }));\n      }\n    }\n\n    this.group.add(graphic.mergePath(lines, {\n      style: zrUtil.defaults({\n        fill: null\n      }, lineStyleModel.getLineStyle()),\n      silent: true\n    }));\n  },\n\n  /**\n   * @private\n   */\n  _splitArea: function _splitArea(radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {\n    if (!ticksCoords.length) {\n      return;\n    }\n\n    var splitAreaModel = radiusAxisModel.getModel('splitArea');\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\n    var areaColors = areaStyleModel.get('color');\n    var lineCount = 0;\n    areaColors = areaColors instanceof Array ? areaColors : [areaColors];\n    var splitAreas = [];\n    var prevRadius = ticksCoords[0].coord;\n\n    for (var i = 1; i < ticksCoords.length; i++) {\n      var colorIndex = lineCount++ % areaColors.length;\n      splitAreas[colorIndex] = splitAreas[colorIndex] || [];\n      splitAreas[colorIndex].push(new graphic.Sector({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r0: prevRadius,\n          r: ticksCoords[i].coord,\n          startAngle: 0,\n          endAngle: Math.PI * 2\n        },\n        silent: true\n      }));\n      prevRadius = ticksCoords[i].coord;\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitAreas.length; i++) {\n      this.group.add(graphic.mergePath(splitAreas[i], {\n        style: zrUtil.defaults({\n          fill: areaColors[i % areaColors.length]\n        }, areaStyleModel.getAreaStyle()),\n        silent: true\n      }));\n    }\n  }\n});\n/**\n * @inner\n */\n\n\nfunction layoutAxis(polar, radiusAxisModel, axisAngle) {\n  return {\n    position: [polar.cx, polar.cy],\n    rotation: axisAngle / 180 * Math.PI,\n    labelDirection: -1,\n    tickDirection: -1,\n    nameDirection: 1,\n    labelRotate: radiusAxisModel.getModel('axisLabel').get('rotate'),\n    // Over splitLine and splitArea\n    z2: 1\n  };\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/component/axis/RadiusAxisView.js"],"names":["zrUtil","require","graphic","AxisBuilder","AxisView","axisBuilderAttrs","selfBuilderAttrs","_default","extend","type","axisPointerClass","render","radiusAxisModel","ecModel","group","removeAll","get","radiusAxis","axis","polar","angleAxis","getAngleAxis","ticksCoords","getTicksCoords","minorTicksCoords","getMinorTicksCoords","axisAngle","getExtent","radiusExtent","layout","layoutAxis","axisBuilder","each","add","getGroup","name","scale","isBlank","_splitLine","splitLineModel","getModel","lineStyleModel","lineColors","lineCount","Array","splitLines","i","length","colorIndex","push","Circle","shape","cx","cy","r","coord","mergePath","style","defaults","stroke","fill","getLineStyle","silent","_minorSplitLine","minorSplitLineModel","lines","k","_splitArea","splitAreaModel","areaStyleModel","areaColors","splitAreas","prevRadius","Sector","r0","startAngle","endAngle","Math","PI","getAreaStyle","position","rotation","labelDirection","tickDirection","nameDirection","labelRotate","z2","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar AxisBuilder = require(\"./AxisBuilder\");\n\nvar AxisView = require(\"./AxisView\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\nvar selfBuilderAttrs = ['splitLine', 'splitArea', 'minorSplitLine'];\n\nvar _default = AxisView.extend({\n  type: 'radiusAxis',\n  axisPointerClass: 'PolarAxisPointer',\n  render: function (radiusAxisModel, ecModel) {\n    this.group.removeAll();\n\n    if (!radiusAxisModel.get('show')) {\n      return;\n    }\n\n    var radiusAxis = radiusAxisModel.axis;\n    var polar = radiusAxis.polar;\n    var angleAxis = polar.getAngleAxis();\n    var ticksCoords = radiusAxis.getTicksCoords();\n    var minorTicksCoords = radiusAxis.getMinorTicksCoords();\n    var axisAngle = angleAxis.getExtent()[0];\n    var radiusExtent = radiusAxis.getExtent();\n    var layout = layoutAxis(polar, radiusAxisModel, axisAngle);\n    var axisBuilder = new AxisBuilder(radiusAxisModel, layout);\n    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n    this.group.add(axisBuilder.getGroup());\n    zrUtil.each(selfBuilderAttrs, function (name) {\n      if (radiusAxisModel.get(name + '.show') && !radiusAxis.scale.isBlank()) {\n        this['_' + name](radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords, minorTicksCoords);\n      }\n    }, this);\n  },\n\n  /**\n   * @private\n   */\n  _splitLine: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {\n    var splitLineModel = radiusAxisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineColors = lineStyleModel.get('color');\n    var lineCount = 0;\n    lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n    var splitLines = [];\n\n    for (var i = 0; i < ticksCoords.length; i++) {\n      var colorIndex = lineCount++ % lineColors.length;\n      splitLines[colorIndex] = splitLines[colorIndex] || [];\n      splitLines[colorIndex].push(new graphic.Circle({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r: ticksCoords[i].coord\n        }\n      }));\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitLines.length; i++) {\n      this.group.add(graphic.mergePath(splitLines[i], {\n        style: zrUtil.defaults({\n          stroke: lineColors[i % lineColors.length],\n          fill: null\n        }, lineStyleModel.getLineStyle()),\n        silent: true\n      }));\n    }\n  },\n\n  /**\n   * @private\n   */\n  _minorSplitLine: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords, minorTicksCoords) {\n    if (!minorTicksCoords.length) {\n      return;\n    }\n\n    var minorSplitLineModel = radiusAxisModel.getModel('minorSplitLine');\n    var lineStyleModel = minorSplitLineModel.getModel('lineStyle');\n    var lines = [];\n\n    for (var i = 0; i < minorTicksCoords.length; i++) {\n      for (var k = 0; k < minorTicksCoords[i].length; k++) {\n        lines.push(new graphic.Circle({\n          shape: {\n            cx: polar.cx,\n            cy: polar.cy,\n            r: minorTicksCoords[i][k].coord\n          }\n        }));\n      }\n    }\n\n    this.group.add(graphic.mergePath(lines, {\n      style: zrUtil.defaults({\n        fill: null\n      }, lineStyleModel.getLineStyle()),\n      silent: true\n    }));\n  },\n\n  /**\n   * @private\n   */\n  _splitArea: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {\n    if (!ticksCoords.length) {\n      return;\n    }\n\n    var splitAreaModel = radiusAxisModel.getModel('splitArea');\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\n    var areaColors = areaStyleModel.get('color');\n    var lineCount = 0;\n    areaColors = areaColors instanceof Array ? areaColors : [areaColors];\n    var splitAreas = [];\n    var prevRadius = ticksCoords[0].coord;\n\n    for (var i = 1; i < ticksCoords.length; i++) {\n      var colorIndex = lineCount++ % areaColors.length;\n      splitAreas[colorIndex] = splitAreas[colorIndex] || [];\n      splitAreas[colorIndex].push(new graphic.Sector({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r0: prevRadius,\n          r: ticksCoords[i].coord,\n          startAngle: 0,\n          endAngle: Math.PI * 2\n        },\n        silent: true\n      }));\n      prevRadius = ticksCoords[i].coord;\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitAreas.length; i++) {\n      this.group.add(graphic.mergePath(splitAreas[i], {\n        style: zrUtil.defaults({\n          fill: areaColors[i % areaColors.length]\n        }, areaStyleModel.getAreaStyle()),\n        silent: true\n      }));\n    }\n  }\n});\n/**\n * @inner\n */\n\n\nfunction layoutAxis(polar, radiusAxisModel, axisAngle) {\n  return {\n    position: [polar.cx, polar.cy],\n    rotation: axisAngle / 180 * Math.PI,\n    labelDirection: -1,\n    tickDirection: -1,\n    nameDirection: 1,\n    labelRotate: radiusAxisModel.getModel('axisLabel').get('rotate'),\n    // Over splitLine and splitArea\n    z2: 1\n  };\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}