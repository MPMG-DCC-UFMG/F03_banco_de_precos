{"ast":null,"code":"var guid = require(\"./core/guid\");\n\nvar Eventful = require(\"./mixin/Eventful\");\n\nvar Transformable = require(\"./mixin/Transformable\");\n\nvar Animatable = require(\"./mixin/Animatable\");\n\nvar zrUtil = require(\"./core/util\");\n/**\n * @alias module:zrender/Element\n * @constructor\n * @extends {module:zrender/mixin/Animatable}\n * @extends {module:zrender/mixin/Transformable}\n * @extends {module:zrender/mixin/Eventful}\n */\n\n\nvar Element = function Element(opts) {\n  // jshint ignore:line\n  Transformable.call(this, opts);\n  Eventful.call(this, opts);\n  Animatable.call(this, opts);\n  /**\n   * 画布元素ID\n   * @type {string}\n   */\n\n  this.id = opts.id || guid();\n};\n\nElement.prototype = {\n  /**\n   * 元素类型\n   * Element type\n   * @type {string}\n   */\n  type: 'element',\n\n  /**\n   * 元素名字\n   * Element name\n   * @type {string}\n   */\n  name: '',\n\n  /**\n   * ZRender 实例对象，会在 element 添加到 zrender 实例中后自动赋值\n   * ZRender instance will be assigned when element is associated with zrender\n   * @name module:/zrender/Element#__zr\n   * @type {module:zrender/ZRender}\n   */\n  __zr: null,\n\n  /**\n   * 图形是否忽略，为true时忽略图形的绘制以及事件触发\n   * If ignore drawing and events of the element object\n   * @name module:/zrender/Element#ignore\n   * @type {boolean}\n   * @default false\n   */\n  ignore: false,\n\n  /**\n   * 用于裁剪的路径(shape)，所有 Group 内的路径在绘制时都会被这个路径裁剪\n   * 该路径会继承被裁减对象的变换\n   * @type {module:zrender/graphic/Path}\n   * @see http://www.w3.org/TR/2dcontext/#clipping-region\n   * @readOnly\n   */\n  clipPath: null,\n\n  /**\n   * 是否是 Group\n   * @type {boolean}\n   */\n  isGroup: false,\n\n  /**\n   * Drift element\n   * @param  {number} dx dx on the global space\n   * @param  {number} dy dy on the global space\n   */\n  drift: function drift(dx, dy) {\n    switch (this.draggable) {\n      case 'horizontal':\n        dy = 0;\n        break;\n\n      case 'vertical':\n        dx = 0;\n        break;\n    }\n\n    var m = this.transform;\n\n    if (!m) {\n      m = this.transform = [1, 0, 0, 1, 0, 0];\n    }\n\n    m[4] += dx;\n    m[5] += dy;\n    this.decomposeTransform();\n    this.dirty(false);\n  },\n\n  /**\n   * Hook before update\n   */\n  beforeUpdate: function beforeUpdate() {},\n\n  /**\n   * Hook after update\n   */\n  afterUpdate: function afterUpdate() {},\n\n  /**\n   * Update each frame\n   */\n  update: function update() {\n    this.updateTransform();\n  },\n\n  /**\n   * @param  {Function} cb\n   * @param  {}   context\n   */\n  traverse: function traverse(cb, context) {},\n\n  /**\n   * @protected\n   */\n  attrKV: function attrKV(key, value) {\n    if (key === 'position' || key === 'scale' || key === 'origin') {\n      // Copy the array\n      if (value) {\n        var target = this[key];\n\n        if (!target) {\n          target = this[key] = [];\n        }\n\n        target[0] = value[0];\n        target[1] = value[1];\n      }\n    } else {\n      this[key] = value;\n    }\n  },\n\n  /**\n   * Hide the element\n   */\n  hide: function hide() {\n    this.ignore = true;\n    this.__zr && this.__zr.refresh();\n  },\n\n  /**\n   * Show the element\n   */\n  show: function show() {\n    this.ignore = false;\n    this.__zr && this.__zr.refresh();\n  },\n\n  /**\n   * @param {string|Object} key\n   * @param {*} value\n   */\n  attr: function attr(key, value) {\n    if (typeof key === 'string') {\n      this.attrKV(key, value);\n    } else if (zrUtil.isObject(key)) {\n      for (var name in key) {\n        if (key.hasOwnProperty(name)) {\n          this.attrKV(name, key[name]);\n        }\n      }\n    }\n\n    this.dirty(false);\n    return this;\n  },\n\n  /**\n   * @param {module:zrender/graphic/Path} clipPath\n   */\n  setClipPath: function setClipPath(clipPath) {\n    var zr = this.__zr;\n\n    if (zr) {\n      clipPath.addSelfToZr(zr);\n    } // Remove previous clip path\n\n\n    if (this.clipPath && this.clipPath !== clipPath) {\n      this.removeClipPath();\n    }\n\n    this.clipPath = clipPath;\n    clipPath.__zr = zr;\n    clipPath.__clipTarget = this;\n    this.dirty(false);\n  },\n\n  /**\n   */\n  removeClipPath: function removeClipPath() {\n    var clipPath = this.clipPath;\n\n    if (clipPath) {\n      if (clipPath.__zr) {\n        clipPath.removeSelfFromZr(clipPath.__zr);\n      }\n\n      clipPath.__zr = null;\n      clipPath.__clipTarget = null;\n      this.clipPath = null;\n      this.dirty(false);\n    }\n  },\n\n  /**\n   * Add self from zrender instance.\n   * Not recursively because it will be invoked when element added to storage.\n   * @param {module:zrender/ZRender} zr\n   */\n  addSelfToZr: function addSelfToZr(zr) {\n    this.__zr = zr; // 添加动画\n\n    var animators = this.animators;\n\n    if (animators) {\n      for (var i = 0; i < animators.length; i++) {\n        zr.animation.addAnimator(animators[i]);\n      }\n    }\n\n    if (this.clipPath) {\n      this.clipPath.addSelfToZr(zr);\n    }\n  },\n\n  /**\n   * Remove self from zrender instance.\n   * Not recursively because it will be invoked when element added to storage.\n   * @param {module:zrender/ZRender} zr\n   */\n  removeSelfFromZr: function removeSelfFromZr(zr) {\n    this.__zr = null; // 移除动画\n\n    var animators = this.animators;\n\n    if (animators) {\n      for (var i = 0; i < animators.length; i++) {\n        zr.animation.removeAnimator(animators[i]);\n      }\n    }\n\n    if (this.clipPath) {\n      this.clipPath.removeSelfFromZr(zr);\n    }\n  }\n};\nzrUtil.mixin(Element, Animatable);\nzrUtil.mixin(Element, Transformable);\nzrUtil.mixin(Element, Eventful);\nvar _default = Element;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/zrender/lib/Element.js"],"names":["guid","require","Eventful","Transformable","Animatable","zrUtil","Element","opts","call","id","prototype","type","name","__zr","ignore","clipPath","isGroup","drift","dx","dy","draggable","m","transform","decomposeTransform","dirty","beforeUpdate","afterUpdate","update","updateTransform","traverse","cb","context","attrKV","key","value","target","hide","refresh","show","attr","isObject","hasOwnProperty","setClipPath","zr","addSelfToZr","removeClipPath","__clipTarget","removeSelfFromZr","animators","i","length","animation","addAnimator","removeAnimator","mixin","_default","module","exports"],"mappings":"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","sourcesContent":["var guid = require(\"./core/guid\");\n\nvar Eventful = require(\"./mixin/Eventful\");\n\nvar Transformable = require(\"./mixin/Transformable\");\n\nvar Animatable = require(\"./mixin/Animatable\");\n\nvar zrUtil = require(\"./core/util\");\n\n/**\n * @alias module:zrender/Element\n * @constructor\n * @extends {module:zrender/mixin/Animatable}\n * @extends {module:zrender/mixin/Transformable}\n * @extends {module:zrender/mixin/Eventful}\n */\nvar Element = function (opts) {\n  // jshint ignore:line\n  Transformable.call(this, opts);\n  Eventful.call(this, opts);\n  Animatable.call(this, opts);\n  /**\n   * 画布元素ID\n   * @type {string}\n   */\n\n  this.id = opts.id || guid();\n};\n\nElement.prototype = {\n  /**\n   * 元素类型\n   * Element type\n   * @type {string}\n   */\n  type: 'element',\n\n  /**\n   * 元素名字\n   * Element name\n   * @type {string}\n   */\n  name: '',\n\n  /**\n   * ZRender 实例对象，会在 element 添加到 zrender 实例中后自动赋值\n   * ZRender instance will be assigned when element is associated with zrender\n   * @name module:/zrender/Element#__zr\n   * @type {module:zrender/ZRender}\n   */\n  __zr: null,\n\n  /**\n   * 图形是否忽略，为true时忽略图形的绘制以及事件触发\n   * If ignore drawing and events of the element object\n   * @name module:/zrender/Element#ignore\n   * @type {boolean}\n   * @default false\n   */\n  ignore: false,\n\n  /**\n   * 用于裁剪的路径(shape)，所有 Group 内的路径在绘制时都会被这个路径裁剪\n   * 该路径会继承被裁减对象的变换\n   * @type {module:zrender/graphic/Path}\n   * @see http://www.w3.org/TR/2dcontext/#clipping-region\n   * @readOnly\n   */\n  clipPath: null,\n\n  /**\n   * 是否是 Group\n   * @type {boolean}\n   */\n  isGroup: false,\n\n  /**\n   * Drift element\n   * @param  {number} dx dx on the global space\n   * @param  {number} dy dy on the global space\n   */\n  drift: function (dx, dy) {\n    switch (this.draggable) {\n      case 'horizontal':\n        dy = 0;\n        break;\n\n      case 'vertical':\n        dx = 0;\n        break;\n    }\n\n    var m = this.transform;\n\n    if (!m) {\n      m = this.transform = [1, 0, 0, 1, 0, 0];\n    }\n\n    m[4] += dx;\n    m[5] += dy;\n    this.decomposeTransform();\n    this.dirty(false);\n  },\n\n  /**\n   * Hook before update\n   */\n  beforeUpdate: function () {},\n\n  /**\n   * Hook after update\n   */\n  afterUpdate: function () {},\n\n  /**\n   * Update each frame\n   */\n  update: function () {\n    this.updateTransform();\n  },\n\n  /**\n   * @param  {Function} cb\n   * @param  {}   context\n   */\n  traverse: function (cb, context) {},\n\n  /**\n   * @protected\n   */\n  attrKV: function (key, value) {\n    if (key === 'position' || key === 'scale' || key === 'origin') {\n      // Copy the array\n      if (value) {\n        var target = this[key];\n\n        if (!target) {\n          target = this[key] = [];\n        }\n\n        target[0] = value[0];\n        target[1] = value[1];\n      }\n    } else {\n      this[key] = value;\n    }\n  },\n\n  /**\n   * Hide the element\n   */\n  hide: function () {\n    this.ignore = true;\n    this.__zr && this.__zr.refresh();\n  },\n\n  /**\n   * Show the element\n   */\n  show: function () {\n    this.ignore = false;\n    this.__zr && this.__zr.refresh();\n  },\n\n  /**\n   * @param {string|Object} key\n   * @param {*} value\n   */\n  attr: function (key, value) {\n    if (typeof key === 'string') {\n      this.attrKV(key, value);\n    } else if (zrUtil.isObject(key)) {\n      for (var name in key) {\n        if (key.hasOwnProperty(name)) {\n          this.attrKV(name, key[name]);\n        }\n      }\n    }\n\n    this.dirty(false);\n    return this;\n  },\n\n  /**\n   * @param {module:zrender/graphic/Path} clipPath\n   */\n  setClipPath: function (clipPath) {\n    var zr = this.__zr;\n\n    if (zr) {\n      clipPath.addSelfToZr(zr);\n    } // Remove previous clip path\n\n\n    if (this.clipPath && this.clipPath !== clipPath) {\n      this.removeClipPath();\n    }\n\n    this.clipPath = clipPath;\n    clipPath.__zr = zr;\n    clipPath.__clipTarget = this;\n    this.dirty(false);\n  },\n\n  /**\n   */\n  removeClipPath: function () {\n    var clipPath = this.clipPath;\n\n    if (clipPath) {\n      if (clipPath.__zr) {\n        clipPath.removeSelfFromZr(clipPath.__zr);\n      }\n\n      clipPath.__zr = null;\n      clipPath.__clipTarget = null;\n      this.clipPath = null;\n      this.dirty(false);\n    }\n  },\n\n  /**\n   * Add self from zrender instance.\n   * Not recursively because it will be invoked when element added to storage.\n   * @param {module:zrender/ZRender} zr\n   */\n  addSelfToZr: function (zr) {\n    this.__zr = zr; // 添加动画\n\n    var animators = this.animators;\n\n    if (animators) {\n      for (var i = 0; i < animators.length; i++) {\n        zr.animation.addAnimator(animators[i]);\n      }\n    }\n\n    if (this.clipPath) {\n      this.clipPath.addSelfToZr(zr);\n    }\n  },\n\n  /**\n   * Remove self from zrender instance.\n   * Not recursively because it will be invoked when element added to storage.\n   * @param {module:zrender/ZRender} zr\n   */\n  removeSelfFromZr: function (zr) {\n    this.__zr = null; // 移除动画\n\n    var animators = this.animators;\n\n    if (animators) {\n      for (var i = 0; i < animators.length; i++) {\n        zr.animation.removeAnimator(animators[i]);\n      }\n    }\n\n    if (this.clipPath) {\n      this.clipPath.removeSelfFromZr(zr);\n    }\n  }\n};\nzrUtil.mixin(Element, Animatable);\nzrUtil.mixin(Element, Transformable);\nzrUtil.mixin(Element, Eventful);\nvar _default = Element;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}