{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar Model = require(\"../../model/Model\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar each = zrUtil.each;\nvar curry = zrUtil.curry; // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.\n// allAxesInfo should be updated when setOption performed.\n\nfunction collect(ecModel, api) {\n  var result = {\n    /**\n     * key: makeKey(axis.model)\n     * value: {\n     *      axis,\n     *      coordSys,\n     *      axisPointerModel,\n     *      triggerTooltip,\n     *      involveSeries,\n     *      snap,\n     *      seriesModels,\n     *      seriesDataCount\n     * }\n     */\n    axesInfo: {},\n    seriesInvolved: false,\n\n    /**\n     * key: makeKey(coordSys.model)\n     * value: Object: key makeKey(axis.model), value: axisInfo\n     */\n    coordSysAxesInfo: {},\n    coordSysMap: {}\n  };\n  collectAxesInfo(result, ecModel, api); // Check seriesInvolved for performance, in case too many series in some chart.\n\n  result.seriesInvolved && collectSeriesInfo(result, ecModel);\n  return result;\n}\n\nfunction collectAxesInfo(result, ecModel, api) {\n  var globalTooltipModel = ecModel.getComponent('tooltip');\n  var globalAxisPointerModel = ecModel.getComponent('axisPointer'); // links can only be set on global.\n\n  var linksOption = globalAxisPointerModel.get('link', true) || [];\n  var linkGroups = []; // Collect axes info.\n\n  each(api.getCoordinateSystems(), function (coordSys) {\n    // Some coordinate system do not support axes, like geo.\n    if (!coordSys.axisPointerEnabled) {\n      return;\n    }\n\n    var coordSysKey = makeKey(coordSys.model);\n    var axesInfoInCoordSys = result.coordSysAxesInfo[coordSysKey] = {};\n    result.coordSysMap[coordSysKey] = coordSys; // Set tooltip (like 'cross') is a convienent way to show axisPointer\n    // for user. So we enable seting tooltip on coordSys model.\n\n    var coordSysModel = coordSys.model;\n    var baseTooltipModel = coordSysModel.getModel('tooltip', globalTooltipModel);\n    each(coordSys.getAxes(), curry(saveTooltipAxisInfo, false, null)); // If axis tooltip used, choose tooltip axis for each coordSys.\n    // Notice this case: coordSys is `grid` but not `cartesian2D` here.\n\n    if (coordSys.getTooltipAxes && globalTooltipModel // If tooltip.showContent is set as false, tooltip will not\n    // show but axisPointer will show as normal.\n    && baseTooltipModel.get('show')) {\n      // Compatible with previous logic. But series.tooltip.trigger: 'axis'\n      // or series.data[n].tooltip.trigger: 'axis' are not support any more.\n      var triggerAxis = baseTooltipModel.get('trigger') === 'axis';\n      var cross = baseTooltipModel.get('axisPointer.type') === 'cross';\n      var tooltipAxes = coordSys.getTooltipAxes(baseTooltipModel.get('axisPointer.axis'));\n\n      if (triggerAxis || cross) {\n        each(tooltipAxes.baseAxes, curry(saveTooltipAxisInfo, cross ? 'cross' : true, triggerAxis));\n      }\n\n      if (cross) {\n        each(tooltipAxes.otherAxes, curry(saveTooltipAxisInfo, 'cross', false));\n      }\n    } // fromTooltip: true | false | 'cross'\n    // triggerTooltip: true | false | null\n\n\n    function saveTooltipAxisInfo(fromTooltip, triggerTooltip, axis) {\n      var axisPointerModel = axis.model.getModel('axisPointer', globalAxisPointerModel);\n      var axisPointerShow = axisPointerModel.get('show');\n\n      if (!axisPointerShow || axisPointerShow === 'auto' && !fromTooltip && !isHandleTrigger(axisPointerModel)) {\n        return;\n      }\n\n      if (triggerTooltip == null) {\n        triggerTooltip = axisPointerModel.get('triggerTooltip');\n      }\n\n      axisPointerModel = fromTooltip ? makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) : axisPointerModel;\n      var snap = axisPointerModel.get('snap');\n      var key = makeKey(axis.model);\n      var involveSeries = triggerTooltip || snap || axis.type === 'category'; // If result.axesInfo[key] exist, override it (tooltip has higher priority).\n\n      var axisInfo = result.axesInfo[key] = {\n        key: key,\n        axis: axis,\n        coordSys: coordSys,\n        axisPointerModel: axisPointerModel,\n        triggerTooltip: triggerTooltip,\n        involveSeries: involveSeries,\n        snap: snap,\n        useHandle: isHandleTrigger(axisPointerModel),\n        seriesModels: []\n      };\n      axesInfoInCoordSys[key] = axisInfo;\n      result.seriesInvolved |= involveSeries;\n      var groupIndex = getLinkGroupIndex(linksOption, axis);\n\n      if (groupIndex != null) {\n        var linkGroup = linkGroups[groupIndex] || (linkGroups[groupIndex] = {\n          axesInfo: {}\n        });\n        linkGroup.axesInfo[key] = axisInfo;\n        linkGroup.mapper = linksOption[groupIndex].mapper;\n        axisInfo.linkGroup = linkGroup;\n      }\n    }\n  });\n}\n\nfunction makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) {\n  var tooltipAxisPointerModel = baseTooltipModel.getModel('axisPointer');\n  var volatileOption = {};\n  each(['type', 'snap', 'lineStyle', 'shadowStyle', 'label', 'animation', 'animationDurationUpdate', 'animationEasingUpdate', 'z'], function (field) {\n    volatileOption[field] = zrUtil.clone(tooltipAxisPointerModel.get(field));\n  }); // category axis do not auto snap, otherwise some tick that do not\n  // has value can not be hovered. value/time/log axis default snap if\n  // triggered from tooltip and trigger tooltip.\n\n  volatileOption.snap = axis.type !== 'category' && !!triggerTooltip; // Compatibel with previous behavior, tooltip axis do not show label by default.\n  // Only these properties can be overrided from tooltip to axisPointer.\n\n  if (tooltipAxisPointerModel.get('type') === 'cross') {\n    volatileOption.type = 'line';\n  }\n\n  var labelOption = volatileOption.label || (volatileOption.label = {}); // Follow the convention, do not show label when triggered by tooltip by default.\n\n  labelOption.show == null && (labelOption.show = false);\n\n  if (fromTooltip === 'cross') {\n    // When 'cross', both axes show labels.\n    var tooltipAxisPointerLabelShow = tooltipAxisPointerModel.get('label.show');\n    labelOption.show = tooltipAxisPointerLabelShow != null ? tooltipAxisPointerLabelShow : true; // If triggerTooltip, this is a base axis, which should better not use cross style\n    // (cross style is dashed by default)\n\n    if (!triggerTooltip) {\n      var crossStyle = volatileOption.lineStyle = tooltipAxisPointerModel.get('crossStyle');\n      crossStyle && zrUtil.defaults(labelOption, crossStyle.textStyle);\n    }\n  }\n\n  return axis.model.getModel('axisPointer', new Model(volatileOption, globalAxisPointerModel, ecModel));\n}\n\nfunction collectSeriesInfo(result, ecModel) {\n  // Prepare data for axis trigger\n  ecModel.eachSeries(function (seriesModel) {\n    // Notice this case: this coordSys is `cartesian2D` but not `grid`.\n    var coordSys = seriesModel.coordinateSystem;\n    var seriesTooltipTrigger = seriesModel.get('tooltip.trigger', true);\n    var seriesTooltipShow = seriesModel.get('tooltip.show', true);\n\n    if (!coordSys || seriesTooltipTrigger === 'none' || seriesTooltipTrigger === false || seriesTooltipTrigger === 'item' || seriesTooltipShow === false || seriesModel.get('axisPointer.show', true) === false) {\n      return;\n    }\n\n    each(result.coordSysAxesInfo[makeKey(coordSys.model)], function (axisInfo) {\n      var axis = axisInfo.axis;\n\n      if (coordSys.getAxis(axis.dim) === axis) {\n        axisInfo.seriesModels.push(seriesModel);\n        axisInfo.seriesDataCount == null && (axisInfo.seriesDataCount = 0);\n        axisInfo.seriesDataCount += seriesModel.getData().count();\n      }\n    });\n  }, this);\n}\n/**\n * For example:\n * {\n *     axisPointer: {\n *         links: [{\n *             xAxisIndex: [2, 4],\n *             yAxisIndex: 'all'\n *         }, {\n *             xAxisId: ['a5', 'a7'],\n *             xAxisName: 'xxx'\n *         }]\n *     }\n * }\n */\n\n\nfunction getLinkGroupIndex(linksOption, axis) {\n  var axisModel = axis.model;\n  var dim = axis.dim;\n\n  for (var i = 0; i < linksOption.length; i++) {\n    var linkOption = linksOption[i] || {};\n\n    if (checkPropInLink(linkOption[dim + 'AxisId'], axisModel.id) || checkPropInLink(linkOption[dim + 'AxisIndex'], axisModel.componentIndex) || checkPropInLink(linkOption[dim + 'AxisName'], axisModel.name)) {\n      return i;\n    }\n  }\n}\n\nfunction checkPropInLink(linkPropValue, axisPropValue) {\n  return linkPropValue === 'all' || zrUtil.isArray(linkPropValue) && zrUtil.indexOf(linkPropValue, axisPropValue) >= 0 || linkPropValue === axisPropValue;\n}\n\nfunction fixValue(axisModel) {\n  var axisInfo = getAxisInfo(axisModel);\n\n  if (!axisInfo) {\n    return;\n  }\n\n  var axisPointerModel = axisInfo.axisPointerModel;\n  var scale = axisInfo.axis.scale;\n  var option = axisPointerModel.option;\n  var status = axisPointerModel.get('status');\n  var value = axisPointerModel.get('value'); // Parse init value for category and time axis.\n\n  if (value != null) {\n    value = scale.parse(value);\n  }\n\n  var useHandle = isHandleTrigger(axisPointerModel); // If `handle` used, `axisPointer` will always be displayed, so value\n  // and status should be initialized.\n\n  if (status == null) {\n    option.status = useHandle ? 'show' : 'hide';\n  }\n\n  var extent = scale.getExtent().slice();\n  extent[0] > extent[1] && extent.reverse();\n\n  if ( // Pick a value on axis when initializing.\n  value == null // If both `handle` and `dataZoom` are used, value may be out of axis extent,\n  // where we should re-pick a value to keep `handle` displaying normally.\n  || value > extent[1]) {\n    // Make handle displayed on the end of the axis when init, which looks better.\n    value = extent[1];\n  }\n\n  if (value < extent[0]) {\n    value = extent[0];\n  }\n\n  option.value = value;\n\n  if (useHandle) {\n    option.status = axisInfo.axis.scale.isBlank() ? 'hide' : 'show';\n  }\n}\n\nfunction getAxisInfo(axisModel) {\n  var coordSysAxesInfo = (axisModel.ecModel.getComponent('axisPointer') || {}).coordSysAxesInfo;\n  return coordSysAxesInfo && coordSysAxesInfo.axesInfo[makeKey(axisModel)];\n}\n\nfunction getAxisPointerModel(axisModel) {\n  var axisInfo = getAxisInfo(axisModel);\n  return axisInfo && axisInfo.axisPointerModel;\n}\n\nfunction isHandleTrigger(axisPointerModel) {\n  return !!axisPointerModel.get('handle.show');\n}\n/**\n * @param {module:echarts/model/Model} model\n * @return {string} unique key\n */\n\n\nfunction makeKey(model) {\n  return model.type + '||' + model.id;\n}\n\nexports.collect = collect;\nexports.fixValue = fixValue;\nexports.getAxisInfo = getAxisInfo;\nexports.getAxisPointerModel = getAxisPointerModel;\nexports.makeKey = makeKey;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/component/axisPointer/modelHelper.js"],"names":["zrUtil","require","Model","each","curry","collect","ecModel","api","result","axesInfo","seriesInvolved","coordSysAxesInfo","coordSysMap","collectAxesInfo","collectSeriesInfo","globalTooltipModel","getComponent","globalAxisPointerModel","linksOption","get","linkGroups","getCoordinateSystems","coordSys","axisPointerEnabled","coordSysKey","makeKey","model","axesInfoInCoordSys","coordSysModel","baseTooltipModel","getModel","getAxes","saveTooltipAxisInfo","getTooltipAxes","triggerAxis","cross","tooltipAxes","baseAxes","otherAxes","fromTooltip","triggerTooltip","axis","axisPointerModel","axisPointerShow","isHandleTrigger","makeAxisPointerModel","snap","key","involveSeries","type","axisInfo","useHandle","seriesModels","groupIndex","getLinkGroupIndex","linkGroup","mapper","tooltipAxisPointerModel","volatileOption","field","clone","labelOption","label","show","tooltipAxisPointerLabelShow","crossStyle","lineStyle","defaults","textStyle","eachSeries","seriesModel","coordinateSystem","seriesTooltipTrigger","seriesTooltipShow","getAxis","dim","push","seriesDataCount","getData","count","axisModel","i","length","linkOption","checkPropInLink","id","componentIndex","name","linkPropValue","axisPropValue","isArray","indexOf","fixValue","getAxisInfo","scale","option","status","value","parse","extent","getExtent","slice","reverse","isBlank","getAxisPointerModel","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar Model = require(\"../../model/Model\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar each = zrUtil.each;\nvar curry = zrUtil.curry; // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.\n// allAxesInfo should be updated when setOption performed.\n\nfunction collect(ecModel, api) {\n  var result = {\n    /**\n     * key: makeKey(axis.model)\n     * value: {\n     *      axis,\n     *      coordSys,\n     *      axisPointerModel,\n     *      triggerTooltip,\n     *      involveSeries,\n     *      snap,\n     *      seriesModels,\n     *      seriesDataCount\n     * }\n     */\n    axesInfo: {},\n    seriesInvolved: false,\n\n    /**\n     * key: makeKey(coordSys.model)\n     * value: Object: key makeKey(axis.model), value: axisInfo\n     */\n    coordSysAxesInfo: {},\n    coordSysMap: {}\n  };\n  collectAxesInfo(result, ecModel, api); // Check seriesInvolved for performance, in case too many series in some chart.\n\n  result.seriesInvolved && collectSeriesInfo(result, ecModel);\n  return result;\n}\n\nfunction collectAxesInfo(result, ecModel, api) {\n  var globalTooltipModel = ecModel.getComponent('tooltip');\n  var globalAxisPointerModel = ecModel.getComponent('axisPointer'); // links can only be set on global.\n\n  var linksOption = globalAxisPointerModel.get('link', true) || [];\n  var linkGroups = []; // Collect axes info.\n\n  each(api.getCoordinateSystems(), function (coordSys) {\n    // Some coordinate system do not support axes, like geo.\n    if (!coordSys.axisPointerEnabled) {\n      return;\n    }\n\n    var coordSysKey = makeKey(coordSys.model);\n    var axesInfoInCoordSys = result.coordSysAxesInfo[coordSysKey] = {};\n    result.coordSysMap[coordSysKey] = coordSys; // Set tooltip (like 'cross') is a convienent way to show axisPointer\n    // for user. So we enable seting tooltip on coordSys model.\n\n    var coordSysModel = coordSys.model;\n    var baseTooltipModel = coordSysModel.getModel('tooltip', globalTooltipModel);\n    each(coordSys.getAxes(), curry(saveTooltipAxisInfo, false, null)); // If axis tooltip used, choose tooltip axis for each coordSys.\n    // Notice this case: coordSys is `grid` but not `cartesian2D` here.\n\n    if (coordSys.getTooltipAxes && globalTooltipModel // If tooltip.showContent is set as false, tooltip will not\n    // show but axisPointer will show as normal.\n    && baseTooltipModel.get('show')) {\n      // Compatible with previous logic. But series.tooltip.trigger: 'axis'\n      // or series.data[n].tooltip.trigger: 'axis' are not support any more.\n      var triggerAxis = baseTooltipModel.get('trigger') === 'axis';\n      var cross = baseTooltipModel.get('axisPointer.type') === 'cross';\n      var tooltipAxes = coordSys.getTooltipAxes(baseTooltipModel.get('axisPointer.axis'));\n\n      if (triggerAxis || cross) {\n        each(tooltipAxes.baseAxes, curry(saveTooltipAxisInfo, cross ? 'cross' : true, triggerAxis));\n      }\n\n      if (cross) {\n        each(tooltipAxes.otherAxes, curry(saveTooltipAxisInfo, 'cross', false));\n      }\n    } // fromTooltip: true | false | 'cross'\n    // triggerTooltip: true | false | null\n\n\n    function saveTooltipAxisInfo(fromTooltip, triggerTooltip, axis) {\n      var axisPointerModel = axis.model.getModel('axisPointer', globalAxisPointerModel);\n      var axisPointerShow = axisPointerModel.get('show');\n\n      if (!axisPointerShow || axisPointerShow === 'auto' && !fromTooltip && !isHandleTrigger(axisPointerModel)) {\n        return;\n      }\n\n      if (triggerTooltip == null) {\n        triggerTooltip = axisPointerModel.get('triggerTooltip');\n      }\n\n      axisPointerModel = fromTooltip ? makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) : axisPointerModel;\n      var snap = axisPointerModel.get('snap');\n      var key = makeKey(axis.model);\n      var involveSeries = triggerTooltip || snap || axis.type === 'category'; // If result.axesInfo[key] exist, override it (tooltip has higher priority).\n\n      var axisInfo = result.axesInfo[key] = {\n        key: key,\n        axis: axis,\n        coordSys: coordSys,\n        axisPointerModel: axisPointerModel,\n        triggerTooltip: triggerTooltip,\n        involveSeries: involveSeries,\n        snap: snap,\n        useHandle: isHandleTrigger(axisPointerModel),\n        seriesModels: []\n      };\n      axesInfoInCoordSys[key] = axisInfo;\n      result.seriesInvolved |= involveSeries;\n      var groupIndex = getLinkGroupIndex(linksOption, axis);\n\n      if (groupIndex != null) {\n        var linkGroup = linkGroups[groupIndex] || (linkGroups[groupIndex] = {\n          axesInfo: {}\n        });\n        linkGroup.axesInfo[key] = axisInfo;\n        linkGroup.mapper = linksOption[groupIndex].mapper;\n        axisInfo.linkGroup = linkGroup;\n      }\n    }\n  });\n}\n\nfunction makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) {\n  var tooltipAxisPointerModel = baseTooltipModel.getModel('axisPointer');\n  var volatileOption = {};\n  each(['type', 'snap', 'lineStyle', 'shadowStyle', 'label', 'animation', 'animationDurationUpdate', 'animationEasingUpdate', 'z'], function (field) {\n    volatileOption[field] = zrUtil.clone(tooltipAxisPointerModel.get(field));\n  }); // category axis do not auto snap, otherwise some tick that do not\n  // has value can not be hovered. value/time/log axis default snap if\n  // triggered from tooltip and trigger tooltip.\n\n  volatileOption.snap = axis.type !== 'category' && !!triggerTooltip; // Compatibel with previous behavior, tooltip axis do not show label by default.\n  // Only these properties can be overrided from tooltip to axisPointer.\n\n  if (tooltipAxisPointerModel.get('type') === 'cross') {\n    volatileOption.type = 'line';\n  }\n\n  var labelOption = volatileOption.label || (volatileOption.label = {}); // Follow the convention, do not show label when triggered by tooltip by default.\n\n  labelOption.show == null && (labelOption.show = false);\n\n  if (fromTooltip === 'cross') {\n    // When 'cross', both axes show labels.\n    var tooltipAxisPointerLabelShow = tooltipAxisPointerModel.get('label.show');\n    labelOption.show = tooltipAxisPointerLabelShow != null ? tooltipAxisPointerLabelShow : true; // If triggerTooltip, this is a base axis, which should better not use cross style\n    // (cross style is dashed by default)\n\n    if (!triggerTooltip) {\n      var crossStyle = volatileOption.lineStyle = tooltipAxisPointerModel.get('crossStyle');\n      crossStyle && zrUtil.defaults(labelOption, crossStyle.textStyle);\n    }\n  }\n\n  return axis.model.getModel('axisPointer', new Model(volatileOption, globalAxisPointerModel, ecModel));\n}\n\nfunction collectSeriesInfo(result, ecModel) {\n  // Prepare data for axis trigger\n  ecModel.eachSeries(function (seriesModel) {\n    // Notice this case: this coordSys is `cartesian2D` but not `grid`.\n    var coordSys = seriesModel.coordinateSystem;\n    var seriesTooltipTrigger = seriesModel.get('tooltip.trigger', true);\n    var seriesTooltipShow = seriesModel.get('tooltip.show', true);\n\n    if (!coordSys || seriesTooltipTrigger === 'none' || seriesTooltipTrigger === false || seriesTooltipTrigger === 'item' || seriesTooltipShow === false || seriesModel.get('axisPointer.show', true) === false) {\n      return;\n    }\n\n    each(result.coordSysAxesInfo[makeKey(coordSys.model)], function (axisInfo) {\n      var axis = axisInfo.axis;\n\n      if (coordSys.getAxis(axis.dim) === axis) {\n        axisInfo.seriesModels.push(seriesModel);\n        axisInfo.seriesDataCount == null && (axisInfo.seriesDataCount = 0);\n        axisInfo.seriesDataCount += seriesModel.getData().count();\n      }\n    });\n  }, this);\n}\n/**\n * For example:\n * {\n *     axisPointer: {\n *         links: [{\n *             xAxisIndex: [2, 4],\n *             yAxisIndex: 'all'\n *         }, {\n *             xAxisId: ['a5', 'a7'],\n *             xAxisName: 'xxx'\n *         }]\n *     }\n * }\n */\n\n\nfunction getLinkGroupIndex(linksOption, axis) {\n  var axisModel = axis.model;\n  var dim = axis.dim;\n\n  for (var i = 0; i < linksOption.length; i++) {\n    var linkOption = linksOption[i] || {};\n\n    if (checkPropInLink(linkOption[dim + 'AxisId'], axisModel.id) || checkPropInLink(linkOption[dim + 'AxisIndex'], axisModel.componentIndex) || checkPropInLink(linkOption[dim + 'AxisName'], axisModel.name)) {\n      return i;\n    }\n  }\n}\n\nfunction checkPropInLink(linkPropValue, axisPropValue) {\n  return linkPropValue === 'all' || zrUtil.isArray(linkPropValue) && zrUtil.indexOf(linkPropValue, axisPropValue) >= 0 || linkPropValue === axisPropValue;\n}\n\nfunction fixValue(axisModel) {\n  var axisInfo = getAxisInfo(axisModel);\n\n  if (!axisInfo) {\n    return;\n  }\n\n  var axisPointerModel = axisInfo.axisPointerModel;\n  var scale = axisInfo.axis.scale;\n  var option = axisPointerModel.option;\n  var status = axisPointerModel.get('status');\n  var value = axisPointerModel.get('value'); // Parse init value for category and time axis.\n\n  if (value != null) {\n    value = scale.parse(value);\n  }\n\n  var useHandle = isHandleTrigger(axisPointerModel); // If `handle` used, `axisPointer` will always be displayed, so value\n  // and status should be initialized.\n\n  if (status == null) {\n    option.status = useHandle ? 'show' : 'hide';\n  }\n\n  var extent = scale.getExtent().slice();\n  extent[0] > extent[1] && extent.reverse();\n\n  if ( // Pick a value on axis when initializing.\n  value == null // If both `handle` and `dataZoom` are used, value may be out of axis extent,\n  // where we should re-pick a value to keep `handle` displaying normally.\n  || value > extent[1]) {\n    // Make handle displayed on the end of the axis when init, which looks better.\n    value = extent[1];\n  }\n\n  if (value < extent[0]) {\n    value = extent[0];\n  }\n\n  option.value = value;\n\n  if (useHandle) {\n    option.status = axisInfo.axis.scale.isBlank() ? 'hide' : 'show';\n  }\n}\n\nfunction getAxisInfo(axisModel) {\n  var coordSysAxesInfo = (axisModel.ecModel.getComponent('axisPointer') || {}).coordSysAxesInfo;\n  return coordSysAxesInfo && coordSysAxesInfo.axesInfo[makeKey(axisModel)];\n}\n\nfunction getAxisPointerModel(axisModel) {\n  var axisInfo = getAxisInfo(axisModel);\n  return axisInfo && axisInfo.axisPointerModel;\n}\n\nfunction isHandleTrigger(axisPointerModel) {\n  return !!axisPointerModel.get('handle.show');\n}\n/**\n * @param {module:echarts/model/Model} model\n * @return {string} unique key\n */\n\n\nfunction makeKey(model) {\n  return model.type + '||' + model.id;\n}\n\nexports.collect = collect;\nexports.fixValue = fixValue;\nexports.getAxisInfo = getAxisInfo;\nexports.getAxisPointerModel = getAxisPointerModel;\nexports.makeKey = makeKey;"]},"metadata":{},"sourceType":"script"}