{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar echarts = require(\"../../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar AxisBuilder = require(\"./AxisBuilder\");\n\nvar BrushController = require(\"../helper/BrushController\");\n\nvar brushHelper = require(\"../helper/brushHelper\");\n\nvar graphic = require(\"../../util/graphic\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar elementList = ['axisLine', 'axisTickLabel', 'axisName'];\nvar AxisView = echarts.extendComponentView({\n  type: 'parallelAxis',\n\n  /**\n   * @override\n   */\n  init: function init(ecModel, api) {\n    AxisView.superApply(this, 'init', arguments);\n    /**\n     * @type {module:echarts/component/helper/BrushController}\n     */\n\n    (this._brushController = new BrushController(api.getZr())).on('brush', zrUtil.bind(this._onBrush, this));\n  },\n\n  /**\n   * @override\n   */\n  render: function render(axisModel, ecModel, api, payload) {\n    if (fromAxisAreaSelect(axisModel, ecModel, payload)) {\n      return;\n    }\n\n    this.axisModel = axisModel;\n    this.api = api;\n    this.group.removeAll();\n    var oldAxisGroup = this._axisGroup;\n    this._axisGroup = new graphic.Group();\n    this.group.add(this._axisGroup);\n\n    if (!axisModel.get('show')) {\n      return;\n    }\n\n    var coordSysModel = getCoordSysModel(axisModel, ecModel);\n    var coordSys = coordSysModel.coordinateSystem;\n    var areaSelectStyle = axisModel.getAreaSelectStyle();\n    var areaWidth = areaSelectStyle.width;\n    var dim = axisModel.axis.dim;\n    var axisLayout = coordSys.getAxisLayout(dim);\n    var builderOpt = zrUtil.extend({\n      strokeContainThreshold: areaWidth\n    }, axisLayout);\n    var axisBuilder = new AxisBuilder(axisModel, builderOpt);\n    zrUtil.each(elementList, axisBuilder.add, axisBuilder);\n\n    this._axisGroup.add(axisBuilder.getGroup());\n\n    this._refreshBrushController(builderOpt, areaSelectStyle, axisModel, coordSysModel, areaWidth, api);\n\n    var animationModel = payload && payload.animation === false ? null : axisModel;\n    graphic.groupTransition(oldAxisGroup, this._axisGroup, animationModel);\n  },\n  // /**\n  //  * @override\n  //  */\n  // updateVisual: function (axisModel, ecModel, api, payload) {\n  //     this._brushController && this._brushController\n  //         .updateCovers(getCoverInfoList(axisModel));\n  // },\n  _refreshBrushController: function _refreshBrushController(builderOpt, areaSelectStyle, axisModel, coordSysModel, areaWidth, api) {\n    // After filtering, axis may change, select area needs to be update.\n    var extent = axisModel.axis.getExtent();\n    var extentLen = extent[1] - extent[0];\n    var extra = Math.min(30, Math.abs(extentLen) * 0.1); // Arbitrary value.\n    // width/height might be negative, which will be\n    // normalized in BoundingRect.\n\n    var rect = graphic.BoundingRect.create({\n      x: extent[0],\n      y: -areaWidth / 2,\n      width: extentLen,\n      height: areaWidth\n    });\n    rect.x -= extra;\n    rect.width += 2 * extra;\n\n    this._brushController.mount({\n      enableGlobalPan: true,\n      rotation: builderOpt.rotation,\n      position: builderOpt.position\n    }).setPanels([{\n      panelId: 'pl',\n      clipPath: brushHelper.makeRectPanelClipPath(rect),\n      isTargetByCursor: brushHelper.makeRectIsTargetByCursor(rect, api, coordSysModel),\n      getLinearBrushOtherExtent: brushHelper.makeLinearBrushOtherExtent(rect, 0)\n    }]).enableBrush({\n      brushType: 'lineX',\n      brushStyle: areaSelectStyle,\n      removeOnClick: true\n    }).updateCovers(getCoverInfoList(axisModel));\n  },\n  _onBrush: function _onBrush(coverInfoList, opt) {\n    // Do not cache these object, because the mey be changed.\n    var axisModel = this.axisModel;\n    var axis = axisModel.axis;\n    var intervals = zrUtil.map(coverInfoList, function (coverInfo) {\n      return [axis.coordToData(coverInfo.range[0], true), axis.coordToData(coverInfo.range[1], true)];\n    }); // If realtime is true, action is not dispatched on drag end, because\n    // the drag end emits the same params with the last drag move event,\n    // and may have some delay when using touch pad.\n\n    if (!axisModel.option.realtime === opt.isEnd || opt.removeOnClick) {\n      // jshint ignore:line\n      this.api.dispatchAction({\n        type: 'axisAreaSelect',\n        parallelAxisId: axisModel.id,\n        intervals: intervals\n      });\n    }\n  },\n\n  /**\n   * @override\n   */\n  dispose: function dispose() {\n    this._brushController.dispose();\n  }\n});\n\nfunction fromAxisAreaSelect(axisModel, ecModel, payload) {\n  return payload && payload.type === 'axisAreaSelect' && ecModel.findComponents({\n    mainType: 'parallelAxis',\n    query: payload\n  })[0] === axisModel;\n}\n\nfunction getCoverInfoList(axisModel) {\n  var axis = axisModel.axis;\n  return zrUtil.map(axisModel.activeIntervals, function (interval) {\n    return {\n      brushType: 'lineX',\n      panelId: 'pl',\n      range: [axis.dataToCoord(interval[0], true), axis.dataToCoord(interval[1], true)]\n    };\n  });\n}\n\nfunction getCoordSysModel(axisModel, ecModel) {\n  return ecModel.getComponent('parallel', axisModel.get('parallelIndex'));\n}\n\nvar _default = AxisView;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/component/axis/ParallelAxisView.js"],"names":["echarts","require","zrUtil","AxisBuilder","BrushController","brushHelper","graphic","elementList","AxisView","extendComponentView","type","init","ecModel","api","superApply","arguments","_brushController","getZr","on","bind","_onBrush","render","axisModel","payload","fromAxisAreaSelect","group","removeAll","oldAxisGroup","_axisGroup","Group","add","get","coordSysModel","getCoordSysModel","coordSys","coordinateSystem","areaSelectStyle","getAreaSelectStyle","areaWidth","width","dim","axis","axisLayout","getAxisLayout","builderOpt","extend","strokeContainThreshold","axisBuilder","each","getGroup","_refreshBrushController","animationModel","animation","groupTransition","extent","getExtent","extentLen","extra","Math","min","abs","rect","BoundingRect","create","x","y","height","mount","enableGlobalPan","rotation","position","setPanels","panelId","clipPath","makeRectPanelClipPath","isTargetByCursor","makeRectIsTargetByCursor","getLinearBrushOtherExtent","makeLinearBrushOtherExtent","enableBrush","brushType","brushStyle","removeOnClick","updateCovers","getCoverInfoList","coverInfoList","opt","intervals","map","coverInfo","coordToData","range","option","realtime","isEnd","dispatchAction","parallelAxisId","id","dispose","findComponents","mainType","query","activeIntervals","interval","dataToCoord","getComponent","_default","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar echarts = require(\"../../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar AxisBuilder = require(\"./AxisBuilder\");\n\nvar BrushController = require(\"../helper/BrushController\");\n\nvar brushHelper = require(\"../helper/brushHelper\");\n\nvar graphic = require(\"../../util/graphic\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar elementList = ['axisLine', 'axisTickLabel', 'axisName'];\nvar AxisView = echarts.extendComponentView({\n  type: 'parallelAxis',\n\n  /**\n   * @override\n   */\n  init: function (ecModel, api) {\n    AxisView.superApply(this, 'init', arguments);\n    /**\n     * @type {module:echarts/component/helper/BrushController}\n     */\n\n    (this._brushController = new BrushController(api.getZr())).on('brush', zrUtil.bind(this._onBrush, this));\n  },\n\n  /**\n   * @override\n   */\n  render: function (axisModel, ecModel, api, payload) {\n    if (fromAxisAreaSelect(axisModel, ecModel, payload)) {\n      return;\n    }\n\n    this.axisModel = axisModel;\n    this.api = api;\n    this.group.removeAll();\n    var oldAxisGroup = this._axisGroup;\n    this._axisGroup = new graphic.Group();\n    this.group.add(this._axisGroup);\n\n    if (!axisModel.get('show')) {\n      return;\n    }\n\n    var coordSysModel = getCoordSysModel(axisModel, ecModel);\n    var coordSys = coordSysModel.coordinateSystem;\n    var areaSelectStyle = axisModel.getAreaSelectStyle();\n    var areaWidth = areaSelectStyle.width;\n    var dim = axisModel.axis.dim;\n    var axisLayout = coordSys.getAxisLayout(dim);\n    var builderOpt = zrUtil.extend({\n      strokeContainThreshold: areaWidth\n    }, axisLayout);\n    var axisBuilder = new AxisBuilder(axisModel, builderOpt);\n    zrUtil.each(elementList, axisBuilder.add, axisBuilder);\n\n    this._axisGroup.add(axisBuilder.getGroup());\n\n    this._refreshBrushController(builderOpt, areaSelectStyle, axisModel, coordSysModel, areaWidth, api);\n\n    var animationModel = payload && payload.animation === false ? null : axisModel;\n    graphic.groupTransition(oldAxisGroup, this._axisGroup, animationModel);\n  },\n  // /**\n  //  * @override\n  //  */\n  // updateVisual: function (axisModel, ecModel, api, payload) {\n  //     this._brushController && this._brushController\n  //         .updateCovers(getCoverInfoList(axisModel));\n  // },\n  _refreshBrushController: function (builderOpt, areaSelectStyle, axisModel, coordSysModel, areaWidth, api) {\n    // After filtering, axis may change, select area needs to be update.\n    var extent = axisModel.axis.getExtent();\n    var extentLen = extent[1] - extent[0];\n    var extra = Math.min(30, Math.abs(extentLen) * 0.1); // Arbitrary value.\n    // width/height might be negative, which will be\n    // normalized in BoundingRect.\n\n    var rect = graphic.BoundingRect.create({\n      x: extent[0],\n      y: -areaWidth / 2,\n      width: extentLen,\n      height: areaWidth\n    });\n    rect.x -= extra;\n    rect.width += 2 * extra;\n\n    this._brushController.mount({\n      enableGlobalPan: true,\n      rotation: builderOpt.rotation,\n      position: builderOpt.position\n    }).setPanels([{\n      panelId: 'pl',\n      clipPath: brushHelper.makeRectPanelClipPath(rect),\n      isTargetByCursor: brushHelper.makeRectIsTargetByCursor(rect, api, coordSysModel),\n      getLinearBrushOtherExtent: brushHelper.makeLinearBrushOtherExtent(rect, 0)\n    }]).enableBrush({\n      brushType: 'lineX',\n      brushStyle: areaSelectStyle,\n      removeOnClick: true\n    }).updateCovers(getCoverInfoList(axisModel));\n  },\n  _onBrush: function (coverInfoList, opt) {\n    // Do not cache these object, because the mey be changed.\n    var axisModel = this.axisModel;\n    var axis = axisModel.axis;\n    var intervals = zrUtil.map(coverInfoList, function (coverInfo) {\n      return [axis.coordToData(coverInfo.range[0], true), axis.coordToData(coverInfo.range[1], true)];\n    }); // If realtime is true, action is not dispatched on drag end, because\n    // the drag end emits the same params with the last drag move event,\n    // and may have some delay when using touch pad.\n\n    if (!axisModel.option.realtime === opt.isEnd || opt.removeOnClick) {\n      // jshint ignore:line\n      this.api.dispatchAction({\n        type: 'axisAreaSelect',\n        parallelAxisId: axisModel.id,\n        intervals: intervals\n      });\n    }\n  },\n\n  /**\n   * @override\n   */\n  dispose: function () {\n    this._brushController.dispose();\n  }\n});\n\nfunction fromAxisAreaSelect(axisModel, ecModel, payload) {\n  return payload && payload.type === 'axisAreaSelect' && ecModel.findComponents({\n    mainType: 'parallelAxis',\n    query: payload\n  })[0] === axisModel;\n}\n\nfunction getCoverInfoList(axisModel) {\n  var axis = axisModel.axis;\n  return zrUtil.map(axisModel.activeIntervals, function (interval) {\n    return {\n      brushType: 'lineX',\n      panelId: 'pl',\n      range: [axis.dataToCoord(interval[0], true), axis.dataToCoord(interval[1], true)]\n    };\n  });\n}\n\nfunction getCoordSysModel(axisModel, ecModel) {\n  return ecModel.getComponent('parallel', axisModel.get('parallelIndex'));\n}\n\nvar _default = AxisView;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}