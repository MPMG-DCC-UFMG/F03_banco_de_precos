{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _dataProvider = require(\"../../data/helper/dataProvider\");\n\nvar retrieveRawValue = _dataProvider.retrieveRawValue;\n\nvar _format = require(\"../../util/format\");\n\nvar getTooltipMarker = _format.getTooltipMarker;\nvar formatTpl = _format.formatTpl;\n\nvar _model = require(\"../../util/model\");\n\nvar getTooltipRenderMode = _model.getTooltipRenderMode;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar DIMENSION_LABEL_REG = /\\{@(.+?)\\}/g; // PENDING A little ugly\n\nvar _default = {\n  /**\n   * Get params for formatter\n   * @param {number} dataIndex\n   * @param {string} [dataType]\n   * @return {Object}\n   */\n  getDataParams: function getDataParams(dataIndex, dataType) {\n    var data = this.getData(dataType);\n    var rawValue = this.getRawValue(dataIndex, dataType);\n    var rawDataIndex = data.getRawIndex(dataIndex);\n    var name = data.getName(dataIndex);\n    var itemOpt = data.getRawDataItem(dataIndex);\n    var color = data.getItemVisual(dataIndex, 'color');\n    var borderColor = data.getItemVisual(dataIndex, 'borderColor');\n    var tooltipModel = this.ecModel.getComponent('tooltip');\n    var renderModeOption = tooltipModel && tooltipModel.get('renderMode');\n    var renderMode = getTooltipRenderMode(renderModeOption);\n    var mainType = this.mainType;\n    var isSeries = mainType === 'series';\n    var userOutput = data.userOutput;\n    return {\n      componentType: mainType,\n      componentSubType: this.subType,\n      componentIndex: this.componentIndex,\n      seriesType: isSeries ? this.subType : null,\n      seriesIndex: this.seriesIndex,\n      seriesId: isSeries ? this.id : null,\n      seriesName: isSeries ? this.name : null,\n      name: name,\n      dataIndex: rawDataIndex,\n      data: itemOpt,\n      dataType: dataType,\n      value: rawValue,\n      color: color,\n      borderColor: borderColor,\n      dimensionNames: userOutput ? userOutput.dimensionNames : null,\n      encode: userOutput ? userOutput.encode : null,\n      marker: getTooltipMarker({\n        color: color,\n        renderMode: renderMode\n      }),\n      // Param name list for mapping `a`, `b`, `c`, `d`, `e`\n      $vars: ['seriesName', 'name', 'value']\n    };\n  },\n\n  /**\n   * Format label\n   * @param {number} dataIndex\n   * @param {string} [status='normal'] 'normal' or 'emphasis'\n   * @param {string} [dataType]\n   * @param {number} [dimIndex] Only used in some chart that\n   *        use formatter in different dimensions, like radar.\n   * @param {string} [labelProp='label']\n   * @return {string} If not formatter, return null/undefined\n   */\n  getFormattedLabel: function getFormattedLabel(dataIndex, status, dataType, dimIndex, labelProp) {\n    status = status || 'normal';\n    var data = this.getData(dataType);\n    var itemModel = data.getItemModel(dataIndex);\n    var params = this.getDataParams(dataIndex, dataType);\n\n    if (dimIndex != null && params.value instanceof Array) {\n      params.value = params.value[dimIndex];\n    }\n\n    var formatter = itemModel.get(status === 'normal' ? [labelProp || 'label', 'formatter'] : [status, labelProp || 'label', 'formatter']);\n\n    if (typeof formatter === 'function') {\n      params.status = status;\n      params.dimensionIndex = dimIndex;\n      return formatter(params);\n    } else if (typeof formatter === 'string') {\n      var str = formatTpl(formatter, params); // Support 'aaa{@[3]}bbb{@product}ccc'.\n      // Do not support '}' in dim name util have to.\n\n      return str.replace(DIMENSION_LABEL_REG, function (origin, dim) {\n        var len = dim.length;\n\n        if (dim.charAt(0) === '[' && dim.charAt(len - 1) === ']') {\n          dim = +dim.slice(1, len - 1); // Also: '[]' => 0\n        }\n\n        return retrieveRawValue(data, dataIndex, dim);\n      });\n    }\n  },\n\n  /**\n   * Get raw value in option\n   * @param {number} idx\n   * @param {string} [dataType]\n   * @return {Array|number|string}\n   */\n  getRawValue: function getRawValue(idx, dataType) {\n    return retrieveRawValue(this.getData(dataType), idx);\n  },\n\n  /**\n   * Should be implemented.\n   * @param {number} dataIndex\n   * @param {boolean} [multipleSeries=false]\n   * @param {number} [dataType]\n   * @return {string} tooltip string\n   */\n  formatTooltip: function formatTooltip() {// Empty function\n  }\n};\nmodule.exports = _default;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/model/mixin/dataFormat.js"],"names":["_dataProvider","require","retrieveRawValue","_format","getTooltipMarker","formatTpl","_model","getTooltipRenderMode","DIMENSION_LABEL_REG","_default","getDataParams","dataIndex","dataType","data","getData","rawValue","getRawValue","rawDataIndex","getRawIndex","name","getName","itemOpt","getRawDataItem","color","getItemVisual","borderColor","tooltipModel","ecModel","getComponent","renderModeOption","get","renderMode","mainType","isSeries","userOutput","componentType","componentSubType","subType","componentIndex","seriesType","seriesIndex","seriesId","id","seriesName","value","dimensionNames","encode","marker","$vars","getFormattedLabel","status","dimIndex","labelProp","itemModel","getItemModel","params","Array","formatter","dimensionIndex","str","replace","origin","dim","len","length","charAt","slice","idx","formatTooltip","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _dataProvider = require(\"../../data/helper/dataProvider\");\n\nvar retrieveRawValue = _dataProvider.retrieveRawValue;\n\nvar _format = require(\"../../util/format\");\n\nvar getTooltipMarker = _format.getTooltipMarker;\nvar formatTpl = _format.formatTpl;\n\nvar _model = require(\"../../util/model\");\n\nvar getTooltipRenderMode = _model.getTooltipRenderMode;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar DIMENSION_LABEL_REG = /\\{@(.+?)\\}/g; // PENDING A little ugly\n\nvar _default = {\n  /**\n   * Get params for formatter\n   * @param {number} dataIndex\n   * @param {string} [dataType]\n   * @return {Object}\n   */\n  getDataParams: function (dataIndex, dataType) {\n    var data = this.getData(dataType);\n    var rawValue = this.getRawValue(dataIndex, dataType);\n    var rawDataIndex = data.getRawIndex(dataIndex);\n    var name = data.getName(dataIndex);\n    var itemOpt = data.getRawDataItem(dataIndex);\n    var color = data.getItemVisual(dataIndex, 'color');\n    var borderColor = data.getItemVisual(dataIndex, 'borderColor');\n    var tooltipModel = this.ecModel.getComponent('tooltip');\n    var renderModeOption = tooltipModel && tooltipModel.get('renderMode');\n    var renderMode = getTooltipRenderMode(renderModeOption);\n    var mainType = this.mainType;\n    var isSeries = mainType === 'series';\n    var userOutput = data.userOutput;\n    return {\n      componentType: mainType,\n      componentSubType: this.subType,\n      componentIndex: this.componentIndex,\n      seriesType: isSeries ? this.subType : null,\n      seriesIndex: this.seriesIndex,\n      seriesId: isSeries ? this.id : null,\n      seriesName: isSeries ? this.name : null,\n      name: name,\n      dataIndex: rawDataIndex,\n      data: itemOpt,\n      dataType: dataType,\n      value: rawValue,\n      color: color,\n      borderColor: borderColor,\n      dimensionNames: userOutput ? userOutput.dimensionNames : null,\n      encode: userOutput ? userOutput.encode : null,\n      marker: getTooltipMarker({\n        color: color,\n        renderMode: renderMode\n      }),\n      // Param name list for mapping `a`, `b`, `c`, `d`, `e`\n      $vars: ['seriesName', 'name', 'value']\n    };\n  },\n\n  /**\n   * Format label\n   * @param {number} dataIndex\n   * @param {string} [status='normal'] 'normal' or 'emphasis'\n   * @param {string} [dataType]\n   * @param {number} [dimIndex] Only used in some chart that\n   *        use formatter in different dimensions, like radar.\n   * @param {string} [labelProp='label']\n   * @return {string} If not formatter, return null/undefined\n   */\n  getFormattedLabel: function (dataIndex, status, dataType, dimIndex, labelProp) {\n    status = status || 'normal';\n    var data = this.getData(dataType);\n    var itemModel = data.getItemModel(dataIndex);\n    var params = this.getDataParams(dataIndex, dataType);\n\n    if (dimIndex != null && params.value instanceof Array) {\n      params.value = params.value[dimIndex];\n    }\n\n    var formatter = itemModel.get(status === 'normal' ? [labelProp || 'label', 'formatter'] : [status, labelProp || 'label', 'formatter']);\n\n    if (typeof formatter === 'function') {\n      params.status = status;\n      params.dimensionIndex = dimIndex;\n      return formatter(params);\n    } else if (typeof formatter === 'string') {\n      var str = formatTpl(formatter, params); // Support 'aaa{@[3]}bbb{@product}ccc'.\n      // Do not support '}' in dim name util have to.\n\n      return str.replace(DIMENSION_LABEL_REG, function (origin, dim) {\n        var len = dim.length;\n\n        if (dim.charAt(0) === '[' && dim.charAt(len - 1) === ']') {\n          dim = +dim.slice(1, len - 1); // Also: '[]' => 0\n        }\n\n        return retrieveRawValue(data, dataIndex, dim);\n      });\n    }\n  },\n\n  /**\n   * Get raw value in option\n   * @param {number} idx\n   * @param {string} [dataType]\n   * @return {Array|number|string}\n   */\n  getRawValue: function (idx, dataType) {\n    return retrieveRawValue(this.getData(dataType), idx);\n  },\n\n  /**\n   * Should be implemented.\n   * @param {number} dataIndex\n   * @param {boolean} [multipleSeries=false]\n   * @param {number} [dataType]\n   * @return {string} tooltip string\n   */\n  formatTooltip: function () {// Empty function\n  }\n};\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}