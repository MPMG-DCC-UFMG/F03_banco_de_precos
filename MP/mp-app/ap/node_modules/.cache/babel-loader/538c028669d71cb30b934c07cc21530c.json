{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar VisualMapping = require(\"./VisualMapping\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * @file Visual solution, for consistent option specification.\n */\n\n\nvar each = zrUtil.each;\n\nfunction hasKeys(obj) {\n  if (obj) {\n    for (var name in obj) {\n      if (obj.hasOwnProperty(name)) {\n        return true;\n      }\n    }\n  }\n}\n/**\n * @param {Object} option\n * @param {Array.<string>} stateList\n * @param {Function} [supplementVisualOption]\n * @return {Object} visualMappings <state, <visualType, module:echarts/visual/VisualMapping>>\n */\n\n\nfunction createVisualMappings(option, stateList, supplementVisualOption) {\n  var visualMappings = {};\n  each(stateList, function (state) {\n    var mappings = visualMappings[state] = createMappings();\n    each(option[state], function (visualData, visualType) {\n      if (!VisualMapping.isValidType(visualType)) {\n        return;\n      }\n\n      var mappingOption = {\n        type: visualType,\n        visual: visualData\n      };\n      supplementVisualOption && supplementVisualOption(mappingOption, state);\n      mappings[visualType] = new VisualMapping(mappingOption); // Prepare a alpha for opacity, for some case that opacity\n      // is not supported, such as rendering using gradient color.\n\n      if (visualType === 'opacity') {\n        mappingOption = zrUtil.clone(mappingOption);\n        mappingOption.type = 'colorAlpha';\n        mappings.__hidden.__alphaForOpacity = new VisualMapping(mappingOption);\n      }\n    });\n  });\n  return visualMappings;\n\n  function createMappings() {\n    var Creater = function Creater() {}; // Make sure hidden fields will not be visited by\n    // object iteration (with hasOwnProperty checking).\n\n\n    Creater.prototype.__hidden = Creater.prototype;\n    var obj = new Creater();\n    return obj;\n  }\n}\n/**\n * @param {Object} thisOption\n * @param {Object} newOption\n * @param {Array.<string>} keys\n */\n\n\nfunction replaceVisualOption(thisOption, newOption, keys) {\n  // Visual attributes merge is not supported, otherwise it\n  // brings overcomplicated merge logic. See #2853. So if\n  // newOption has anyone of these keys, all of these keys\n  // will be reset. Otherwise, all keys remain.\n  var has;\n  zrUtil.each(keys, function (key) {\n    if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {\n      has = true;\n    }\n  });\n  has && zrUtil.each(keys, function (key) {\n    if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {\n      thisOption[key] = zrUtil.clone(newOption[key]);\n    } else {\n      delete thisOption[key];\n    }\n  });\n}\n/**\n * @param {Array.<string>} stateList\n * @param {Object} visualMappings <state, Object.<visualType, module:echarts/visual/VisualMapping>>\n * @param {module:echarts/data/List} list\n * @param {Function} getValueState param: valueOrIndex, return: state.\n * @param {object} [scope] Scope for getValueState\n * @param {string} [dimension] Concrete dimension, if used.\n */\n// ???! handle brush?\n\n\nfunction applyVisual(stateList, visualMappings, data, getValueState, scope, dimension) {\n  var visualTypesMap = {};\n  zrUtil.each(stateList, function (state) {\n    var visualTypes = VisualMapping.prepareVisualTypes(visualMappings[state]);\n    visualTypesMap[state] = visualTypes;\n  });\n  var dataIndex;\n\n  function getVisual(key) {\n    return data.getItemVisual(dataIndex, key);\n  }\n\n  function setVisual(key, value) {\n    data.setItemVisual(dataIndex, key, value);\n  }\n\n  if (dimension == null) {\n    data.each(eachItem);\n  } else {\n    data.each([dimension], eachItem);\n  }\n\n  function eachItem(valueOrIndex, index) {\n    dataIndex = dimension == null ? valueOrIndex : index;\n    var rawDataItem = data.getRawDataItem(dataIndex); // Consider performance\n\n    if (rawDataItem && rawDataItem.visualMap === false) {\n      return;\n    }\n\n    var valueState = getValueState.call(scope, valueOrIndex);\n    var mappings = visualMappings[valueState];\n    var visualTypes = visualTypesMap[valueState];\n\n    for (var i = 0, len = visualTypes.length; i < len; i++) {\n      var type = visualTypes[i];\n      mappings[type] && mappings[type].applyVisual(valueOrIndex, getVisual, setVisual);\n    }\n  }\n}\n/**\n * @param {module:echarts/data/List} data\n * @param {Array.<string>} stateList\n * @param {Object} visualMappings <state, Object.<visualType, module:echarts/visual/VisualMapping>>\n * @param {Function} getValueState param: valueOrIndex, return: state.\n * @param {number} [dim] dimension or dimension index.\n */\n\n\nfunction incrementalApplyVisual(stateList, visualMappings, getValueState, dim) {\n  var visualTypesMap = {};\n  zrUtil.each(stateList, function (state) {\n    var visualTypes = VisualMapping.prepareVisualTypes(visualMappings[state]);\n    visualTypesMap[state] = visualTypes;\n  });\n\n  function progress(params, data) {\n    if (dim != null) {\n      dim = data.getDimension(dim);\n    }\n\n    function getVisual(key) {\n      return data.getItemVisual(dataIndex, key);\n    }\n\n    function setVisual(key, value) {\n      data.setItemVisual(dataIndex, key, value);\n    }\n\n    var dataIndex;\n\n    while ((dataIndex = params.next()) != null) {\n      var rawDataItem = data.getRawDataItem(dataIndex); // Consider performance\n\n      if (rawDataItem && rawDataItem.visualMap === false) {\n        continue;\n      }\n\n      var value = dim != null ? data.get(dim, dataIndex, true) : dataIndex;\n      var valueState = getValueState(value);\n      var mappings = visualMappings[valueState];\n      var visualTypes = visualTypesMap[valueState];\n\n      for (var i = 0, len = visualTypes.length; i < len; i++) {\n        var type = visualTypes[i];\n        mappings[type] && mappings[type].applyVisual(value, getVisual, setVisual);\n      }\n    }\n  }\n\n  return {\n    progress: progress\n  };\n}\n\nexports.createVisualMappings = createVisualMappings;\nexports.replaceVisualOption = replaceVisualOption;\nexports.applyVisual = applyVisual;\nexports.incrementalApplyVisual = incrementalApplyVisual;","map":{"version":3,"sources":["/home/johnatan/MP/mp-app/ap/node_modules/echarts/lib/visual/visualSolution.js"],"names":["zrUtil","require","VisualMapping","each","hasKeys","obj","name","hasOwnProperty","createVisualMappings","option","stateList","supplementVisualOption","visualMappings","state","mappings","createMappings","visualData","visualType","isValidType","mappingOption","type","visual","clone","__hidden","__alphaForOpacity","Creater","prototype","replaceVisualOption","thisOption","newOption","keys","has","key","applyVisual","data","getValueState","scope","dimension","visualTypesMap","visualTypes","prepareVisualTypes","dataIndex","getVisual","getItemVisual","setVisual","value","setItemVisual","eachItem","valueOrIndex","index","rawDataItem","getRawDataItem","visualMap","valueState","call","i","len","length","incrementalApplyVisual","dim","progress","params","getDimension","next","get","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar VisualMapping = require(\"./VisualMapping\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * @file Visual solution, for consistent option specification.\n */\nvar each = zrUtil.each;\n\nfunction hasKeys(obj) {\n  if (obj) {\n    for (var name in obj) {\n      if (obj.hasOwnProperty(name)) {\n        return true;\n      }\n    }\n  }\n}\n/**\n * @param {Object} option\n * @param {Array.<string>} stateList\n * @param {Function} [supplementVisualOption]\n * @return {Object} visualMappings <state, <visualType, module:echarts/visual/VisualMapping>>\n */\n\n\nfunction createVisualMappings(option, stateList, supplementVisualOption) {\n  var visualMappings = {};\n  each(stateList, function (state) {\n    var mappings = visualMappings[state] = createMappings();\n    each(option[state], function (visualData, visualType) {\n      if (!VisualMapping.isValidType(visualType)) {\n        return;\n      }\n\n      var mappingOption = {\n        type: visualType,\n        visual: visualData\n      };\n      supplementVisualOption && supplementVisualOption(mappingOption, state);\n      mappings[visualType] = new VisualMapping(mappingOption); // Prepare a alpha for opacity, for some case that opacity\n      // is not supported, such as rendering using gradient color.\n\n      if (visualType === 'opacity') {\n        mappingOption = zrUtil.clone(mappingOption);\n        mappingOption.type = 'colorAlpha';\n        mappings.__hidden.__alphaForOpacity = new VisualMapping(mappingOption);\n      }\n    });\n  });\n  return visualMappings;\n\n  function createMappings() {\n    var Creater = function () {}; // Make sure hidden fields will not be visited by\n    // object iteration (with hasOwnProperty checking).\n\n\n    Creater.prototype.__hidden = Creater.prototype;\n    var obj = new Creater();\n    return obj;\n  }\n}\n/**\n * @param {Object} thisOption\n * @param {Object} newOption\n * @param {Array.<string>} keys\n */\n\n\nfunction replaceVisualOption(thisOption, newOption, keys) {\n  // Visual attributes merge is not supported, otherwise it\n  // brings overcomplicated merge logic. See #2853. So if\n  // newOption has anyone of these keys, all of these keys\n  // will be reset. Otherwise, all keys remain.\n  var has;\n  zrUtil.each(keys, function (key) {\n    if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {\n      has = true;\n    }\n  });\n  has && zrUtil.each(keys, function (key) {\n    if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {\n      thisOption[key] = zrUtil.clone(newOption[key]);\n    } else {\n      delete thisOption[key];\n    }\n  });\n}\n/**\n * @param {Array.<string>} stateList\n * @param {Object} visualMappings <state, Object.<visualType, module:echarts/visual/VisualMapping>>\n * @param {module:echarts/data/List} list\n * @param {Function} getValueState param: valueOrIndex, return: state.\n * @param {object} [scope] Scope for getValueState\n * @param {string} [dimension] Concrete dimension, if used.\n */\n// ???! handle brush?\n\n\nfunction applyVisual(stateList, visualMappings, data, getValueState, scope, dimension) {\n  var visualTypesMap = {};\n  zrUtil.each(stateList, function (state) {\n    var visualTypes = VisualMapping.prepareVisualTypes(visualMappings[state]);\n    visualTypesMap[state] = visualTypes;\n  });\n  var dataIndex;\n\n  function getVisual(key) {\n    return data.getItemVisual(dataIndex, key);\n  }\n\n  function setVisual(key, value) {\n    data.setItemVisual(dataIndex, key, value);\n  }\n\n  if (dimension == null) {\n    data.each(eachItem);\n  } else {\n    data.each([dimension], eachItem);\n  }\n\n  function eachItem(valueOrIndex, index) {\n    dataIndex = dimension == null ? valueOrIndex : index;\n    var rawDataItem = data.getRawDataItem(dataIndex); // Consider performance\n\n    if (rawDataItem && rawDataItem.visualMap === false) {\n      return;\n    }\n\n    var valueState = getValueState.call(scope, valueOrIndex);\n    var mappings = visualMappings[valueState];\n    var visualTypes = visualTypesMap[valueState];\n\n    for (var i = 0, len = visualTypes.length; i < len; i++) {\n      var type = visualTypes[i];\n      mappings[type] && mappings[type].applyVisual(valueOrIndex, getVisual, setVisual);\n    }\n  }\n}\n/**\n * @param {module:echarts/data/List} data\n * @param {Array.<string>} stateList\n * @param {Object} visualMappings <state, Object.<visualType, module:echarts/visual/VisualMapping>>\n * @param {Function} getValueState param: valueOrIndex, return: state.\n * @param {number} [dim] dimension or dimension index.\n */\n\n\nfunction incrementalApplyVisual(stateList, visualMappings, getValueState, dim) {\n  var visualTypesMap = {};\n  zrUtil.each(stateList, function (state) {\n    var visualTypes = VisualMapping.prepareVisualTypes(visualMappings[state]);\n    visualTypesMap[state] = visualTypes;\n  });\n\n  function progress(params, data) {\n    if (dim != null) {\n      dim = data.getDimension(dim);\n    }\n\n    function getVisual(key) {\n      return data.getItemVisual(dataIndex, key);\n    }\n\n    function setVisual(key, value) {\n      data.setItemVisual(dataIndex, key, value);\n    }\n\n    var dataIndex;\n\n    while ((dataIndex = params.next()) != null) {\n      var rawDataItem = data.getRawDataItem(dataIndex); // Consider performance\n\n      if (rawDataItem && rawDataItem.visualMap === false) {\n        continue;\n      }\n\n      var value = dim != null ? data.get(dim, dataIndex, true) : dataIndex;\n      var valueState = getValueState(value);\n      var mappings = visualMappings[valueState];\n      var visualTypes = visualTypesMap[valueState];\n\n      for (var i = 0, len = visualTypes.length; i < len; i++) {\n        var type = visualTypes[i];\n        mappings[type] && mappings[type].applyVisual(value, getVisual, setVisual);\n      }\n    }\n  }\n\n  return {\n    progress: progress\n  };\n}\n\nexports.createVisualMappings = createVisualMappings;\nexports.replaceVisualOption = replaceVisualOption;\nexports.applyVisual = applyVisual;\nexports.incrementalApplyVisual = incrementalApplyVisual;"]},"metadata":{},"sourceType":"script"}